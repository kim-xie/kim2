/*! This file is created by kim */
webpackJsonp([1],{

/***/ 11:
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdW1lZGl0b3IvdGhlbWVzL2RlZmF1bHQvY3NzL3VtZWRpdG9yLmNzcz9lMDg4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9qcy91bWVkaXRvci90aGVtZXMvZGVmYXVsdC9jc3MvdW1lZGl0b3IuY3NzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 21:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(11);
__webpack_require__(4);
module.exports = __webpack_require__(5);


/***/ }),

/***/ 4:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\r\n *  umeditor完整配置项\r\n *  可以在这里配置整个编辑器的特性\r\n */\n/**************************提示********************************\r\n * 所有被注释的配置项均为UEditor默认值。\r\n * 修改默认配置请首先确保已经完全明确该参数的真实用途。\r\n * 主要有两种修改方案，一种是取消此处注释，然后修改成对应参数；另一种是在实例化编辑器时传入对应参数。\r\n * 当升级编辑器时，可直接使用旧版配置文件替换新版配置文件,不用担心旧版配置文件中因缺少新功能所需的参数而导致脚本报错。\r\n **************************提示********************************/\n\n(function () {\n        /**\r\n         * 编辑器资源文件根路径。它所表示的含义是：以编辑器实例化页面为当前路径，指向编辑器资源文件（即dialog等文件夹）的路径。\r\n         * 鉴于很多同学在使用编辑器的时候出现的种种路径问题，此处强烈建议大家使用\"相对于网站根目录的相对路径\"进行配置。\r\n         * \"相对于网站根目录的相对路径\"也就是以斜杠开头的形如\"/myProject/umeditor/\"这样的路径。\r\n         * 如果站点中有多个不在同一层级的页面需要实例化编辑器，且引用了同一UEditor的时候，此处的URL可能不适用于每个页面的编辑器。\r\n         * 因此，UEditor提供了针对不同页面的编辑器可单独配置的根路径，具体来说，在需要实例化编辑器的页面最顶部写上如下代码即可。当然，需要令此处的URL等于对应的配置。\r\n         * window.UMEDITOR_HOME_URL = \"/xxxx/xxxx/\";\r\n         */\n        var URL = window.UMEDITOR_HOME_URL || function () {\n\n                function PathStack() {\n\n                        this.documentURL = self.document.URL || self.location.href;\n\n                        this.separator = '/';\n                        this.separatorPattern = /\\\\|\\//g;\n                        this.currentDir = './';\n                        this.currentDirPattern = /^[.]\\/]/;\n\n                        this.path = this.documentURL;\n                        this.stack = [];\n\n                        this.push(this.documentURL);\n                }\n\n                PathStack.isParentPath = function (path) {\n                        return path === '..';\n                };\n\n                PathStack.hasProtocol = function (path) {\n                        return !!PathStack.getProtocol(path);\n                };\n\n                PathStack.getProtocol = function (path) {\n\n                        var protocol = /^[^:]*:\\/*/.exec(path);\n\n                        return protocol ? protocol[0] : null;\n                };\n\n                PathStack.prototype = {\n                        push: function push(path) {\n\n                                this.path = path;\n\n                                update.call(this);\n                                parse.call(this);\n\n                                return this;\n                        },\n                        getPath: function getPath() {\n                                return this + \"\";\n                        },\n                        toString: function toString() {\n                                return this.protocol + this.stack.concat(['']).join(this.separator);\n                        }\n                };\n\n                function update() {\n\n                        var protocol = PathStack.getProtocol(this.path || '');\n\n                        if (protocol) {\n\n                                //根协议\n                                this.protocol = protocol;\n\n                                //local\n                                this.localSeparator = /\\\\|\\//.exec(this.path.replace(protocol, ''))[0];\n\n                                this.stack = [];\n                        } else {\n                                protocol = /\\\\|\\//.exec(this.path);\n                                protocol && (this.localSeparator = protocol[0]);\n                        }\n                }\n\n                function parse() {\n\n                        var parsedStack = this.path.replace(this.currentDirPattern, '');\n\n                        if (PathStack.hasProtocol(this.path)) {\n                                parsedStack = parsedStack.replace(this.protocol, '');\n                        }\n\n                        parsedStack = parsedStack.split(this.localSeparator);\n                        parsedStack.length = parsedStack.length - 1;\n\n                        for (var i = 0, tempPath, l = parsedStack.length, root = this.stack; i < l; i++) {\n                                tempPath = parsedStack[i];\n                                if (tempPath) {\n                                        if (PathStack.isParentPath(tempPath)) {\n                                                root.pop();\n                                        } else {\n                                                root.push(tempPath);\n                                        }\n                                }\n                        }\n                }\n\n                var currentPath = document.getElementsByTagName('script');\n\n                currentPath = currentPath[currentPath.length - 1].src;\n\n                return new PathStack().push(currentPath) + \"\";\n        }();\n\n        /**\r\n         * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。\r\n         */\n        window.UMEDITOR_CONFIG = {\n\n                //为编辑器实例添加一个路径，这个不能被注释\n                UMEDITOR_HOME_URL: URL\n\n                //图片上传配置区\n                , imageUrl: URL + \"jsp/imageUp.jsp\" //图片上传提交地址\n                , imagePath: URL + \"jsp/\" //图片修正地址，引用了fixedImagePath,如有特殊需求，可自行配置\n                , imageFieldName: \"upfile\" //图片数据的key,若此处修改，需要在后台对应文件修改对应参数\n\n\n                //工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的从新定义\n                , toolbar: ['source | undo redo | bold italic underline strikethrough | superscript subscript | forecolor backcolor | removeformat |', 'insertorderedlist insertunorderedlist | selectall cleardoc paragraph | fontfamily fontsize', '| justifyleft justifycenter justifyright justifyjustify |', 'link unlink | emotion image video  | map' /*,\r\n                                                                                                                                                                                                                                                                                                                                                             '| horizontal print preview fullscreen', 'drafts', 'formula'*/\n                ]\n\n                //语言配置项,默认是zh-cn。有需要的话也可以使用如下这样的方式来自动多语言切换，当然，前提条件是lang文件夹下存在对应的语言文件：\n                //lang值也可以通过自动获取 (navigator.language||navigator.browserLanguage ||navigator.userLanguage).toLowerCase()\n                //,lang:\"zh-cn\"\n                //,langPath:URL +\"lang/\"\n\n                //ie下的链接自动监测\n                //,autourldetectinie:false\n\n                //主题配置项,默认是default。有需要的话也可以使用如下这样的方式来自动多主题切换，当然，前提条件是themes文件夹下存在对应的主题文件：\n                //现有如下皮肤:default\n                //,theme:'default'\n                //,themePath:URL +\"themes/\"\n\n\n                //针对getAllHtml方法，会在对应的head标签中增加该编码设置。\n                //,charset:\"utf-8\"\n\n                //常用配置项目\n                //,isShow : true    //默认显示编辑器\n\n                //,initialContent:'欢迎使用UMEDITOR!'    //初始化编辑器的内容,也可以通过textarea/script给值，看官网例子\n\n                //,initialFrameWidth:500 //初始化编辑器宽度,默认500\n                //,initialFrameHeight:500  //初始化编辑器高度,默认500\n\n                //,autoClearinitialContent:true //是否自动清除编辑器初始内容，注意：如果focus属性设置为true,这个也为真，那么编辑器一上来就会触发导致初始化的内容看不到了\n\n                //,textarea:'editorValue' // 提交表单时，服务器获取编辑器提交内容的所用的参数，多实例时可以给容器name属性，会将name给定的值最为每个实例的键值，不用每次实例化的时候都设置这个值\n\n                //,focus:false //初始化时，是否让编辑器获得焦点true或false\n\n                //,autoClearEmptyNode : true //getContent时，是否删除空的inlineElement节点（包括嵌套的情况）\n\n                //,fullscreen : false //是否开启初始化时即全屏，默认关闭\n\n                //,readonly : false //编辑器初始化结束后,编辑区域是否是只读的，默认是false\n\n                //,zIndex : 900     //编辑器层级的基数,默认是900\n\n                //如果自定义，最好给p标签如下的行高，要不输入中文时，会有跳动感\n                //注意这里添加的样式，最好放在.edui-editor-body .edui-body-container这两个的下边，防止跟页面上css冲突\n                //,initialStyle:'.edui-editor-body .edui-body-container p{line-height:1em}'\n\n                //,autoSyncData:true //自动同步编辑器要提交的数据\n\n                //,emotionLocalization:false //是否开启表情本地化，默认关闭。若要开启请确保emotion文件夹下包含官网提供的images表情文件夹\n\n                //,allHtmlEnabled:false //提交到后台的数据是否包含整个html字符串\n\n                //fontfamily\n                //字体设置\n                //        ,'fontfamily':[\n                //              { name: 'songti', val: '宋体,SimSun'},\n                //          ]\n\n                //fontsize\n                //字号\n                //,'fontsize':[10, 11, 12, 14, 16, 18, 20, 24, 36]\n\n                //paragraph\n                //段落格式 值留空时支持多语言自动识别，若配置，则以配置值为准\n                //,'paragraph':{'p':'', 'h1':'', 'h2':'', 'h3':'', 'h4':'', 'h5':'', 'h6':''}\n\n                //undo\n                //可以最多回退的次数,默认20\n                //,maxUndoCount:20\n                //当输入的字符数超过该值时，保存一次现场\n                //,maxInputCount:1\n\n                //imageScaleEnabled\n                // 是否允许点击文件拖拽改变大小,默认true\n                //,imageScaleEnabled:true\n\n                //dropFileEnabled\n                // 是否允许拖放图片到编辑区域，上传并插入,默认true\n                //,dropFileEnabled:true\n\n                //pasteImageEnabled\n                // 是否允许粘贴QQ截屏，上传并插入,默认true\n                //,pasteImageEnabled:true\n\n                //autoHeightEnabled\n                // 是否自动长高,默认true\n                //,autoHeightEnabled:true\n\n                //autoFloatEnabled\n                //是否保持toolbar的位置不动,默认true\n                //,autoFloatEnabled:true\n\n                //浮动时工具栏距离浏览器顶部的高度，用于某些具有固定头部的页面\n                //,topOffset:30\n\n                //填写过滤规则\n                //,filterRules: {}\n        };\n})();//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 5:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery) {\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*!\r\n * UEditor Mini版本\r\n * version: 1.2.2\r\n * build: Wed Mar 19 2014 17:14:25 GMT+0800 (中国标准时间)\r\n */\n\n(function ($) {\n    var _dom$domUtils;\n\n    UMEDITOR_CONFIG = window.UMEDITOR_CONFIG || {};\n\n    window.UM = {\n        plugins: {},\n\n        commands: {},\n\n        I18N: {},\n\n        version: \"1.2.2\"\n    };\n\n    var dom = UM.dom = {};\n    /**\r\n     * 浏览器判断模块\r\n     * @file\r\n     * @module UE.browser\r\n     * @since 1.2.6.1\r\n     */\n\n    /**\r\n     * 提供浏览器检测的模块\r\n     * @unfile\r\n     * @module UE.browser\r\n     */\n    var browser = UM.browser = function () {\n        var agent = navigator.userAgent.toLowerCase(),\n            opera = window.opera,\n            browser = {\n            /**\r\n             * @property {boolean} ie 检测当前浏览器是否为IE\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.ie ) {\r\n            *     console.log( '当前浏览器是IE' );\r\n            * }\r\n             * ```\r\n             */\n            ie: /(msie\\s|trident.*rv:)([\\w.]+)/.test(agent),\n\n            /**\r\n             * @property {boolean} opera 检测当前浏览器是否为Opera\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.opera ) {\r\n            *     console.log( '当前浏览器是Opera' );\r\n            * }\r\n             * ```\r\n             */\n            opera: !!opera && opera.version,\n\n            /**\r\n             * @property {boolean} webkit 检测当前浏览器是否是webkit内核的浏览器\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.webkit ) {\r\n            *     console.log( '当前浏览器是webkit内核浏览器' );\r\n            * }\r\n             * ```\r\n             */\n            webkit: agent.indexOf(' applewebkit/') > -1,\n\n            /**\r\n             * @property {boolean} mac 检测当前浏览器是否是运行在mac平台下\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.mac ) {\r\n            *     console.log( '当前浏览器运行在mac平台下' );\r\n            * }\r\n             * ```\r\n             */\n            mac: agent.indexOf('macintosh') > -1,\n\n            /**\r\n             * @property {boolean} quirks 检测当前浏览器是否处于“怪异模式”下\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.quirks ) {\r\n            *     console.log( '当前浏览器运行处于“怪异模式”' );\r\n            * }\r\n             * ```\r\n             */\n            quirks: document.compatMode == 'BackCompat'\n        };\n\n        /**\r\n         * @property {boolean} gecko 检测当前浏览器内核是否是gecko内核\r\n         * @example\r\n         * ```javascript\r\n         * if ( UE.browser.gecko ) {\r\n        *     console.log( '当前浏览器内核是gecko内核' );\r\n        * }\r\n         * ```\r\n         */\n        browser.gecko = navigator.product == 'Gecko' && !browser.webkit && !browser.opera && !browser.ie;\n\n        var version = 0;\n\n        // Internet Explorer 6.0+\n        if (browser.ie) {\n\n            var v1 = agent.match(/(?:msie\\s([\\w.]+))/);\n            var v2 = agent.match(/(?:trident.*rv:([\\w.]+))/);\n            if (v1 && v2 && v1[1] && v2[1]) {\n                version = Math.max(v1[1] * 1, v2[1] * 1);\n            } else if (v1 && v1[1]) {\n                version = v1[1] * 1;\n            } else if (v2 && v2[1]) {\n                version = v2[1] * 1;\n            } else {\n                version = 0;\n            }\n\n            browser.ie11Compat = document.documentMode == 11;\n            /**\r\n             * @property { boolean } ie9Compat 检测浏览器模式是否为 IE9 兼容模式\r\n             * @warning 如果浏览器不是IE， 则该值为undefined\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.ie9Compat ) {\r\n             *     console.log( '当前浏览器运行在IE9兼容模式下' );\r\n             * }\r\n             * ```\r\n             */\n            browser.ie9Compat = document.documentMode == 9;\n\n            /**\r\n             * @property { boolean } ie8 检测浏览器是否是IE8浏览器\r\n             * @warning 如果浏览器不是IE， 则该值为undefined\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.ie8 ) {\r\n             *     console.log( '当前浏览器是IE8浏览器' );\r\n             * }\r\n             * ```\r\n             */\n            browser.ie8 = !!document.documentMode;\n\n            /**\r\n             * @property { boolean } ie8Compat 检测浏览器模式是否为 IE8 兼容模式\r\n             * @warning 如果浏览器不是IE， 则该值为undefined\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.ie8Compat ) {\r\n             *     console.log( '当前浏览器运行在IE8兼容模式下' );\r\n             * }\r\n             * ```\r\n             */\n            browser.ie8Compat = document.documentMode == 8;\n\n            /**\r\n             * @property { boolean } ie7Compat 检测浏览器模式是否为 IE7 兼容模式\r\n             * @warning 如果浏览器不是IE， 则该值为undefined\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.ie7Compat ) {\r\n             *     console.log( '当前浏览器运行在IE7兼容模式下' );\r\n             * }\r\n             * ```\r\n             */\n            browser.ie7Compat = version == 7 && !document.documentMode || document.documentMode == 7;\n\n            /**\r\n             * @property { boolean } ie6Compat 检测浏览器模式是否为 IE6 模式 或者怪异模式\r\n             * @warning 如果浏览器不是IE， 则该值为undefined\r\n             * @example\r\n             * ```javascript\r\n             * if ( UE.browser.ie6Compat ) {\r\n             *     console.log( '当前浏览器运行在IE6模式或者怪异模式下' );\r\n             * }\r\n             * ```\r\n             */\n            browser.ie6Compat = version < 7 || browser.quirks;\n\n            browser.ie9above = version > 8;\n\n            browser.ie9below = version < 9;\n        }\n\n        // Gecko.\n        if (browser.gecko) {\n            var geckoRelease = agent.match(/rv:([\\d\\.]+)/);\n            if (geckoRelease) {\n                geckoRelease = geckoRelease[1].split('.');\n                version = geckoRelease[0] * 10000 + (geckoRelease[1] || 0) * 100 + (geckoRelease[2] || 0) * 1;\n            }\n        }\n\n        /**\r\n         * @property { Number } chrome 检测当前浏览器是否为Chrome, 如果是，则返回Chrome的大版本号\r\n         * @warning 如果浏览器不是chrome， 则该值为undefined\r\n         * @example\r\n         * ```javascript\r\n         * if ( UE.browser.chrome ) {\r\n         *     console.log( '当前浏览器是Chrome' );\r\n         * }\r\n         * ```\r\n         */\n        if (/chrome\\/(\\d+\\.\\d)/i.test(agent)) {\n            browser.chrome = +RegExp['\\x241'];\n        }\n\n        /**\r\n         * @property { Number } safari 检测当前浏览器是否为Safari, 如果是，则返回Safari的大版本号\r\n         * @warning 如果浏览器不是safari， 则该值为undefined\r\n         * @example\r\n         * ```javascript\r\n         * if ( UE.browser.safari ) {\r\n         *     console.log( '当前浏览器是Safari' );\r\n         * }\r\n         * ```\r\n         */\n        if (/(\\d+\\.\\d)?(?:\\.\\d)?\\s+safari\\/?(\\d+\\.\\d+)?/i.test(agent) && !/chrome/i.test(agent)) {\n            browser.safari = +(RegExp['\\x241'] || RegExp['\\x242']);\n        }\n\n        // Opera 9.50+\n        if (browser.opera) version = parseFloat(opera.version());\n\n        // WebKit 522+ (Safari 3+)\n        if (browser.webkit) version = parseFloat(agent.match(/ applewebkit\\/(\\d+)/)[1]);\n\n        /**\r\n         * @property { Number } version 检测当前浏览器版本号\r\n         * @remind\r\n         * <ul>\r\n         *     <li>IE系列返回值为5,6,7,8,9,10等</li>\r\n         *     <li>gecko系列会返回10900，158900等</li>\r\n         *     <li>webkit系列会返回其build号 (如 522等)</li>\r\n         * </ul>\r\n         * @example\r\n         * ```javascript\r\n         * console.log( '当前浏览器版本号是： ' + UE.browser.version );\r\n         * ```\r\n         */\n        browser.version = version;\n\n        /**\r\n         * @property { boolean } isCompatible 检测当前浏览器是否能够与UEditor良好兼容\r\n         * @example\r\n         * ```javascript\r\n         * if ( UE.browser.isCompatible ) {\r\n         *     console.log( '浏览器与UEditor能够良好兼容' );\r\n         * }\r\n         * ```\r\n         */\n        browser.isCompatible = !browser.mobile && (browser.ie && version >= 6 || browser.gecko && version >= 10801 || browser.opera && version >= 9.5 || browser.air && version >= 1 || browser.webkit && version >= 522 || false);\n        return browser;\n    }();\n    //快捷方式\n    var ie = browser.ie,\n        webkit = browser.webkit,\n        gecko = browser.gecko,\n        opera = browser.opera;\n    /**\r\n     * @file\r\n     * @name UM.Utils\r\n     * @short Utils\r\n     * @desc UEditor封装使用的静态工具函数\r\n     * @import editor.js\r\n     */\n    var utils = UM.utils = {\n        /**\r\n         * 遍历数组，对象，nodeList\r\n         * @name each\r\n         * @grammar UM.utils.each(obj,iterator,[context])\r\n         * @since 1.2.4+\r\n         * @desc\r\n         * * obj 要遍历的对象\r\n         * * iterator 遍历的方法,方法的第一个是遍历的值，第二个是索引，第三个是obj\r\n         * * context  iterator的上下文\r\n         * @example\r\n         * UM.utils.each([1,2],function(v,i){\r\n         *     console.log(v)//值\r\n         *     console.log(i)//索引\r\n         * })\r\n         * UM.utils.each(document.getElementsByTagName('*'),function(n){\r\n         *     console.log(n.tagName)\r\n         * })\r\n         */\n        each: function each(obj, iterator, context) {\n            if (obj == null) return;\n            if (obj.length === +obj.length) {\n                for (var i = 0, l = obj.length; i < l; i++) {\n                    if (iterator.call(context, obj[i], i, obj) === false) return false;\n                }\n            } else {\n                for (var key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        if (iterator.call(context, obj[key], key, obj) === false) return false;\n                    }\n                }\n            }\n        },\n\n        makeInstance: function makeInstance(obj) {\n            var noop = new Function();\n            noop.prototype = obj;\n            obj = new noop();\n            noop.prototype = null;\n            return obj;\n        },\n        /**\r\n         * 将source对象中的属性扩展到target对象上\r\n         * @name extend\r\n         * @grammar UM.utils.extend(target,source)  => Object  //覆盖扩展\r\n         * @grammar UM.utils.extend(target,source,true)  ==> Object  //保留扩展\r\n         */\n        extend: function extend(t, s, b) {\n            if (s) {\n                for (var k in s) {\n                    if (!b || !t.hasOwnProperty(k)) {\n                        t[k] = s[k];\n                    }\n                }\n            }\n            return t;\n        },\n        extend2: function extend2(t) {\n            var a = arguments;\n            for (var i = 1; i < a.length; i++) {\n                var x = a[i];\n                for (var k in x) {\n                    if (!t.hasOwnProperty(k)) {\n                        t[k] = x[k];\n                    }\n                }\n            }\n            return t;\n        },\n        /**\r\n         * 模拟继承机制，subClass继承superClass\r\n         * @name inherits\r\n         * @grammar UM.utils.inherits(subClass,superClass) => subClass\r\n         * @example\r\n         * function SuperClass(){\r\n         *     this.name = \"小李\";\r\n         * }\r\n         * SuperClass.prototype = {\r\n         *     hello:function(str){\r\n         *         console.log(this.name + str);\r\n         *     }\r\n         * }\r\n         * function SubClass(){\r\n         *     this.name = \"小张\";\r\n         * }\r\n         * UM.utils.inherits(SubClass,SuperClass);\r\n         * var sub = new SubClass();\r\n         * sub.hello(\"早上好!\"); ==> \"小张早上好！\"\r\n         */\n        inherits: function inherits(subClass, superClass) {\n            var oldP = subClass.prototype,\n                newP = utils.makeInstance(superClass.prototype);\n            utils.extend(newP, oldP, true);\n            subClass.prototype = newP;\n            return newP.constructor = subClass;\n        },\n\n        /**\r\n         * 用指定的context作为fn上下文，也就是this\r\n         * @name bind\r\n         * @grammar UM.utils.bind(fn,context)  =>  fn\r\n         */\n        bind: function bind(fn, context) {\n            return function () {\n                return fn.apply(context, arguments);\n            };\n        },\n\n        /**\r\n         * 创建延迟delay执行的函数fn\r\n         * @name defer\r\n         * @grammar UM.utils.defer(fn,delay)  =>fn   //延迟delay毫秒执行fn，返回fn\r\n         * @grammar UM.utils.defer(fn,delay,exclusion)  =>fn   //延迟delay毫秒执行fn，若exclusion为真，则互斥执行fn\r\n         * @example\r\n         * function test(){\r\n         *     console.log(\"延迟输出！\");\r\n         * }\r\n         * //非互斥延迟执行\r\n         * var testDefer = UM.utils.defer(test,1000);\r\n         * testDefer();   =>  \"延迟输出！\";\r\n         * testDefer();   =>  \"延迟输出！\";\r\n         * //互斥延迟执行\r\n         * var testDefer1 = UM.utils.defer(test,1000,true);\r\n         * testDefer1();   =>  //本次不执行\r\n         * testDefer1();   =>  \"延迟输出！\";\r\n         */\n        defer: function defer(fn, delay, exclusion) {\n            var timerID;\n            return function () {\n                if (exclusion) {\n                    clearTimeout(timerID);\n                }\n                timerID = setTimeout(fn, delay);\n            };\n        },\n\n        /**\r\n         * 查找元素item在数组array中的索引, 若找不到返回-1\r\n         * @name indexOf\r\n         * @grammar UM.utils.indexOf(array,item)  => index|-1  //默认从数组开头部开始搜索\r\n         * @grammar UM.utils.indexOf(array,item,start)  => index|-1  //start指定开始查找的位置\r\n         */\n        indexOf: function indexOf(array, item, start) {\n            var index = -1;\n            start = this.isNumber(start) ? start : 0;\n            this.each(array, function (v, i) {\n                if (i >= start && v === item) {\n                    index = i;\n                    return false;\n                }\n            });\n            return index;\n        },\n\n        /**\r\n         * 移除数组array中的元素item\r\n         * @name removeItem\r\n         * @grammar UM.utils.removeItem(array,item)\r\n         */\n        removeItem: function removeItem(array, item) {\n            for (var i = 0, l = array.length; i < l; i++) {\n                if (array[i] === item) {\n                    array.splice(i, 1);\n                    i--;\n                }\n            }\n        },\n\n        /**\r\n         * 删除字符串str的首尾空格\r\n         * @name trim\r\n         * @grammar UM.utils.trim(str) => String\r\n         */\n        trim: function trim(str) {\n            return str.replace(/(^[ \\t\\n\\r]+)|([ \\t\\n\\r]+$)/g, '');\n        },\n\n        /**\r\n         * 将字符串list(以','分隔)或者数组list转成哈希对象\r\n         * @name listToMap\r\n         * @grammar UM.utils.listToMap(list)  => Object  //Object形如{test:1,br:1,textarea:1}\r\n         */\n        listToMap: function listToMap(list) {\n            if (!list) return {};\n            list = utils.isArray(list) ? list : list.split(',');\n            for (var i = 0, ci, obj = {}; ci = list[i++];) {\n                obj[ci.toUpperCase()] = obj[ci] = 1;\n            }\n            return obj;\n        },\n\n        /**\r\n         * 将str中的html符号转义,默认将转义''&<\">''四个字符，可自定义reg来确定需要转义的字符\r\n         * @name unhtml\r\n         * @grammar UM.utils.unhtml(str);  => String\r\n         * @grammar UM.utils.unhtml(str,reg)  => String\r\n         * @example\r\n         * var html = '<body>You say:\"你好！Baidu & UEditor!\"</body>';\r\n         * UM.utils.unhtml(html);   ==>  &lt;body&gt;You say:&quot;你好！Baidu &amp; UEditor!&quot;&lt;/body&gt;\r\n         * UM.utils.unhtml(html,/[<>]/g)  ==>  &lt;body&gt;You say:\"你好！Baidu & UEditor!\"&lt;/body&gt;\r\n         */\n        unhtml: function unhtml(str, reg) {\n            return str ? str.replace(reg || /[&<\">'](?:(amp|lt|quot|gt|#39|nbsp);)?/g, function (a, b) {\n                if (b) {\n                    return a;\n                } else {\n                    return {\n                        '<': '&lt;',\n                        '&': '&amp;',\n                        '\"': '&quot;',\n                        '>': '&gt;',\n                        \"'\": '&#39;'\n                    }[a];\n                }\n            }) : '';\n        },\n        /**\r\n         * 将str中的转义字符还原成html字符\r\n         * @name html\r\n         * @grammar UM.utils.html(str)  => String   //详细参见<code><a href = '#unhtml'>unhtml</a></code>\r\n         */\n        html: function html(str) {\n            return str ? str.replace(/&((g|l|quo)t|amp|#39);/g, function (m) {\n                return {\n                    '&lt;': '<',\n                    '&amp;': '&',\n                    '&quot;': '\"',\n                    '&gt;': '>',\n                    '&#39;': \"'\"\n                }[m];\n            }) : '';\n        },\n        /**\r\n         * 将css样式转换为驼峰的形式。如font-size => fontSize\r\n         * @name cssStyleToDomStyle\r\n         * @grammar UM.utils.cssStyleToDomStyle(cssName)  => String\r\n         */\n        cssStyleToDomStyle: function () {\n            var test = document.createElement('div').style,\n                cache = {\n                'float': test.cssFloat != undefined ? 'cssFloat' : test.styleFloat != undefined ? 'styleFloat' : 'float'\n            };\n\n            return function (cssName) {\n                return cache[cssName] || (cache[cssName] = cssName.toLowerCase().replace(/-./g, function (match) {\n                    return match.charAt(1).toUpperCase();\n                }));\n            };\n        }(),\n        /**\r\n         * 动态加载文件到doc中，并依据obj来设置属性，加载成功后执行回调函数fn\r\n         * @name loadFile\r\n         * @grammar UM.utils.loadFile(doc,obj)\r\n         * @grammar UM.utils.loadFile(doc,obj,fn)\r\n         * @example\r\n         * //指定加载到当前document中一个script文件，加载成功后执行function\r\n         * utils.loadFile( document, {\r\n         *     src:\"test.js\",\r\n         *     tag:\"script\",\r\n         *     type:\"text/javascript\",\r\n         *     defer:\"defer\"\r\n         * }, function () {\r\n         *     console.log('加载成功！')\r\n         * });\r\n         */\n        loadFile: function () {\n            var tmpList = [];\n\n            function getItem(doc, obj) {\n                try {\n                    for (var i = 0, ci; ci = tmpList[i++];) {\n                        if (ci.doc === doc && ci.url == (obj.src || obj.href)) {\n                            return ci;\n                        }\n                    }\n                } catch (e) {\n                    return null;\n                }\n            }\n\n            return function (doc, obj, fn) {\n                var item = getItem(doc, obj);\n                if (item) {\n                    if (item.ready) {\n                        fn && fn();\n                    } else {\n                        item.funs.push(fn);\n                    }\n                    return;\n                }\n                tmpList.push({\n                    doc: doc,\n                    url: obj.src || obj.href,\n                    funs: [fn]\n                });\n                if (!doc.body) {\n                    var html = [];\n                    for (var p in obj) {\n                        if (p == 'tag') continue;\n                        html.push(p + '=\"' + obj[p] + '\"');\n                    }\n                    doc.write('<' + obj.tag + ' ' + html.join(' ') + ' ></' + obj.tag + '>');\n                    return;\n                }\n                if (obj.id && doc.getElementById(obj.id)) {\n                    return;\n                }\n                var element = doc.createElement(obj.tag);\n                delete obj.tag;\n                for (var p in obj) {\n                    element.setAttribute(p, obj[p]);\n                }\n                element.onload = element.onreadystatechange = function () {\n                    if (!this.readyState || /loaded|complete/.test(this.readyState)) {\n                        item = getItem(doc, obj);\n                        if (item.funs.length > 0) {\n                            item.ready = 1;\n                            for (var fi; fi = item.funs.pop();) {\n                                fi();\n                            }\n                        }\n                        element.onload = element.onreadystatechange = null;\n                    }\n                };\n                element.onerror = function () {\n                    throw Error('The load ' + (obj.href || obj.src) + ' fails,check the url settings of file umeditor.config.js ');\n                };\n                doc.getElementsByTagName(\"head\")[0].appendChild(element);\n            };\n        }(),\n        /**\r\n         * 判断obj对象是否为空\r\n         * @name isEmptyObject\r\n         * @grammar UM.utils.isEmptyObject(obj)  => true|false\r\n         * @example\r\n         * UM.utils.isEmptyObject({}) ==>true\r\n         * UM.utils.isEmptyObject([]) ==>true\r\n         * UM.utils.isEmptyObject(\"\") ==>true\r\n         */\n        isEmptyObject: function isEmptyObject(obj) {\n            if (obj == null) return true;\n            if (this.isArray(obj) || this.isString(obj)) return obj.length === 0;\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) return false;\n            }return true;\n        },\n\n        /**\r\n         * 统一将颜色值使用16进制形式表示\r\n         * @name fixColor\r\n         * @grammar UM.utils.fixColor(name,value) => value\r\n         * @example\r\n         * rgb(255,255,255)  => \"#ffffff\"\r\n         */\n        fixColor: function fixColor(name, value) {\n            if (/color/i.test(name) && /rgba?/.test(value)) {\n                var array = value.split(\",\");\n                if (array.length > 3) return \"\";\n                value = \"#\";\n                for (var i = 0, color; color = array[i++];) {\n                    color = parseInt(color.replace(/[^\\d]/gi, ''), 10).toString(16);\n                    value += color.length == 1 ? \"0\" + color : color;\n                }\n                value = value.toUpperCase();\n            }\n            return value;\n        },\n\n        /**\r\n         * 深度克隆对象，从source到target\r\n         * @name clone\r\n         * @grammar UM.utils.clone(source) => anthorObj 新的对象是完整的source的副本\r\n         * @grammar UM.utils.clone(source,target) => target包含了source的所有内容，重名会覆盖\r\n         */\n        clone: function clone(source, target) {\n            var tmp;\n            target = target || {};\n            for (var i in source) {\n                if (source.hasOwnProperty(i)) {\n                    tmp = source[i];\n                    if ((typeof tmp === 'undefined' ? 'undefined' : _typeof(tmp)) == 'object') {\n                        target[i] = utils.isArray(tmp) ? [] : {};\n                        utils.clone(source[i], target[i]);\n                    } else {\n                        target[i] = tmp;\n                    }\n                }\n            }\n            return target;\n        },\n        /**\r\n         * 转换cm/pt到px\r\n         * @name transUnitToPx\r\n         * @grammar UM.utils.transUnitToPx('20pt') => '27px'\r\n         * @grammar UM.utils.transUnitToPx('0pt') => '0'\r\n         */\n        transUnitToPx: function transUnitToPx(val) {\n            if (!/(pt|cm)/.test(val)) {\n                return val;\n            }\n            var unit;\n            val.replace(/([\\d.]+)(\\w+)/, function (str, v, u) {\n                val = v;\n                unit = u;\n            });\n            switch (unit) {\n                case 'cm':\n                    val = parseFloat(val) * 25;\n                    break;\n                case 'pt':\n                    val = Math.round(parseFloat(val) * 96 / 72);\n            }\n            return val + (val ? 'px' : '');\n        },\n        /**\r\n         * 动态添加css样式\r\n         * @name cssRule\r\n         * @grammar UM.utils.cssRule('添加的样式的节点名称',['样式'，'放到哪个document上'])\r\n         * @grammar UM.utils.cssRule('body','body{background:#ccc}') => null  //给body添加背景颜色\r\n         * @grammar UM.utils.cssRule('body') =>样式的字符串  //取得key值为body的样式的内容,如果没有找到key值先关的样式将返回空，例如刚才那个背景颜色，将返回 body{background:#ccc}\r\n         * @grammar UM.utils.cssRule('body','') =>null //清空给定的key值的背景颜色\r\n         */\n        cssRule: browser.ie && browser.version != 11 ? function (key, style, doc) {\n            var indexList, index;\n            doc = doc || document;\n            if (doc.indexList) {\n                indexList = doc.indexList;\n            } else {\n                indexList = doc.indexList = {};\n            }\n            var sheetStyle;\n            if (!indexList[key]) {\n                if (style === undefined) {\n                    return '';\n                }\n                sheetStyle = doc.createStyleSheet('', index = doc.styleSheets.length);\n                indexList[key] = index;\n            } else {\n                sheetStyle = doc.styleSheets[indexList[key]];\n            }\n            if (style === undefined) {\n                return sheetStyle.cssText;\n            }\n            sheetStyle.cssText = style || '';\n        } : function (key, style, doc) {\n            doc = doc || document;\n            var head = doc.getElementsByTagName('head')[0],\n                node;\n            if (!(node = doc.getElementById(key))) {\n                if (style === undefined) {\n                    return '';\n                }\n                node = doc.createElement('style');\n                node.id = key;\n                head.appendChild(node);\n            }\n            if (style === undefined) {\n                return node.innerHTML;\n            }\n            if (style !== '') {\n                node.innerHTML = style;\n            } else {\n                head.removeChild(node);\n            }\n        }\n\n    };\n    /**\r\n     * 判断str是否为字符串\r\n     * @name isString\r\n     * @grammar UM.utils.isString(str) => true|false\r\n     */\n    /**\r\n     * 判断array是否为数组\r\n     * @name isArray\r\n     * @grammar UM.utils.isArray(obj) => true|false\r\n     */\n    /**\r\n     * 判断obj对象是否为方法\r\n     * @name isFunction\r\n     * @grammar UM.utils.isFunction(obj)  => true|false\r\n     */\n    /**\r\n     * 判断obj对象是否为数字\r\n     * @name isNumber\r\n     * @grammar UM.utils.isNumber(obj)  => true|false\r\n     */\n    utils.each(['String', 'Function', 'Array', 'Number', 'RegExp', 'Object'], function (v) {\n        UM.utils['is' + v] = function (obj) {\n            return Object.prototype.toString.apply(obj) == '[object ' + v + ']';\n        };\n    });\n    /**\r\n     * @file\r\n     * @name UM.EventBase\r\n     * @short EventBase\r\n     * @import editor.js,core/utils.js\r\n     * @desc UE采用的事件基类，继承此类的对应类将获取addListener,removeListener,fireEvent方法。\r\n     * 在UE中，Editor以及所有ui实例都继承了该类，故可以在对应的ui对象以及editor对象上使用上述方法。\r\n     */\n    var EventBase = UM.EventBase = function () {};\n\n    EventBase.prototype = {\n        /**\r\n         * 注册事件监听器\r\n         * @name addListener\r\n         * @grammar editor.addListener(types,fn)  //types为事件名称，多个可用空格分隔\r\n         * @example\r\n         * editor.addListener('selectionchange',function(){\r\n         *      console.log(\"选区已经变化！\");\r\n         * })\r\n         * editor.addListener('beforegetcontent aftergetcontent',function(type){\r\n         *         if(type == 'beforegetcontent'){\r\n         *             //do something\r\n         *         }else{\r\n         *             //do something\r\n         *         }\r\n         *         console.log(this.getContent) // this是注册的事件的编辑器实例\r\n         * })\r\n         */\n        addListener: function addListener(types, listener) {\n            types = utils.trim(types).split(' ');\n            for (var i = 0, ti; ti = types[i++];) {\n                getListener(this, ti, true).push(listener);\n            }\n        },\n        /**\r\n         * 移除事件监听器\r\n         * @name removeListener\r\n         * @grammar editor.removeListener(types,fn)  //types为事件名称，多个可用空格分隔\r\n         * @example\r\n         * //changeCallback为方法体\r\n         * editor.removeListener(\"selectionchange\",changeCallback);\r\n         */\n        removeListener: function removeListener(types, listener) {\n            types = utils.trim(types).split(' ');\n            for (var i = 0, ti; ti = types[i++];) {\n                utils.removeItem(getListener(this, ti) || [], listener);\n            }\n        },\n        /**\r\n         * 触发事件\r\n         * @name fireEvent\r\n         * @grammar editor.fireEvent(types)  //types为事件名称，多个可用空格分隔\r\n         * @example\r\n         * editor.fireEvent(\"selectionchange\");\r\n         */\n        fireEvent: function fireEvent() {\n            var types = arguments[0];\n            types = utils.trim(types).split(' ');\n            for (var i = 0, ti; ti = types[i++];) {\n                var listeners = getListener(this, ti),\n                    r,\n                    t,\n                    k;\n                if (listeners) {\n                    k = listeners.length;\n                    while (k--) {\n                        if (!listeners[k]) continue;\n                        t = listeners[k].apply(this, arguments);\n                        if (t === true) {\n                            return t;\n                        }\n                        if (t !== undefined) {\n                            r = t;\n                        }\n                    }\n                }\n                if (t = this['on' + ti.toLowerCase()]) {\n                    r = t.apply(this, arguments);\n                }\n            }\n            return r;\n        }\n    };\n    /**\r\n     * 获得对象所拥有监听类型的所有监听器\r\n     * @public\r\n     * @function\r\n     * @param {Object} obj  查询监听器的对象\r\n     * @param {String} type 事件类型\r\n     * @param {Boolean} force  为true且当前所有type类型的侦听器不存在时，创建一个空监听器数组\r\n     * @returns {Array} 监听器数组\r\n     */\n    function getListener(obj, type, force) {\n        var allListeners;\n        type = type.toLowerCase();\n        return (allListeners = obj.__allListeners || force && (obj.__allListeners = {})) && (allListeners[type] || force && (allListeners[type] = []));\n    }\n\n    ///import editor.js\n    ///import core/dom/dom.js\n    ///import core/utils.js\n    /**\r\n     * dtd html语义化的体现类\r\n     * @constructor\r\n     * @namespace dtd\r\n     */\n    var dtd = dom.dtd = function () {\n        function _(s) {\n            for (var k in s) {\n                s[k.toUpperCase()] = s[k];\n            }\n            return s;\n        }\n        var X = utils.extend2;\n        var A = _({ isindex: 1, fieldset: 1 }),\n            B = _({ input: 1, button: 1, select: 1, textarea: 1, label: 1 }),\n            C = X(_({ a: 1 }), B),\n            D = X({ iframe: 1 }, C),\n            E = _({ hr: 1, ul: 1, menu: 1, div: 1, blockquote: 1, noscript: 1, table: 1, center: 1, address: 1, dir: 1, pre: 1, h5: 1, dl: 1, h4: 1, noframes: 1, h6: 1, ol: 1, h1: 1, h3: 1, h2: 1 }),\n            F = _({ ins: 1, del: 1, script: 1, style: 1 }),\n            G = X(_({ b: 1, acronym: 1, bdo: 1, 'var': 1, '#': 1, abbr: 1, code: 1, br: 1, i: 1, cite: 1, kbd: 1, u: 1, strike: 1, s: 1, tt: 1, strong: 1, q: 1, samp: 1, em: 1, dfn: 1, span: 1 }), F),\n            H = X(_({ sub: 1, img: 1, embed: 1, object: 1, sup: 1, basefont: 1, map: 1, applet: 1, font: 1, big: 1, small: 1 }), G),\n            I = X(_({ p: 1 }), H),\n            J = X(_({ iframe: 1 }), H, B),\n            K = _({ img: 1, embed: 1, noscript: 1, br: 1, kbd: 1, center: 1, button: 1, basefont: 1, h5: 1, h4: 1, samp: 1, h6: 1, ol: 1, h1: 1, h3: 1, h2: 1, form: 1, font: 1, '#': 1, select: 1, menu: 1, ins: 1, abbr: 1, label: 1, code: 1, table: 1, script: 1, cite: 1, input: 1, iframe: 1, strong: 1, textarea: 1, noframes: 1, big: 1, small: 1, span: 1, hr: 1, sub: 1, bdo: 1, 'var': 1, div: 1, object: 1, sup: 1, strike: 1, dir: 1, map: 1, dl: 1, applet: 1, del: 1, isindex: 1, fieldset: 1, ul: 1, b: 1, acronym: 1, a: 1, blockquote: 1, i: 1, u: 1, s: 1, tt: 1, address: 1, q: 1, pre: 1, p: 1, em: 1, dfn: 1 }),\n            L = X(_({ a: 0 }), J),\n            //a不能被切开，所以把他\n        M = _({ tr: 1 }),\n            N = _({ '#': 1 }),\n            O = X(_({ param: 1 }), K),\n            P = X(_({ form: 1 }), A, D, E, I),\n            Q = _({ li: 1, ol: 1, ul: 1 }),\n            R = _({ style: 1, script: 1 }),\n            S = _({ base: 1, link: 1, meta: 1, title: 1 }),\n            T = X(S, R),\n            U = _({ head: 1, body: 1 }),\n            V = _({ html: 1 });\n\n        var block = _({ address: 1, blockquote: 1, center: 1, dir: 1, div: 1, dl: 1, fieldset: 1, form: 1, h1: 1, h2: 1, h3: 1, h4: 1, h5: 1, h6: 1, hr: 1, isindex: 1, menu: 1, noframes: 1, ol: 1, p: 1, pre: 1, table: 1, ul: 1 }),\n            empty = _({ area: 1, base: 1, basefont: 1, br: 1, col: 1, command: 1, dialog: 1, embed: 1, hr: 1, img: 1, input: 1, isindex: 1, keygen: 1, link: 1, meta: 1, param: 1, source: 1, track: 1, wbr: 1 });\n\n        return _({\n\n            // $ 表示自定的属性\n\n            // body外的元素列表.\n            $nonBodyContent: X(V, U, S),\n\n            //块结构元素列表\n            $block: block,\n\n            //内联元素列表\n            $inline: L,\n\n            $inlineWithA: X(_({ a: 1 }), L),\n\n            $body: X(_({ script: 1, style: 1 }), block),\n\n            $cdata: _({ script: 1, style: 1 }),\n\n            //自闭和元素\n            $empty: empty,\n\n            //不是自闭合，但不能让range选中里边\n            $nonChild: _({ iframe: 1, textarea: 1 }),\n            //列表元素列表\n            $listItem: _({ dd: 1, dt: 1, li: 1 }),\n\n            //列表根元素列表\n            $list: _({ ul: 1, ol: 1, dl: 1 }),\n\n            //不能认为是空的元素\n            $isNotEmpty: _({ table: 1, ul: 1, ol: 1, dl: 1, iframe: 1, area: 1, base: 1, col: 1, hr: 1, img: 1, embed: 1, input: 1, link: 1, meta: 1, param: 1, h1: 1, h2: 1, h3: 1, h4: 1, h5: 1, h6: 1 }),\n\n            //如果没有子节点就可以删除的元素列表，像span,a\n            $removeEmpty: _({ a: 1, abbr: 1, acronym: 1, address: 1, b: 1, bdo: 1, big: 1, cite: 1, code: 1, del: 1, dfn: 1, em: 1, font: 1, i: 1, ins: 1, label: 1, kbd: 1, q: 1, s: 1, samp: 1, small: 1, span: 1, strike: 1, strong: 1, sub: 1, sup: 1, tt: 1, u: 1, 'var': 1 }),\n\n            $removeEmptyBlock: _({ 'p': 1, 'div': 1 }),\n\n            //在table元素里的元素列表\n            $tableContent: _({ caption: 1, col: 1, colgroup: 1, tbody: 1, td: 1, tfoot: 1, th: 1, thead: 1, tr: 1, table: 1 }),\n            //不转换的标签\n            $notTransContent: _({ pre: 1, script: 1, style: 1, textarea: 1 }),\n            html: U,\n            head: T,\n            style: N,\n            script: N,\n            body: P,\n            base: {},\n            link: {},\n            meta: {},\n            title: N,\n            col: {},\n            tr: _({ td: 1, th: 1 }),\n            img: {},\n            embed: {},\n            colgroup: _({ thead: 1, col: 1, tbody: 1, tr: 1, tfoot: 1 }),\n            noscript: P,\n            td: P,\n            br: {},\n            th: P,\n            center: P,\n            kbd: L,\n            button: X(I, E),\n            basefont: {},\n            h5: L,\n            h4: L,\n            samp: L,\n            h6: L,\n            ol: Q,\n            h1: L,\n            h3: L,\n            option: N,\n            h2: L,\n            form: X(A, D, E, I),\n            select: _({ optgroup: 1, option: 1 }),\n            font: L,\n            ins: L,\n            menu: Q,\n            abbr: L,\n            label: L,\n            table: _({ thead: 1, col: 1, tbody: 1, tr: 1, colgroup: 1, caption: 1, tfoot: 1 }),\n            code: L,\n            tfoot: M,\n            cite: L,\n            li: P,\n            input: {},\n            iframe: P,\n            strong: L,\n            textarea: N,\n            noframes: P,\n            big: L,\n            small: L,\n            //trace:\n            span: _({ '#': 1, br: 1, b: 1, strong: 1, u: 1, i: 1, em: 1, sub: 1, sup: 1, strike: 1, span: 1 }),\n            hr: L,\n            dt: L,\n            sub: L,\n            optgroup: _({ option: 1 }),\n            param: {},\n            bdo: L,\n            'var': L,\n            div: P,\n            object: O,\n            sup: L,\n            dd: P,\n            strike: L,\n            area: {},\n            dir: Q,\n            map: X(_({ area: 1, form: 1, p: 1 }), A, F, E),\n            applet: O,\n            dl: _({ dt: 1, dd: 1 }),\n            del: L,\n            isindex: {},\n            fieldset: X(_({ legend: 1 }), K),\n            thead: M,\n            ul: Q,\n            acronym: L,\n            b: L,\n            a: X(_({ a: 1 }), J),\n            blockquote: X(_({ td: 1, tr: 1, tbody: 1, li: 1 }), P),\n            caption: L,\n            i: L,\n            u: L,\n            tbody: M,\n            s: L,\n            address: X(D, I),\n            tt: L,\n            legend: L,\n            q: L,\n            pre: X(G, C),\n            p: X(_({ 'a': 1 }), L),\n            em: L,\n            dfn: L\n        });\n    }();\n\n    /**\r\n     * @file\r\n     * @name UM.dom.domUtils\r\n     * @short DomUtils\r\n     * @import editor.js, core/utils.js,core/browser.js,core/dom/dtd.js\r\n     * @desc UEditor封装的底层dom操作库\r\n     */\n\n    function getDomNode(node, start, ltr, startFromChild, fn, guard) {\n        var tmpNode = startFromChild && node[start],\n            parent;\n        !tmpNode && (tmpNode = node[ltr]);\n        while (!tmpNode && (parent = (parent || node).parentNode)) {\n            if (parent.tagName == 'BODY' || guard && !guard(parent)) {\n                return null;\n            }\n            tmpNode = parent[ltr];\n        }\n        if (tmpNode && fn && !fn(tmpNode)) {\n            return getDomNode(tmpNode, start, ltr, false, fn);\n        }\n        return tmpNode;\n    }\n    var attrFix = ie && browser.version < 9 ? {\n        tabindex: \"tabIndex\",\n        readonly: \"readOnly\",\n        \"for\": \"htmlFor\",\n        \"class\": \"className\",\n        maxlength: \"maxLength\",\n        cellspacing: \"cellSpacing\",\n        cellpadding: \"cellPadding\",\n        rowspan: \"rowSpan\",\n        colspan: \"colSpan\",\n        usemap: \"useMap\",\n        frameborder: \"frameBorder\"\n    } : {\n        tabindex: \"tabIndex\",\n        readonly: \"readOnly\"\n    },\n        styleBlock = utils.listToMap(['-webkit-box', '-moz-box', 'block', 'list-item', 'table', 'table-row-group', 'table-header-group', 'table-footer-group', 'table-row', 'table-column-group', 'table-column', 'table-cell', 'table-caption']);\n    var domUtils = dom.domUtils = (_dom$domUtils = {\n        //节点常量\n        NODE_ELEMENT: 1,\n        NODE_DOCUMENT: 9,\n        NODE_TEXT: 3,\n        NODE_COMMENT: 8,\n        NODE_DOCUMENT_FRAGMENT: 11,\n\n        //位置关系\n        POSITION_IDENTICAL: 0,\n        POSITION_DISCONNECTED: 1,\n        POSITION_FOLLOWING: 2,\n        POSITION_PRECEDING: 4,\n        POSITION_IS_CONTAINED: 8,\n        POSITION_CONTAINS: 16,\n        //ie6使用其他的会有一段空白出现\n        fillChar: ie && browser.version == '6' ? '\\uFEFF' : '\\u200B',\n        //-------------------------Node部分--------------------------------\n        keys: {\n            /*Backspace*/8: 1, /*Delete*/46: 1,\n            /*Shift*/16: 1, /*Ctrl*/17: 1, /*Alt*/18: 1,\n            37: 1, 38: 1, 39: 1, 40: 1,\n            13: 1 /*enter*/\n        },\n        breakParent: function breakParent(node, parent) {\n            var tmpNode,\n                parentClone = node,\n                clone = node,\n                leftNodes,\n                rightNodes;\n            do {\n                parentClone = parentClone.parentNode;\n                if (leftNodes) {\n                    tmpNode = parentClone.cloneNode(false);\n                    tmpNode.appendChild(leftNodes);\n                    leftNodes = tmpNode;\n                    tmpNode = parentClone.cloneNode(false);\n                    tmpNode.appendChild(rightNodes);\n                    rightNodes = tmpNode;\n                } else {\n                    leftNodes = parentClone.cloneNode(false);\n                    rightNodes = leftNodes.cloneNode(false);\n                }\n                while (tmpNode = clone.previousSibling) {\n                    leftNodes.insertBefore(tmpNode, leftNodes.firstChild);\n                }\n                while (tmpNode = clone.nextSibling) {\n                    rightNodes.appendChild(tmpNode);\n                }\n                clone = parentClone;\n            } while (parent !== parentClone);\n            tmpNode = parent.parentNode;\n            tmpNode.insertBefore(leftNodes, parent);\n            tmpNode.insertBefore(rightNodes, parent);\n            tmpNode.insertBefore(node, rightNodes);\n            domUtils.remove(parent);\n            return node;\n        },\n        trimWhiteTextNode: function trimWhiteTextNode(node) {\n            function remove(dir) {\n                var child;\n                while ((child = node[dir]) && child.nodeType == 3 && domUtils.isWhitespace(child)) {\n                    node.removeChild(child);\n                }\n            }\n            remove('firstChild');\n            remove('lastChild');\n        },\n        /**\r\n         * 获取节点A相对于节点B的位置关系\r\n         * @name getPosition\r\n         * @grammar UM.dom.domUtils.getPosition(nodeA,nodeB)  =>  Number\r\n         * @example\r\n         *  switch (returnValue) {\r\n         *      case 0: //相等，同一节点\r\n         *      case 1: //无关，节点不相连\r\n         *      case 2: //跟随，即节点A头部位于节点B头部的后面\r\n         *      case 4: //前置，即节点A头部位于节点B头部的前面\r\n         *      case 8: //被包含，即节点A被节点B包含\r\n         *      case 10://组合类型，即节点A满足跟随节点B且被节点B包含。实际上，如果被包含，必定跟随，所以returnValue事实上不会存在8的情况。\r\n         *      case 16://包含，即节点A包含节点B\r\n         *      case 20://组合类型，即节点A满足前置节点A且包含节点B。同样，如果包含，必定前置，所以returnValue事实上也不会存在16的情况\r\n         *  }\r\n         */\n        getPosition: function getPosition(nodeA, nodeB) {\n            // 如果两个节点是同一个节点\n            if (nodeA === nodeB) {\n                // domUtils.POSITION_IDENTICAL\n                return 0;\n            }\n            var node,\n                parentsA = [nodeA],\n                parentsB = [nodeB];\n            node = nodeA;\n            while (node = node.parentNode) {\n                // 如果nodeB是nodeA的祖先节点\n                if (node === nodeB) {\n                    // domUtils.POSITION_IS_CONTAINED + domUtils.POSITION_FOLLOWING\n                    return 10;\n                }\n                parentsA.push(node);\n            }\n            node = nodeB;\n            while (node = node.parentNode) {\n                // 如果nodeA是nodeB的祖先节点\n                if (node === nodeA) {\n                    // domUtils.POSITION_CONTAINS + domUtils.POSITION_PRECEDING\n                    return 20;\n                }\n                parentsB.push(node);\n            }\n            parentsA.reverse();\n            parentsB.reverse();\n            if (parentsA[0] !== parentsB[0]) {\n                // domUtils.POSITION_DISCONNECTED\n                return 1;\n            }\n            var i = -1;\n            while (i++, parentsA[i] === parentsB[i]) {}\n            nodeA = parentsA[i];\n            nodeB = parentsB[i];\n            while (nodeA = nodeA.nextSibling) {\n                if (nodeA === nodeB) {\n                    // domUtils.POSITION_PRECEDING\n                    return 4;\n                }\n            }\n            // domUtils.POSITION_FOLLOWING\n            return 2;\n        },\n\n        /**\r\n         * 返回节点node在父节点中的索引位置\r\n         * @name getNodeIndex\r\n         * @grammar UM.dom.domUtils.getNodeIndex(node)  => Number  //索引值从0开始\r\n         */\n        getNodeIndex: function getNodeIndex(node, ignoreTextNode) {\n            var preNode = node,\n                i = 0;\n            while (preNode = preNode.previousSibling) {\n                if (ignoreTextNode && preNode.nodeType == 3) {\n                    if (preNode.nodeType != preNode.nextSibling.nodeType) {\n                        i++;\n                    }\n                    continue;\n                }\n                i++;\n            }\n            return i;\n        },\n\n        /**\r\n         * 检测节点node是否在节点doc的树上，实质上是检测是否被doc包含\r\n         * @name inDoc\r\n         * @grammar UM.dom.domUtils.inDoc(node,doc)   =>  true|false\r\n         */\n        inDoc: function inDoc(node, doc) {\n            return domUtils.getPosition(node, doc) == 10;\n        },\n        /**\r\n         * 查找node节点的祖先节点\r\n         * @name findParent\r\n         * @grammar UM.dom.domUtils.findParent(node)  => Element  // 直接返回node节点的父节点\r\n         * @grammar UM.dom.domUtils.findParent(node,filterFn)  => Element  //filterFn为过滤函数，node作为参数，返回true时才会将node作为符合要求的节点返回\r\n         * @grammar UM.dom.domUtils.findParent(node,filterFn,includeSelf)  => Element  //includeSelf指定是否包含自身\r\n         */\n        findParent: function findParent(node, filterFn, includeSelf) {\n            if (node && !domUtils.isBody(node)) {\n                node = includeSelf ? node : node.parentNode;\n                while (node) {\n                    if (!filterFn || filterFn(node) || domUtils.isBody(node)) {\n                        return filterFn && !filterFn(node) && domUtils.isBody(node) ? null : node;\n                    }\n                    node = node.parentNode;\n                }\n            }\n            return null;\n        },\n        /**\r\n         * 通过tagName查找node节点的祖先节点\r\n         * @name findParentByTagName\r\n         * @grammar UM.dom.domUtils.findParentByTagName(node,tagNames)   =>  Element  //tagNames支持数组，区分大小写\r\n         * @grammar UM.dom.domUtils.findParentByTagName(node,tagNames,includeSelf)   =>  Element  //includeSelf指定是否包含自身\r\n         * @grammar UM.dom.domUtils.findParentByTagName(node,tagNames,includeSelf,excludeFn)   =>  Element  //excludeFn指定例外过滤条件，返回true时忽略该节点\r\n         */\n        findParentByTagName: function findParentByTagName(node, tagNames, includeSelf, excludeFn) {\n            tagNames = utils.listToMap(utils.isArray(tagNames) ? tagNames : [tagNames]);\n            return domUtils.findParent(node, function (node) {\n                return tagNames[node.tagName] && !(excludeFn && excludeFn(node));\n            }, includeSelf);\n        },\n        /**\r\n         * 查找节点node的祖先节点集合\r\n         * @name findParents\r\n         * @grammar UM.dom.domUtils.findParents(node)  => Array  //返回一个祖先节点数组集合，不包含自身\r\n         * @grammar UM.dom.domUtils.findParents(node,includeSelf)  => Array  //返回一个祖先节点数组集合，includeSelf指定是否包含自身\r\n         * @grammar UM.dom.domUtils.findParents(node,includeSelf,filterFn)  => Array  //返回一个祖先节点数组集合，filterFn指定过滤条件，返回true的node将被选取\r\n         * @grammar UM.dom.domUtils.findParents(node,includeSelf,filterFn,closerFirst)  => Array  //返回一个祖先节点数组集合，closerFirst为true的话，node的直接父亲节点是数组的第0个\r\n         */\n        findParents: function findParents(node, includeSelf, filterFn, closerFirst) {\n            var parents = includeSelf && (filterFn && filterFn(node) || !filterFn) ? [node] : [];\n            while (node = domUtils.findParent(node, filterFn)) {\n                parents.push(node);\n            }\n            return closerFirst ? parents : parents.reverse();\n        },\n\n        /**\r\n         * 在节点node后面插入新节点newNode\r\n         * @name insertAfter\r\n         * @grammar UM.dom.domUtils.insertAfter(node,newNode)  => newNode\r\n         */\n        insertAfter: function insertAfter(node, newNode) {\n            return node.parentNode.insertBefore(newNode, node.nextSibling);\n        },\n\n        /**\r\n         * 删除节点node，并根据keepChildren指定是否保留子节点\r\n         * @name remove\r\n         * @grammar UM.dom.domUtils.remove(node)  =>  node\r\n         * @grammar UM.dom.domUtils.remove(node,keepChildren)  =>  node\r\n         */\n        remove: function remove(node, keepChildren) {\n\n            var parent = node.parentNode,\n                child;\n            if (parent) {\n                if (keepChildren && node.hasChildNodes()) {\n                    while (child = node.firstChild) {\n                        parent.insertBefore(child, node);\n                    }\n                }\n                parent.removeChild(node);\n            }\n            return node;\n        },\n\n        /**\r\n         * 取得node节点的下一个兄弟节点， 如果该节点其后没有兄弟节点， 则递归查找其父节点之后的第一个兄弟节点，\r\n         * 直到找到满足条件的节点或者递归到BODY节点之后才会结束。\r\n         * @method getNextDomNode\r\n         * @param { Node } node 需要获取其后的兄弟节点的节点对象\r\n         * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL\r\n         * @example\r\n         * ```html\r\n         *     <body>\r\n         *      <div id=\"test\">\r\n         *          <span></span>\r\n         *      </div>\r\n         *      <i>xxx</i>\r\n         * </body>\r\n         * <script>\r\n         *\r\n         *     //output: i节点\r\n         *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( \"test\" ) ) );\r\n         *\r\n         * </script>\r\n         * ```\r\n         * @example\r\n         * ```html\r\n         * <body>\r\n         *      <div>\r\n         *          <span></span>\r\n         *          <i id=\"test\">xxx</i>\r\n         *      </div>\r\n         *      <b>xxx</b>\r\n         * </body>\r\n         * <script>\r\n         *\r\n         *     //由于id为test的i节点之后没有兄弟节点， 则查找其父节点（div）后面的兄弟节点\r\n         *     //output: b节点\r\n         *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( \"test\" ) ) );\r\n         *\r\n         * </script>\r\n         * ```\r\n         */\n\n        /**\r\n         * 取得node节点的下一个兄弟节点， 如果startFromChild的值为ture，则先获取其子节点，\r\n         * 如果有子节点则直接返回第一个子节点；如果没有子节点或者startFromChild的值为false，\r\n         * 则执行<a href=\"#UE.dom.domUtils.getNextDomNode(Node)\">getNextDomNode(Node node)</a>的查找过程。\r\n         * @method getNextDomNode\r\n         * @param { Node } node 需要获取其后的兄弟节点的节点对象\r\n         * @param { Boolean } startFromChild 查找过程是否从其子节点开始\r\n         * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL\r\n         * @see UE.dom.domUtils.getNextDomNode(Node)\r\n         */\n        getNextDomNode: function getNextDomNode(node, startFromChild, filterFn, guard) {\n            return getDomNode(node, 'firstChild', 'nextSibling', startFromChild, filterFn, guard);\n        },\n        getPreDomNode: function getPreDomNode(node, startFromChild, filterFn, guard) {\n            return getDomNode(node, 'lastChild', 'previousSibling', startFromChild, filterFn, guard);\n        },\n\n        /**\r\n         * 检测节点node是否属于bookmark节点\r\n         * @name isBookmarkNode\r\n         * @grammar UM.dom.domUtils.isBookmarkNode(node)  => true|false\r\n         */\n        isBookmarkNode: function isBookmarkNode(node) {\n            return node.nodeType == 1 && node.id && /^_baidu_bookmark_/i.test(node.id);\n        },\n        /**\r\n         * 获取节点node所在的window对象\r\n         * @name  getWindow\r\n         * @grammar UM.dom.domUtils.getWindow(node)  => window对象\r\n         */\n        getWindow: function getWindow(node) {\n            var doc = node.ownerDocument || node;\n            return doc.defaultView || doc.parentWindow;\n        },\n\n        /**\r\n         * 获取离nodeA与nodeB最近的公共的祖先节点\r\n         * @method  getCommonAncestor\r\n         * @param { Node } nodeA 第一个节点\r\n         * @param { Node } nodeB 第二个节点\r\n         * @remind 如果给定的两个节点是同一个节点， 将直接返回该节点。\r\n         * @return { Node | NULL } 如果未找到公共节点， 返回NULL， 否则返回最近的公共祖先节点。\r\n         * @example\r\n         * ```javascript\r\n         * var commonAncestor = UE.dom.domUtils.getCommonAncestor( document.body, document.body.firstChild );\r\n         * //output: true\r\n         * console.log( commonAncestor.tagName.toLowerCase() === 'body' );\r\n         * ```\r\n         */\n        getCommonAncestor: function getCommonAncestor(nodeA, nodeB) {\n            if (nodeA === nodeB) return nodeA;\n            var parentsA = [nodeA],\n                parentsB = [nodeB],\n                parent = nodeA,\n                i = -1;\n            while (parent = parent.parentNode) {\n                if (parent === nodeB) {\n                    return parent;\n                }\n                parentsA.push(parent);\n            }\n            parent = nodeB;\n            while (parent = parent.parentNode) {\n                if (parent === nodeA) return parent;\n                parentsB.push(parent);\n            }\n            parentsA.reverse();\n            parentsB.reverse();\n            while (i++, parentsA[i] === parentsB[i]) {}\n            return i == 0 ? null : parentsA[i - 1];\n        },\n        /**\r\n         * 清除node节点左右连续为空的兄弟inline节点\r\n         * @method clearEmptySibling\r\n         * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，\r\n         * 则这些兄弟节点将被删除\r\n         * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext)  //ignoreNext指定是否忽略右边空节点\r\n         * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext,ignorePre)  //ignorePre指定是否忽略左边空节点\r\n         * @example\r\n         * ```html\r\n         * <body>\r\n         *     <div></div>\r\n         *     <span id=\"test\"></span>\r\n         *     <i></i>\r\n         *     <b></b>\r\n         *     <em>xxx</em>\r\n         *     <span></span>\r\n         * </body>\r\n         * <script>\r\n         *\r\n         *      UE.dom.domUtils.clearEmptySibling( document.getElementById( \"test\" ) );\r\n         *\r\n         *      //output: <div></div><span id=\"test\"></span><em>xxx</em><span></span>\r\n         *      console.log( document.body.innerHTML );\r\n         *\r\n         * </script>\r\n         * ```\r\n         */\n\n        /**\r\n         * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，\r\n         * 则忽略对右边兄弟节点的操作。\r\n         * @method clearEmptySibling\r\n         * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，\r\n         * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作\r\n         * 则这些兄弟节点将被删除\r\n         * @see UE.dom.domUtils.clearEmptySibling(Node)\r\n         */\n\n        /**\r\n         * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，\r\n         * 则忽略对右边兄弟节点的操作， 如果ignorePre的值为true，则忽略对左边兄弟节点的操作。\r\n         * @method clearEmptySibling\r\n         * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，\r\n         * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作\r\n         * @param { Boolean } ignorePre 是否忽略忽略对左边的兄弟节点的操作\r\n         * 则这些兄弟节点将被删除\r\n         * @see UE.dom.domUtils.clearEmptySibling(Node)\r\n         */\n        clearEmptySibling: function clearEmptySibling(node, ignoreNext, ignorePre) {\n            function clear(next, dir) {\n                var tmpNode;\n                while (next && !domUtils.isBookmarkNode(next) && (domUtils.isEmptyInlineElement(next)\n                //这里不能把空格算进来会吧空格干掉，出现文字间的空格丢掉了\n                || !new RegExp('[^\\t\\n\\r' + domUtils.fillChar + ']').test(next.nodeValue))) {\n                    tmpNode = next[dir];\n                    domUtils.remove(next);\n                    next = tmpNode;\n                }\n            }\n            !ignoreNext && clear(node.nextSibling, 'nextSibling');\n            !ignorePre && clear(node.previousSibling, 'previousSibling');\n        },\n\n        /**\r\n         * 将一个文本节点node拆分成两个文本节点，offset指定拆分位置\r\n         * @name split\r\n         * @grammar UM.dom.domUtils.split(node,offset)  =>  TextNode  //返回从切分位置开始的后一个文本节点\r\n         */\n        split: function split(node, offset) {\n            var doc = node.ownerDocument;\n            if (browser.ie && offset == node.nodeValue.length) {\n                var next = doc.createTextNode('');\n                return domUtils.insertAfter(node, next);\n            }\n            var retval = node.splitText(offset);\n            //ie8下splitText不会跟新childNodes,我们手动触发他的更新\n            if (browser.ie8) {\n                var tmpNode = doc.createTextNode('');\n                domUtils.insertAfter(retval, tmpNode);\n                domUtils.remove(tmpNode);\n            }\n            return retval;\n        },\n\n        /**\r\n         * 检测节点node是否为空节点（包括空格、换行、占位符等字符）\r\n         * @name  isWhitespace\r\n         * @grammar  UM.dom.domUtils.isWhitespace(node)  => true|false\r\n         */\n        isWhitespace: function isWhitespace(node) {\n            return !new RegExp('[^ \\t\\n\\r' + domUtils.fillChar + ']').test(node.nodeValue);\n        },\n        /**\r\n         * 获取元素element相对于viewport的位置坐标\r\n         * @name getXY\r\n         * @grammar UM.dom.domUtils.getXY(element)  => Object //返回坐标对象{x:left,y:top}\r\n         */\n        getXY: function getXY(element) {\n            var x = 0,\n                y = 0;\n            while (element.offsetParent) {\n                y += element.offsetTop;\n                x += element.offsetLeft;\n                element = element.offsetParent;\n            }\n            return { 'x': x, 'y': y };\n        },\n        /**\r\n         * 检查节点node是否是空inline节点\r\n         * @name  isEmptyInlineElement\r\n         * @grammar   UM.dom.domUtils.isEmptyInlineElement(node)  => 1|0\r\n         * @example\r\n         * <b><i></i></b> => 1\r\n         * <b><i></i><u></u></b> => 1\r\n         * <b></b> => 1\r\n         * <b>xx<i></i></b> => 0\r\n         */\n        isEmptyInlineElement: function isEmptyInlineElement(node) {\n            if (node.nodeType != 1 || !dtd.$removeEmpty[node.tagName]) {\n                return 0;\n            }\n            node = node.firstChild;\n            while (node) {\n                //如果是创建的bookmark就跳过\n                if (domUtils.isBookmarkNode(node)) {\n                    return 0;\n                }\n                if (node.nodeType == 1 && !domUtils.isEmptyInlineElement(node) || node.nodeType == 3 && !domUtils.isWhitespace(node)) {\n                    return 0;\n                }\n                node = node.nextSibling;\n            }\n            return 1;\n        },\n\n        /**\r\n         * 检查节点node是否为块元素\r\n         * @name isBlockElm\r\n         * @grammar UM.dom.domUtils.isBlockElm(node)  => true|false\r\n         */\n        isBlockElm: function isBlockElm(node) {\n            return node.nodeType == 1 && (dtd.$block[node.tagName] || styleBlock[domUtils.getComputedStyle(node, 'display')]) && !dtd.$nonChild[node.tagName];\n        },\n\n        /**\r\n         * 原生方法getElementsByTagName的封装\r\n         * @name getElementsByTagName\r\n         * @grammar UM.dom.domUtils.getElementsByTagName(node,tagName)  => Array  //节点集合数组\r\n         */\n        getElementsByTagName: function getElementsByTagName(node, name, filter) {\n            if (filter && utils.isString(filter)) {\n                var className = filter;\n                filter = function filter(node) {\n                    var result = false;\n                    $.each(utils.trim(className).replace(/[ ]{2,}/g, ' ').split(' '), function (i, v) {\n                        if ($(node).hasClass(v)) {\n                            result = true;\n                            return false;\n                        }\n                    });\n                    return result;\n                };\n            }\n            name = utils.trim(name).replace(/[ ]{2,}/g, ' ').split(' ');\n            var arr = [];\n            for (var n = 0, ni; ni = name[n++];) {\n                var list = node.getElementsByTagName(ni);\n                for (var i = 0, ci; ci = list[i++];) {\n                    if (!filter || filter(ci)) arr.push(ci);\n                }\n            }\n            return arr;\n        },\n\n        /**\r\n         * 设置节点node及其子节点不会被选中\r\n         * @name unSelectable\r\n         * @grammar UM.dom.domUtils.unSelectable(node)\r\n         */\n        unSelectable: ie && browser.ie9below || browser.opera ? function (node) {\n            //for ie9\n            node.onselectstart = function () {\n                return false;\n            };\n            node.onclick = node.onkeyup = node.onkeydown = function () {\n                return false;\n            };\n            node.unselectable = 'on';\n            node.setAttribute(\"unselectable\", \"on\");\n            for (var i = 0, ci; ci = node.all[i++];) {\n                switch (ci.tagName.toLowerCase()) {\n                    case 'iframe':\n                    case 'textarea':\n                    case 'input':\n                    case 'select':\n                        break;\n                    default:\n                        ci.unselectable = 'on';\n                        node.setAttribute(\"unselectable\", \"on\");\n                }\n            }\n        } : function (node) {\n            node.style.MozUserSelect = node.style.webkitUserSelect = node.style.msUserSelect = node.style.KhtmlUserSelect = 'none';\n        },\n        /**\r\n         * 删除节点node上的属性attrNames，attrNames为属性名称数组\r\n         * @name  removeAttributes\r\n         * @grammar UM.dom.domUtils.removeAttributes(node,attrNames)\r\n         * @example\r\n         * //Before remove\r\n         * <span style=\"font-size:14px;\" id=\"test\" name=\"followMe\">xxxxx</span>\r\n         * //Remove\r\n         * UM.dom.domUtils.removeAttributes(node,[\"id\",\"name\"]);\r\n         * //After remove\r\n         * <span style=\"font-size:14px;\">xxxxx</span>\r\n         */\n        removeAttributes: function removeAttributes(node, attrNames) {\n            attrNames = utils.isArray(attrNames) ? attrNames : utils.trim(attrNames).replace(/[ ]{2,}/g, ' ').split(' ');\n            for (var i = 0, ci; ci = attrNames[i++];) {\n                ci = attrFix[ci] || ci;\n                switch (ci) {\n                    case 'className':\n                        node[ci] = '';\n                        break;\n                    case 'style':\n                        node.style.cssText = '';\n                        !browser.ie && node.removeAttributeNode(node.getAttributeNode('style'));\n                }\n                node.removeAttribute(ci);\n            }\n        },\n        /**\r\n         * 在doc下创建一个标签名为tag，属性为attrs的元素\r\n         * @name createElement\r\n         * @grammar UM.dom.domUtils.createElement(doc,tag,attrs)  =>  Node  //返回创建的节点\r\n         */\n        createElement: function createElement(doc, tag, attrs) {\n            return domUtils.setAttributes(doc.createElement(tag), attrs);\n        },\n        /**\r\n         * 为节点node添加属性attrs，attrs为属性键值对\r\n         * @name setAttributes\r\n         * @grammar UM.dom.domUtils.setAttributes(node,attrs)  => node\r\n         */\n        setAttributes: function setAttributes(node, attrs) {\n            for (var attr in attrs) {\n                if (attrs.hasOwnProperty(attr)) {\n                    var value = attrs[attr];\n                    switch (attr) {\n                        case 'class':\n                            //ie下要这样赋值，setAttribute不起作用\n                            node.className = value;\n                            break;\n                        case 'style':\n                            node.style.cssText = node.style.cssText + \";\" + value;\n                            break;\n                        case 'innerHTML':\n                            node[attr] = value;\n                            break;\n                        case 'value':\n                            node.value = value;\n                            break;\n                        default:\n                            node.setAttribute(attrFix[attr] || attr, value);\n                    }\n                }\n            }\n            return node;\n        },\n\n        /**\r\n         * 获取元素element的计算样式\r\n         * @name getComputedStyle\r\n         * @grammar UM.dom.domUtils.getComputedStyle(element,styleName)  => String //返回对应样式名称的样式值\r\n         * @example\r\n         * getComputedStyle(document.body,\"font-size\")  =>  \"15px\"\r\n         * getComputedStyle(form,\"color\")  =>  \"#ffccdd\"\r\n         */\n        getComputedStyle: function getComputedStyle(element, styleName) {\n            return utils.transUnitToPx(utils.fixColor(styleName, $(element).css(styleName)));\n        },\n\n        /**\r\n         * 阻止事件默认行为\r\n         * @param {Event} evt    需要组织的事件对象\r\n         */\n        preventDefault: function preventDefault(evt) {\n            evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n        },\n\n        /**\r\n         * 删除元素element指定的样式\r\n         * @method removeStyle\r\n         * @param { Element } element 需要删除样式的元素\r\n         * @param { String } styleName 需要删除的样式名\r\n         * @example\r\n         * ```html\r\n         * <span id=\"test\" style=\"color: red; background: blue;\"></span>\r\n         *\r\n         * <script>\r\n         *\r\n         *     var testNode = document.getElementById(\"test\");\r\n         *\r\n         *     UE.dom.domUtils.removeStyle( testNode, 'color' );\r\n         *\r\n         *     //output: background: blue;\r\n         *     console.log( testNode.style.cssText );\r\n         *\r\n         * </script>\r\n         * ```\r\n         */\n        removeStyle: function removeStyle(element, name) {\n            if (browser.ie) {\n                //针对color先单独处理一下\n                if (name == 'color') {\n                    name = '(^|;)' + name;\n                }\n                element.style.cssText = element.style.cssText.replace(new RegExp(name + '[^:]*:[^;]+;?', 'ig'), '');\n            } else {\n                if (element.style.removeProperty) {\n                    element.style.removeProperty(name);\n                } else {\n                    element.style.removeAttribute(utils.cssStyleToDomStyle(name));\n                }\n            }\n\n            if (!element.style.cssText) {\n                domUtils.removeAttributes(element, ['style']);\n            }\n        },\n\n        /**\r\n         * 获取元素element的某个样式值\r\n         * @name getStyle\r\n         * @grammar UM.dom.domUtils.getStyle(element,name)  => String\r\n         */\n        getStyle: function getStyle(element, name) {\n            var value = element.style[utils.cssStyleToDomStyle(name)];\n            return utils.fixColor(name, value);\n        },\n        /**\r\n         * 为元素element设置样式属性值\r\n         * @name setStyle\r\n         * @grammar UM.dom.domUtils.setStyle(element,name,value)\r\n         */\n        setStyle: function setStyle(element, name, value) {\n            element.style[utils.cssStyleToDomStyle(name)] = value;\n            if (!utils.trim(element.style.cssText)) {\n                this.removeAttributes(element, 'style');\n            }\n        },\n\n        /**\r\n         * 删除_moz_dirty属性\r\n         * @function\r\n         */\n        removeDirtyAttr: function removeDirtyAttr(node) {\n            for (var i = 0, ci, nodes = node.getElementsByTagName('*'); ci = nodes[i++];) {\n                ci.removeAttribute('_moz_dirty');\n            }\n            node.removeAttribute('_moz_dirty');\n        },\n        /**\r\n         * 返回子节点的数量\r\n         * @function\r\n         * @param {Node}    node    父节点\r\n         * @param  {Function}    fn    过滤子节点的规则，若为空，则得到所有子节点的数量\r\n         * @return {Number}    符合条件子节点的数量\r\n         */\n        getChildCount: function getChildCount(node, fn) {\n            var count = 0,\n                first = node.firstChild;\n            fn = fn || function () {\n                return 1;\n            };\n            while (first) {\n                if (fn(first)) {\n                    count++;\n                }\n                first = first.nextSibling;\n            }\n            return count;\n        },\n\n        /**\r\n         * 判断是否为空节点\r\n         * @function\r\n         * @param {Node}    node    节点\r\n         * @return {Boolean}    是否为空节点\r\n         */\n        isEmptyNode: function isEmptyNode(node) {\n            return !node.firstChild || domUtils.getChildCount(node, function (node) {\n                return !domUtils.isBr(node) && !domUtils.isBookmarkNode(node) && !domUtils.isWhitespace(node);\n            }) == 0;\n        },\n\n        /**\r\n         * 判断节点是否为br\r\n         * @function\r\n         * @param {Node}    node   节点\r\n         */\n        isBr: function isBr(node) {\n            return node.nodeType == 1 && node.tagName == 'BR';\n        },\n        isFillChar: function isFillChar(node, isInStart) {\n            return node.nodeType == 3 && !node.nodeValue.replace(new RegExp((isInStart ? '^' : '') + domUtils.fillChar), '').length;\n        },\n\n        isEmptyBlock: function isEmptyBlock(node, reg) {\n            if (node.nodeType != 1) return 0;\n            reg = reg || new RegExp('[ \\t\\r\\n' + domUtils.fillChar + ']', 'g');\n            if (node[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').length > 0) {\n                return 0;\n            }\n            for (var n in dtd.$isNotEmpty) {\n                if (node.getElementsByTagName(n).length) {\n                    return 0;\n                }\n            }\n            return 1;\n        },\n\n        //判断是否是编辑器自定义的参数\n        isCustomeNode: function isCustomeNode(node) {\n            return node.nodeType == 1 && node.getAttribute('_ue_custom_node_');\n        },\n        fillNode: function fillNode(doc, node) {\n            var tmpNode = browser.ie ? doc.createTextNode(domUtils.fillChar) : doc.createElement('br');\n            node.innerHTML = '';\n            node.appendChild(tmpNode);\n        },\n        isBoundaryNode: function isBoundaryNode(node, dir) {\n            var tmp;\n            while (!domUtils.isBody(node)) {\n                tmp = node;\n                node = node.parentNode;\n                if (tmp !== node[dir]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }, _defineProperty(_dom$domUtils, 'isFillChar', function isFillChar(node, isInStart) {\n        return node.nodeType == 3 && !node.nodeValue.replace(new RegExp((isInStart ? '^' : '') + domUtils.fillChar), '').length;\n    }), _defineProperty(_dom$domUtils, 'isBody', function isBody(node) {\n        return $(node).hasClass('edui-body-container');\n    }), _dom$domUtils);\n    var fillCharReg = new RegExp(domUtils.fillChar, 'g');\n    ///import editor.js\n    ///import core/utils.js\n    ///import core/browser.js\n    ///import core/dom/dom.js\n    ///import core/dom/dtd.js\n    ///import core/dom/domUtils.js\n    /**\r\n     * @file\r\n     * @name UM.dom.Range\r\n     * @anthor zhanyi\r\n     * @short Range\r\n     * @import editor.js,core/utils.js,core/browser.js,core/dom/domUtils.js,core/dom/dtd.js\r\n     * @desc Range范围实现类，本类是UEditor底层核心类，统一w3cRange和ieRange之间的差异，包括接口和属性\r\n     */\n    (function () {\n        var guid = 0,\n            fillChar = domUtils.fillChar,\n            fillData;\n\n        /**\r\n         * 更新range的collapse状态\r\n         * @param  {Range}   range    range对象\r\n         */\n        function updateCollapse(range) {\n            range.collapsed = range.startContainer && range.endContainer && range.startContainer === range.endContainer && range.startOffset == range.endOffset;\n        }\n\n        function selectOneNode(rng) {\n            return !rng.collapsed && rng.startContainer.nodeType == 1 && rng.startContainer === rng.endContainer && rng.endOffset - rng.startOffset == 1;\n        }\n        function setEndPoint(toStart, node, offset, range) {\n            //如果node是自闭合标签要处理\n            if (node.nodeType == 1 && (dtd.$empty[node.tagName] || dtd.$nonChild[node.tagName])) {\n                offset = domUtils.getNodeIndex(node) + (toStart ? 0 : 1);\n                node = node.parentNode;\n            }\n            if (toStart) {\n                range.startContainer = node;\n                range.startOffset = offset;\n                if (!range.endContainer) {\n                    range.collapse(true);\n                }\n            } else {\n                range.endContainer = node;\n                range.endOffset = offset;\n                if (!range.startContainer) {\n                    range.collapse(false);\n                }\n            }\n            updateCollapse(range);\n            return range;\n        }\n\n        /**\r\n         * @name Range\r\n         * @grammar new UM.dom.Range(document)  => Range 实例\r\n         * @desc 创建一个跟document绑定的空的Range实例\r\n         * - ***startContainer*** 开始边界的容器节点,可以是elementNode或者是textNode\r\n         * - ***startOffset*** 容器节点中的偏移量，如果是elementNode就是childNodes中的第几个，如果是textNode就是nodeValue的第几个字符\r\n         * - ***endContainer*** 结束边界的容器节点,可以是elementNode或者是textNode\r\n         * - ***endOffset*** 容器节点中的偏移量，如果是elementNode就是childNodes中的第几个，如果是textNode就是nodeValue的第几个字符\r\n         * - ***document*** 跟range关联的document对象\r\n         * - ***collapsed*** 是否是闭合状态\r\n         */\n        var Range = dom.Range = function (document, body) {\n            var me = this;\n            me.startContainer = me.startOffset = me.endContainer = me.endOffset = null;\n            me.document = document;\n            me.collapsed = true;\n            me.body = body;\n        };\n\n        /**\r\n         * 删除fillData\r\n         * @param doc\r\n         * @param excludeNode\r\n         */\n        function removeFillData(doc, excludeNode) {\n            try {\n                if (fillData && domUtils.inDoc(fillData, doc)) {\n                    if (!fillData.nodeValue.replace(fillCharReg, '').length) {\n                        var tmpNode = fillData.parentNode;\n                        domUtils.remove(fillData);\n                        while (tmpNode && domUtils.isEmptyInlineElement(tmpNode) && (\n                        //safari的contains有bug\n                        browser.safari ? !(domUtils.getPosition(tmpNode, excludeNode) & domUtils.POSITION_CONTAINS) : !tmpNode.contains(excludeNode))) {\n                            fillData = tmpNode.parentNode;\n                            domUtils.remove(tmpNode);\n                            tmpNode = fillData;\n                        }\n                    } else {\n                        fillData.nodeValue = fillData.nodeValue.replace(fillCharReg, '');\n                    }\n                }\n            } catch (e) {}\n        }\n\n        /**\r\n         *\r\n         * @param node\r\n         * @param dir\r\n         */\n        function mergeSibling(node, dir) {\n            var tmpNode;\n            node = node[dir];\n            while (node && domUtils.isFillChar(node)) {\n                tmpNode = node[dir];\n                domUtils.remove(node);\n                node = tmpNode;\n            }\n        }\n\n        function execContentsAction(range, action) {\n            //调整边界\n            //range.includeBookmark();\n            var start = range.startContainer,\n                end = range.endContainer,\n                startOffset = range.startOffset,\n                endOffset = range.endOffset,\n                doc = range.document,\n                frag = doc.createDocumentFragment(),\n                tmpStart,\n                tmpEnd;\n            if (start.nodeType == 1) {\n                start = start.childNodes[startOffset] || (tmpStart = start.appendChild(doc.createTextNode('')));\n            }\n            if (end.nodeType == 1) {\n                end = end.childNodes[endOffset] || (tmpEnd = end.appendChild(doc.createTextNode('')));\n            }\n            if (start === end && start.nodeType == 3) {\n                frag.appendChild(doc.createTextNode(start.substringData(startOffset, endOffset - startOffset)));\n                //is not clone\n                if (action) {\n                    start.deleteData(startOffset, endOffset - startOffset);\n                    range.collapse(true);\n                }\n                return frag;\n            }\n            var current,\n                currentLevel,\n                clone = frag,\n                startParents = domUtils.findParents(start, true),\n                endParents = domUtils.findParents(end, true);\n            for (var i = 0; startParents[i] == endParents[i];) {\n                i++;\n            }\n            for (var j = i, si; si = startParents[j]; j++) {\n                current = si.nextSibling;\n                if (si == start) {\n                    if (!tmpStart) {\n                        if (range.startContainer.nodeType == 3) {\n                            clone.appendChild(doc.createTextNode(start.nodeValue.slice(startOffset)));\n                            //is not clone\n                            if (action) {\n                                start.deleteData(startOffset, start.nodeValue.length - startOffset);\n                            }\n                        } else {\n                            clone.appendChild(!action ? start.cloneNode(true) : start);\n                        }\n                    }\n                } else {\n                    currentLevel = si.cloneNode(false);\n                    clone.appendChild(currentLevel);\n                }\n                while (current) {\n                    if (current === end || current === endParents[j]) {\n                        break;\n                    }\n                    si = current.nextSibling;\n                    clone.appendChild(!action ? current.cloneNode(true) : current);\n                    current = si;\n                }\n                clone = currentLevel;\n            }\n            clone = frag;\n            if (!startParents[i]) {\n                clone.appendChild(startParents[i - 1].cloneNode(false));\n                clone = clone.firstChild;\n            }\n            for (var j = i, ei; ei = endParents[j]; j++) {\n                current = ei.previousSibling;\n                if (ei == end) {\n                    if (!tmpEnd && range.endContainer.nodeType == 3) {\n                        clone.appendChild(doc.createTextNode(end.substringData(0, endOffset)));\n                        //is not clone\n                        if (action) {\n                            end.deleteData(0, endOffset);\n                        }\n                    }\n                } else {\n                    currentLevel = ei.cloneNode(false);\n                    clone.appendChild(currentLevel);\n                }\n                //如果两端同级，右边第一次已经被开始做了\n                if (j != i || !startParents[i]) {\n                    while (current) {\n                        if (current === start) {\n                            break;\n                        }\n                        ei = current.previousSibling;\n                        clone.insertBefore(!action ? current.cloneNode(true) : current, clone.firstChild);\n                        current = ei;\n                    }\n                }\n                clone = currentLevel;\n            }\n            if (action) {\n                range.setStartBefore(!endParents[i] ? endParents[i - 1] : !startParents[i] ? startParents[i - 1] : endParents[i]).collapse(true);\n            }\n            tmpStart && domUtils.remove(tmpStart);\n            tmpEnd && domUtils.remove(tmpEnd);\n            return frag;\n        }\n        Range.prototype = {\n            /**\r\n             * @name deleteContents\r\n             * @grammar range.deleteContents()  => Range\r\n             * @desc 删除当前选区范围中的所有内容并返回range实例，这时的range已经变成了闭合状态\r\n             * @example\r\n             * DOM Element :\r\n             * <b>x<i>x[x<i>xx]x</b>\r\n             * //执行方法后\r\n             * <b>x<i>x<i>|x</b>\r\n             * 注意range改变了\r\n             * range.startContainer => b\r\n             * range.startOffset  => 2\r\n             * range.endContainer => b\r\n             * range.endOffset => 2\r\n             * range.collapsed => true\r\n             */\n            deleteContents: function deleteContents() {\n                var txt;\n                if (!this.collapsed) {\n                    execContentsAction(this, 1);\n                }\n                if (browser.webkit) {\n                    txt = this.startContainer;\n                    if (txt.nodeType == 3 && !txt.nodeValue.length) {\n                        this.setStartBefore(txt).collapse(true);\n                        domUtils.remove(txt);\n                    }\n                }\n                return this;\n            },\n            inFillChar: function inFillChar() {\n                var start = this.startContainer;\n                if (this.collapsed && start.nodeType == 3 && start.nodeValue.replace(new RegExp('^' + domUtils.fillChar), '').length + 1 == start.nodeValue.length) {\n                    return true;\n                }\n                return false;\n            },\n            /**\r\n             * @name  setStart\r\n             * @grammar range.setStart(node,offset)  => Range\r\n             * @desc    设置range的开始位置位于node节点内，偏移量为offset\r\n             * 如果node是elementNode那offset指的是childNodes中的第几个，如果是textNode那offset指的是nodeValue的第几个字符\r\n             */\n            setStart: function setStart(node, offset) {\n                return setEndPoint(true, node, offset, this);\n            },\n            /**\r\n             * 设置range的结束位置位于node节点，偏移量为offset\r\n             * 如果node是elementNode那offset指的是childNodes中的第几个，如果是textNode那offset指的是nodeValue的第几个字符\r\n             * @name  setEnd\r\n             * @grammar range.setEnd(node,offset)  => Range\r\n             */\n            setEnd: function setEnd(node, offset) {\n                return setEndPoint(false, node, offset, this);\n            },\n            /**\r\n             * 将Range开始位置设置到node节点之后\r\n             * @name  setStartAfter\r\n             * @grammar range.setStartAfter(node)  => Range\r\n             * @example\r\n             * <b>xx<i>x|x</i>x</b>\r\n             * 执行setStartAfter(i)后\r\n             * range.startContainer =>b\r\n             * range.startOffset =>2\r\n             */\n            setStartAfter: function setStartAfter(node) {\n                return this.setStart(node.parentNode, domUtils.getNodeIndex(node) + 1);\n            },\n            /**\r\n             * 将Range开始位置设置到node节点之前\r\n             * @name  setStartBefore\r\n             * @grammar range.setStartBefore(node)  => Range\r\n             * @example\r\n             * <b>xx<i>x|x</i>x</b>\r\n             * 执行setStartBefore(i)后\r\n             * range.startContainer =>b\r\n             * range.startOffset =>1\r\n             */\n            setStartBefore: function setStartBefore(node) {\n                return this.setStart(node.parentNode, domUtils.getNodeIndex(node));\n            },\n            /**\r\n             * 将Range结束位置设置到node节点之后\r\n             * @name  setEndAfter\r\n             * @grammar range.setEndAfter(node)  => Range\r\n             * @example\r\n             * <b>xx<i>x|x</i>x</b>\r\n             * setEndAfter(i)后\r\n             * range.endContainer =>b\r\n             * range.endtOffset =>2\r\n             */\n            setEndAfter: function setEndAfter(node) {\n                return this.setEnd(node.parentNode, domUtils.getNodeIndex(node) + 1);\n            },\n            /**\r\n             * 将Range结束位置设置到node节点之前\r\n             * @name  setEndBefore\r\n             * @grammar range.setEndBefore(node)  => Range\r\n             * @example\r\n             * <b>xx<i>x|x</i>x</b>\r\n             * 执行setEndBefore(i)后\r\n             * range.endContainer =>b\r\n             * range.endtOffset =>1\r\n             */\n            setEndBefore: function setEndBefore(node) {\n                return this.setEnd(node.parentNode, domUtils.getNodeIndex(node));\n            },\n            /**\r\n             * 将Range开始位置设置到node节点内的开始位置\r\n             * @name  setStartAtFirst\r\n             * @grammar range.setStartAtFirst(node)  => Range\r\n             */\n            setStartAtFirst: function setStartAtFirst(node) {\n                return this.setStart(node, 0);\n            },\n            /**\r\n             * 将Range开始位置设置到node节点内的结束位置\r\n             * @name  setStartAtLast\r\n             * @grammar range.setStartAtLast(node)  => Range\r\n             */\n            setStartAtLast: function setStartAtLast(node) {\n                return this.setStart(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);\n            },\n            /**\r\n             * 将Range结束位置设置到node节点内的开始位置\r\n             * @name  setEndAtFirst\r\n             * @grammar range.setEndAtFirst(node)  => Range\r\n             */\n            setEndAtFirst: function setEndAtFirst(node) {\n                return this.setEnd(node, 0);\n            },\n            /**\r\n             * 将Range结束位置设置到node节点内的结束位置\r\n             * @name  setEndAtLast\r\n             * @grammar range.setEndAtLast(node)  => Range\r\n             */\n            setEndAtLast: function setEndAtLast(node) {\n                return this.setEnd(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);\n            },\n\n            /**\r\n             * 选中完整的指定节点,并返回包含该节点的range\r\n             * @name  selectNode\r\n             * @grammar range.selectNode(node)  => Range\r\n             */\n            selectNode: function selectNode(node) {\n                return this.setStartBefore(node).setEndAfter(node);\n            },\n            /**\r\n             * 选中node内部的所有节点，并返回对应的range\r\n             * @name selectNodeContents\r\n             * @grammar range.selectNodeContents(node)  => Range\r\n             * @example\r\n             * <b>xx[x<i>xxx</i>]xxx</b>\r\n             * 执行后\r\n             * <b>[xxx<i>xxx</i>xxx]</b>\r\n             * range.startContainer =>b\r\n             * range.startOffset =>0\r\n             * range.endContainer =>b\r\n             * range.endOffset =>3\r\n             */\n            selectNodeContents: function selectNodeContents(node) {\n                return this.setStart(node, 0).setEndAtLast(node);\n            },\n\n            /**\r\n             * 克隆一个新的range对象\r\n             * @name  cloneRange\r\n             * @grammar range.cloneRange() => Range\r\n             */\n            cloneRange: function cloneRange() {\n                var me = this;\n                return new Range(me.document).setStart(me.startContainer, me.startOffset).setEnd(me.endContainer, me.endOffset);\n            },\n\n            /**\r\n             * 让选区闭合到尾部，若toStart为真，则闭合到头部\r\n             * @name  collapse\r\n             * @grammar range.collapse() => Range\r\n             * @grammar range.collapse(true) => Range   //闭合选区到头部\r\n             */\n            collapse: function collapse(toStart) {\n                var me = this;\n                if (toStart) {\n                    me.endContainer = me.startContainer;\n                    me.endOffset = me.startOffset;\n                } else {\n                    me.startContainer = me.endContainer;\n                    me.startOffset = me.endOffset;\n                }\n                me.collapsed = true;\n                return me;\n            },\n\n            /**\r\n             * 调整range的边界，使其\"收缩\"到最小的位置\r\n             * @name  shrinkBoundary\r\n             * @grammar range.shrinkBoundary()  => Range  //range开始位置和结束位置都调整，参见<code><a href=\"#adjustmentboundary\">adjustmentBoundary</a></code>\r\n             * @grammar range.shrinkBoundary(true)  => Range  //仅调整开始位置，忽略结束位置\r\n             * @example\r\n             * <b>xx[</b>xxxxx] ==> <b>xx</b>[xxxxx]\r\n             * <b>x[xx</b><i>]xxx</i> ==> <b>x[xx]</b><i>xxx</i>\r\n             * [<b><i>xxxx</i>xxxxxxx</b>] ==> <b><i>[xxxx</i>xxxxxxx]</b>\r\n             */\n            shrinkBoundary: function shrinkBoundary(ignoreEnd) {\n                var me = this,\n                    child,\n                    collapsed = me.collapsed;\n                function check(node) {\n                    return node.nodeType == 1 && !domUtils.isBookmarkNode(node) && !dtd.$empty[node.tagName] && !dtd.$nonChild[node.tagName];\n                }\n                while (me.startContainer.nodeType == 1 //是element\n                && (child = me.startContainer.childNodes[me.startOffset]) //子节点也是element\n                && check(child)) {\n                    me.setStart(child, 0);\n                }\n                if (collapsed) {\n                    return me.collapse(true);\n                }\n                if (!ignoreEnd) {\n                    while (me.endContainer.nodeType == 1 //是element\n                    && me.endOffset > 0 //如果是空元素就退出 endOffset=0那么endOffst-1为负值，childNodes[endOffset]报错\n                    && (child = me.endContainer.childNodes[me.endOffset - 1]) //子节点也是element\n                    && check(child)) {\n                        me.setEnd(child, child.childNodes.length);\n                    }\n                }\n                return me;\n            },\n\n            /**\r\n             * 调整边界容器，如果是textNode,就调整到elementNode上\r\n             * @name trimBoundary\r\n             * @grammar range.trimBoundary([ignoreEnd])  => Range //true忽略结束边界\r\n             * @example\r\n             * DOM Element :\r\n             * <b>|xxx</b>\r\n             * startContainer = xxx; startOffset = 0\r\n             * //执行后本方法后\r\n             * startContainer = <b>;  startOffset = 0\r\n             * @example\r\n             * Dom Element :\r\n             * <b>xx|x</b>\r\n             * startContainer = xxx;  startOffset = 2\r\n             * //执行本方法后，xxx被实实在在地切分成两个TextNode\r\n             * startContainer = <b>; startOffset = 1\r\n             */\n            trimBoundary: function trimBoundary(ignoreEnd) {\n                this.txtToElmBoundary();\n                var start = this.startContainer,\n                    offset = this.startOffset,\n                    collapsed = this.collapsed,\n                    end = this.endContainer;\n                if (start.nodeType == 3) {\n                    if (offset == 0) {\n                        this.setStartBefore(start);\n                    } else {\n                        if (offset >= start.nodeValue.length) {\n                            this.setStartAfter(start);\n                        } else {\n                            var textNode = domUtils.split(start, offset);\n                            //跟新结束边界\n                            if (start === end) {\n                                this.setEnd(textNode, this.endOffset - offset);\n                            } else if (start.parentNode === end) {\n                                this.endOffset += 1;\n                            }\n                            this.setStartBefore(textNode);\n                        }\n                    }\n                    if (collapsed) {\n                        return this.collapse(true);\n                    }\n                }\n                if (!ignoreEnd) {\n                    offset = this.endOffset;\n                    end = this.endContainer;\n                    if (end.nodeType == 3) {\n                        if (offset == 0) {\n                            this.setEndBefore(end);\n                        } else {\n                            offset < end.nodeValue.length && domUtils.split(end, offset);\n                            this.setEndAfter(end);\n                        }\n                    }\n                }\n                return this;\n            },\n            /**\r\n             * 如果选区在文本的边界上，就扩展选区到文本的父节点上\r\n             * @name  txtToElmBoundary\r\n             * @example\r\n             * Dom Element :\r\n             * <b> |xxx</b>\r\n             * startContainer = xxx;  startOffset = 0\r\n             * //本方法执行后\r\n             * startContainer = <b>; startOffset = 0\r\n             * @example\r\n             * Dom Element :\r\n             * <b> xxx| </b>\r\n             * startContainer = xxx; startOffset = 3\r\n             * //本方法执行后\r\n             * startContainer = <b>; startOffset = 1\r\n             */\n            txtToElmBoundary: function txtToElmBoundary(ignoreCollapsed) {\n                function adjust(r, c) {\n                    var container = r[c + 'Container'],\n                        offset = r[c + 'Offset'];\n                    if (container.nodeType == 3) {\n                        if (!offset) {\n                            r['set' + c.replace(/(\\w)/, function (a) {\n                                return a.toUpperCase();\n                            }) + 'Before'](container);\n                        } else if (offset >= container.nodeValue.length) {\n                            r['set' + c.replace(/(\\w)/, function (a) {\n                                return a.toUpperCase();\n                            }) + 'After'](container);\n                        }\n                    }\n                }\n\n                if (ignoreCollapsed || !this.collapsed) {\n                    adjust(this, 'start');\n                    adjust(this, 'end');\n                }\n                return this;\n            },\n\n            /**\r\n             * 在当前选区的开始位置前插入一个节点或者fragment，range的开始位置会在插入节点的前边\r\n             * @name  insertNode\r\n             * @grammar range.insertNode(node)  => Range //node可以是textNode,elementNode,fragment\r\n             * @example\r\n             * Range :\r\n             * xxx[x<p>xxxx</p>xxxx]x<p>sdfsdf</p>\r\n             * 待插入Node :\r\n             * <p>ssss</p>\r\n             * 执行本方法后的Range :\r\n             * xxx[<p>ssss</p>x<p>xxxx</p>xxxx]x<p>sdfsdf</p>\r\n             */\n            insertNode: function insertNode(node) {\n                var first = node,\n                    length = 1;\n                if (node.nodeType == 11) {\n                    first = node.firstChild;\n                    length = node.childNodes.length;\n                }\n                this.trimBoundary(true);\n                var start = this.startContainer,\n                    offset = this.startOffset;\n                var nextNode = start.childNodes[offset];\n                if (nextNode) {\n                    start.insertBefore(node, nextNode);\n                } else {\n                    start.appendChild(node);\n                }\n                if (first.parentNode === this.endContainer) {\n                    this.endOffset = this.endOffset + length;\n                }\n                return this.setStartBefore(first);\n            },\n            /**\r\n             * 设置光标闭合位置,toEnd设置为true时光标将闭合到选区的结尾\r\n             * @name  setCursor\r\n             * @grammar range.setCursor([toEnd])  =>  Range   //toEnd为true时，光标闭合到选区的末尾\r\n             */\n            setCursor: function setCursor(toEnd, noFillData) {\n                return this.collapse(!toEnd).select(noFillData);\n            },\n            /**\r\n             * 创建当前range的一个书签，记录下当前range的位置，方便当dom树改变时，还能找回原来的选区位置\r\n             * @name createBookmark\r\n             * @grammar range.createBookmark([serialize])  => Object  //{start:开始标记,end:结束标记,id:serialize} serialize为真时，开始结束标记是插入节点的id，否则是插入节点的引用\r\n             */\n            createBookmark: function createBookmark(serialize, same) {\n                var endNode,\n                    startNode = this.document.createElement('span');\n                startNode.style.cssText = 'display:none;line-height:0px;';\n                startNode.appendChild(this.document.createTextNode('\\u200D'));\n                startNode.id = '_baidu_bookmark_start_' + (same ? '' : guid++);\n\n                if (!this.collapsed) {\n                    endNode = startNode.cloneNode(true);\n                    endNode.id = '_baidu_bookmark_end_' + (same ? '' : guid++);\n                }\n                this.insertNode(startNode);\n                if (endNode) {\n                    this.collapse().insertNode(endNode).setEndBefore(endNode);\n                }\n                this.setStartAfter(startNode);\n                return {\n                    start: serialize ? startNode.id : startNode,\n                    end: endNode ? serialize ? endNode.id : endNode : null,\n                    id: serialize\n                };\n            },\n            /**\r\n             *  移动边界到书签位置，并删除插入的书签节点\r\n             *  @name  moveToBookmark\r\n             *  @grammar range.moveToBookmark(bookmark)  => Range //让当前的range选到给定bookmark的位置,bookmark对象是由range.createBookmark创建的\r\n             */\n            moveToBookmark: function moveToBookmark(bookmark) {\n                var start = bookmark.id ? this.document.getElementById(bookmark.start) : bookmark.start,\n                    end = bookmark.end && bookmark.id ? this.document.getElementById(bookmark.end) : bookmark.end;\n                this.setStartBefore(start);\n                domUtils.remove(start);\n                if (end) {\n                    this.setEndBefore(end);\n                    domUtils.remove(end);\n                } else {\n                    this.collapse(true);\n                }\n                return this;\n            },\n\n            /**\r\n             * 调整Range的边界，使其\"缩小\"到最合适的位置\r\n             * @name adjustmentBoundary\r\n             * @grammar range.adjustmentBoundary() => Range   //参见<code><a href=\"#shrinkboundary\">shrinkBoundary</a></code>\r\n             * @example\r\n             * <b>xx[</b>xxxxx] ==> <b>xx</b>[xxxxx]\r\n             * <b>x[xx</b><i>]xxx</i> ==> <b>x[xx</b>]<i>xxx</i>\r\n             */\n            adjustmentBoundary: function adjustmentBoundary() {\n                if (!this.collapsed) {\n                    while (!domUtils.isBody(this.startContainer) && this.startOffset == this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length && this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length) {\n\n                        this.setStartAfter(this.startContainer);\n                    }\n                    while (!domUtils.isBody(this.endContainer) && !this.endOffset && this.endContainer[this.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length) {\n                        this.setEndBefore(this.endContainer);\n                    }\n                }\n                return this;\n            },\n\n            /**\r\n             * 得到一个自闭合的节点,常用于获取自闭和的节点，例如图片节点\r\n             * @name  getClosedNode\r\n             * @grammar range.getClosedNode()  => node|null\r\n             * @example\r\n             * <b>xxxx[<img />]xxx</b>\r\n             */\n            getClosedNode: function getClosedNode() {\n                var node;\n                if (!this.collapsed) {\n                    var range = this.cloneRange().adjustmentBoundary().shrinkBoundary();\n                    if (selectOneNode(range)) {\n                        var child = range.startContainer.childNodes[range.startOffset];\n                        if (child && child.nodeType == 1 && (dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName])) {\n                            node = child;\n                        }\n                    }\n                }\n                return node;\n            },\n            /**\r\n             * 根据当前range选中内容节点（在页面上表现为反白显示）\r\n             * @name select\r\n             * @grammar range.select();  => Range\r\n             */\n            select: browser.ie ? function (noFillData, textRange) {\n                var nativeRange;\n                if (!this.collapsed) this.shrinkBoundary();\n                var node = this.getClosedNode();\n                if (node && !textRange) {\n                    try {\n                        nativeRange = this.document.body.createControlRange();\n                        nativeRange.addElement(node);\n                        nativeRange.select();\n                    } catch (e) {}\n                    return this;\n                }\n                var bookmark = this.createBookmark(),\n                    start = bookmark.start,\n                    end;\n                nativeRange = this.document.body.createTextRange();\n                nativeRange.moveToElementText(start);\n                nativeRange.moveStart('character', 1);\n                if (!this.collapsed) {\n                    var nativeRangeEnd = this.document.body.createTextRange();\n                    end = bookmark.end;\n                    nativeRangeEnd.moveToElementText(end);\n                    nativeRange.setEndPoint('EndToEnd', nativeRangeEnd);\n                } else {\n                    if (!noFillData && this.startContainer.nodeType != 3) {\n                        //使用<span>|x<span>固定住光标\n                        var tmpText = this.document.createTextNode(fillChar),\n                            tmp = this.document.createElement('span');\n                        tmp.appendChild(this.document.createTextNode(fillChar));\n                        start.parentNode.insertBefore(tmp, start);\n                        start.parentNode.insertBefore(tmpText, start);\n                        //当点b,i,u时，不能清除i上边的b\n                        removeFillData(this.document, tmpText);\n                        fillData = tmpText;\n                        mergeSibling(tmp, 'previousSibling');\n                        mergeSibling(start, 'nextSibling');\n                        nativeRange.moveStart('character', -1);\n                        nativeRange.collapse(true);\n                    }\n                }\n                this.moveToBookmark(bookmark);\n                tmp && domUtils.remove(tmp);\n                //IE在隐藏状态下不支持range操作，catch一下\n                try {\n                    nativeRange.select();\n                } catch (e) {}\n                return this;\n            } : function (notInsertFillData) {\n                function checkOffset(rng) {\n\n                    function check(node, offset, dir) {\n                        if (node.nodeType == 3 && node.nodeValue.length < offset) {\n                            rng[dir + 'Offset'] = node.nodeValue.length;\n                        }\n                    }\n                    check(rng.startContainer, rng.startOffset, 'start');\n                    check(rng.endContainer, rng.endOffset, 'end');\n                }\n                var win = domUtils.getWindow(this.document),\n                    sel = win.getSelection(),\n                    txtNode;\n                //FF下关闭自动长高时滚动条在关闭dialog时会跳\n                //ff下如果不body.focus将不能定位闭合光标到编辑器内\n                browser.gecko ? this.body.focus() : win.focus();\n                if (sel) {\n                    sel.removeAllRanges();\n                    // trace:870 chrome/safari后边是br对于闭合得range不能定位 所以去掉了判断\n                    // this.startContainer.nodeType != 3 &&! ((child = this.startContainer.childNodes[this.startOffset]) && child.nodeType == 1 && child.tagName == 'BR'\n                    if (this.collapsed && !notInsertFillData) {\n                        //                    //opear如果没有节点接着，原生的不能够定位,不能在body的第一级插入空白节点\n                        //                    if (notInsertFillData && browser.opera && !domUtils.isBody(this.startContainer) && this.startContainer.nodeType == 1) {\n                        //                        var tmp = this.document.createTextNode('');\n                        //                        this.insertNode(tmp).setStart(tmp, 0).collapse(true);\n                        //                    }\n                        //\n                        //处理光标落在文本节点的情况\n                        //处理以下的情况\n                        //<b>|xxxx</b>\n                        //<b>xxxx</b>|xxxx\n                        //xxxx<b>|</b>\n                        var start = this.startContainer,\n                            child = start;\n                        if (start.nodeType == 1) {\n                            child = start.childNodes[this.startOffset];\n                        }\n                        if (!(start.nodeType == 3 && this.startOffset) && (child ? !child.previousSibling || child.previousSibling.nodeType != 3 : !start.lastChild || start.lastChild.nodeType != 3)) {\n                            txtNode = this.document.createTextNode(fillChar);\n                            //跟着前边走\n                            this.insertNode(txtNode);\n                            removeFillData(this.document, txtNode);\n                            mergeSibling(txtNode, 'previousSibling');\n                            mergeSibling(txtNode, 'nextSibling');\n                            fillData = txtNode;\n                            this.setStart(txtNode, browser.webkit ? 1 : 0).collapse(true);\n                        }\n                    }\n                    var nativeRange = this.document.createRange();\n                    if (this.collapsed && browser.opera && this.startContainer.nodeType == 1) {\n                        var child = this.startContainer.childNodes[this.startOffset];\n                        if (!child) {\n                            //往前靠拢\n                            child = this.startContainer.lastChild;\n                            if (child && domUtils.isBr(child)) {\n                                this.setStartBefore(child).collapse(true);\n                            }\n                        } else {\n                            //向后靠拢\n                            while (child && domUtils.isBlockElm(child)) {\n                                if (child.nodeType == 1 && child.childNodes[0]) {\n                                    child = child.childNodes[0];\n                                } else {\n                                    break;\n                                }\n                            }\n                            child && this.setStartBefore(child).collapse(true);\n                        }\n                    }\n                    //是createAddress最后一位算的不准，现在这里进行微调\n                    checkOffset(this);\n                    nativeRange.setStart(this.startContainer, this.startOffset);\n                    nativeRange.setEnd(this.endContainer, this.endOffset);\n                    sel.addRange(nativeRange);\n                }\n                return this;\n            },\n\n            createAddress: function createAddress(ignoreEnd, ignoreTxt) {\n                var addr = {},\n                    me = this;\n\n                function getAddress(isStart) {\n                    var node = isStart ? me.startContainer : me.endContainer;\n                    var parents = domUtils.findParents(node, true, function (node) {\n                        return !domUtils.isBody(node);\n                    }),\n                        addrs = [];\n                    for (var i = 0, ci; ci = parents[i++];) {\n                        addrs.push(domUtils.getNodeIndex(ci, ignoreTxt));\n                    }\n                    var firstIndex = 0;\n\n                    if (ignoreTxt) {\n                        if (node.nodeType == 3) {\n                            var tmpNode = node.previousSibling;\n                            while (tmpNode && tmpNode.nodeType == 3) {\n                                firstIndex += tmpNode.nodeValue.replace(fillCharReg, '').length;\n                                tmpNode = tmpNode.previousSibling;\n                            }\n                            firstIndex += isStart ? me.startOffset : me.endOffset; // - (fillCharReg.test(node.nodeValue) ? 1 : 0 )\n                        } else {\n                            node = node.childNodes[isStart ? me.startOffset : me.endOffset];\n                            if (node) {\n                                firstIndex = domUtils.getNodeIndex(node, ignoreTxt);\n                            } else {\n                                node = isStart ? me.startContainer : me.endContainer;\n                                var first = node.firstChild;\n                                while (first) {\n                                    if (domUtils.isFillChar(first)) {\n                                        first = first.nextSibling;\n                                        continue;\n                                    }\n                                    firstIndex++;\n                                    if (first.nodeType == 3) {\n                                        while (first && first.nodeType == 3) {\n                                            first = first.nextSibling;\n                                        }\n                                    } else {\n                                        first = first.nextSibling;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        firstIndex = isStart ? domUtils.isFillChar(node) ? 0 : me.startOffset : me.endOffset;\n                    }\n                    if (firstIndex < 0) {\n                        firstIndex = 0;\n                    }\n                    addrs.push(firstIndex);\n                    return addrs;\n                }\n                addr.startAddress = getAddress(true);\n                if (!ignoreEnd) {\n                    addr.endAddress = me.collapsed ? [].concat(addr.startAddress) : getAddress();\n                }\n                return addr;\n            },\n            moveToAddress: function moveToAddress(addr, ignoreEnd) {\n                var me = this;\n                function getNode(address, isStart) {\n                    var tmpNode = me.body,\n                        parentNode,\n                        offset;\n                    for (var i = 0, ci, l = address.length; i < l; i++) {\n                        ci = address[i];\n                        parentNode = tmpNode;\n                        tmpNode = tmpNode.childNodes[ci];\n                        if (!tmpNode) {\n                            offset = ci;\n                            break;\n                        }\n                    }\n                    if (isStart) {\n                        if (tmpNode) {\n                            me.setStartBefore(tmpNode);\n                        } else {\n                            me.setStart(parentNode, offset);\n                        }\n                    } else {\n                        if (tmpNode) {\n                            me.setEndBefore(tmpNode);\n                        } else {\n                            me.setEnd(parentNode, offset);\n                        }\n                    }\n                }\n                getNode(addr.startAddress, true);\n                !ignoreEnd && addr.endAddress && getNode(addr.endAddress);\n                return me;\n            },\n            equals: function equals(rng) {\n                for (var p in this) {\n                    if (this.hasOwnProperty(p)) {\n                        if (this[p] !== rng[p]) return false;\n                    }\n                }\n                return true;\n            },\n            scrollIntoView: function scrollIntoView() {\n                var $span = $('<span style=\"padding:0;margin:0;display:block;border:0\">&nbsp;</span>');\n                this.cloneRange().insertNode($span.get(0));\n                var winScrollTop = $(window).scrollTop(),\n                    winHeight = $(window).height(),\n                    spanTop = $span.offset().top;\n                if (spanTop < winScrollTop - winHeight || spanTop > winScrollTop + winHeight) {\n                    if (spanTop > winScrollTop + winHeight) {\n                        window.scrollTo(0, spanTop - winHeight + $span.height());\n                    } else {\n                        window.scrollTo(0, winScrollTop - spanTop);\n                    }\n                }\n                $span.remove();\n            },\n            getOffset: function getOffset() {\n                var bk = this.createBookmark();\n                var offset = $(bk.start).css('display', 'inline-block').offset();\n                this.moveToBookmark(bk);\n                return offset;\n            }\n        };\n    })();\n    ///import editor.js\n    ///import core/browser.js\n    ///import core/dom/dom.js\n    ///import core/dom/dtd.js\n    ///import core/dom/domUtils.js\n    ///import core/dom/Range.js\n    /**\r\n     * @class UM.dom.Selection    Selection类\r\n     */\n    (function () {\n\n        function getBoundaryInformation(range, start) {\n            var getIndex = domUtils.getNodeIndex;\n            range = range.duplicate();\n            range.collapse(start);\n            var parent = range.parentElement();\n            //如果节点里没有子节点，直接退出\n            if (!parent.hasChildNodes()) {\n                return { container: parent, offset: 0 };\n            }\n            var siblings = parent.children,\n                child,\n                testRange = range.duplicate(),\n                startIndex = 0,\n                endIndex = siblings.length - 1,\n                index = -1,\n                distance;\n            while (startIndex <= endIndex) {\n                index = Math.floor((startIndex + endIndex) / 2);\n                child = siblings[index];\n                testRange.moveToElementText(child);\n                var position = testRange.compareEndPoints('StartToStart', range);\n                if (position > 0) {\n                    endIndex = index - 1;\n                } else if (position < 0) {\n                    startIndex = index + 1;\n                } else {\n                    //trace:1043\n                    return { container: parent, offset: getIndex(child) };\n                }\n            }\n            if (index == -1) {\n                testRange.moveToElementText(parent);\n                testRange.setEndPoint('StartToStart', range);\n                distance = testRange.text.replace(/(\\r\\n|\\r)/g, '\\n').length;\n                siblings = parent.childNodes;\n                if (!distance) {\n                    child = siblings[siblings.length - 1];\n                    return { container: child, offset: child.nodeValue.length };\n                }\n\n                var i = siblings.length;\n                while (distance > 0) {\n                    distance -= siblings[--i].nodeValue.length;\n                }\n                return { container: siblings[i], offset: -distance };\n            }\n            testRange.collapse(position > 0);\n            testRange.setEndPoint(position > 0 ? 'StartToStart' : 'EndToStart', range);\n            distance = testRange.text.replace(/(\\r\\n|\\r)/g, '\\n').length;\n            if (!distance) {\n                return dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName] ? { container: parent, offset: getIndex(child) + (position > 0 ? 0 : 1) } : { container: child, offset: position > 0 ? 0 : child.childNodes.length };\n            }\n            while (distance > 0) {\n                try {\n                    var pre = child;\n                    child = child[position > 0 ? 'previousSibling' : 'nextSibling'];\n                    distance -= child.nodeValue.length;\n                } catch (e) {\n                    return { container: parent, offset: getIndex(pre) };\n                }\n            }\n            return { container: child, offset: position > 0 ? -distance : child.nodeValue.length + distance };\n        }\n\n        /**\r\n         * 将ieRange转换为Range对象\r\n         * @param {Range}   ieRange    ieRange对象\r\n         * @param {Range}   range      Range对象\r\n         * @return  {Range}  range       返回转换后的Range对象\r\n         */\n        function transformIERangeToRange(ieRange, range) {\n            if (ieRange.item) {\n                range.selectNode(ieRange.item(0));\n            } else {\n                var bi = getBoundaryInformation(ieRange, true);\n                range.setStart(bi.container, bi.offset);\n                if (ieRange.compareEndPoints('StartToEnd', ieRange) != 0) {\n                    bi = getBoundaryInformation(ieRange, false);\n                    range.setEnd(bi.container, bi.offset);\n                }\n            }\n            return range;\n        }\n\n        /**\r\n         * 获得ieRange\r\n         * @param {Selection} sel    Selection对象\r\n         * @return {ieRange}    得到ieRange\r\n         */\n        function _getIERange(sel, txtRange) {\n            var ieRange;\n            //ie下有可能报错\n            try {\n                ieRange = sel.getNative(txtRange).createRange();\n            } catch (e) {\n                return null;\n            }\n            var el = ieRange.item ? ieRange.item(0) : ieRange.parentElement();\n            if ((el.ownerDocument || el) === sel.document) {\n                return ieRange;\n            }\n            return null;\n        }\n\n        var Selection = dom.Selection = function (doc, body) {\n            var me = this;\n            me.document = doc;\n            me.body = body;\n            if (browser.ie9below) {\n                $(body).on('beforedeactivate', function () {\n                    me._bakIERange = me.getIERange();\n                }).on('activate', function () {\n                    try {\n                        var ieNativRng = _getIERange(me);\n                        if ((!ieNativRng || !me.rangeInBody(ieNativRng)) && me._bakIERange) {\n                            me._bakIERange.select();\n                        }\n                    } catch (ex) {}\n                    me._bakIERange = null;\n                });\n            }\n        };\n\n        Selection.prototype = {\n            hasNativeRange: function hasNativeRange() {\n                var rng;\n                if (!browser.ie || browser.ie9above) {\n                    var nativeSel = this.getNative();\n                    if (!nativeSel.rangeCount) {\n                        return false;\n                    }\n                    rng = nativeSel.getRangeAt(0);\n                } else {\n                    rng = _getIERange(this);\n                }\n                return this.rangeInBody(rng);\n            },\n            /**\r\n             * 获取原生seleciton对象\r\n             * @public\r\n             * @function\r\n             * @name    UM.dom.Selection.getNative\r\n             * @return {Selection}    获得selection对象\r\n             */\n            getNative: function getNative(txtRange) {\n                var doc = this.document;\n                try {\n                    return !doc ? null : browser.ie9below || txtRange ? doc.selection : domUtils.getWindow(doc).getSelection();\n                } catch (e) {\n                    return null;\n                }\n            },\n            /**\r\n             * 获得ieRange\r\n             * @public\r\n             * @function\r\n             * @name    UM.dom.Selection.getIERange\r\n             * @return {ieRange}    返回ie原生的Range\r\n             */\n            getIERange: function getIERange(txtRange) {\n                var ieRange = _getIERange(this, txtRange);\n                if (!ieRange || !this.rangeInBody(ieRange, txtRange)) {\n                    if (this._bakIERange) {\n                        return this._bakIERange;\n                    }\n                }\n                return ieRange;\n            },\n            rangeInBody: function rangeInBody(rng, txtRange) {\n                var node = browser.ie9below || txtRange ? rng.item ? rng.item() : rng.parentElement() : rng.startContainer;\n\n                return node === this.body || domUtils.inDoc(node, this.body);\n            },\n            /**\r\n             * 缓存当前选区的range和选区的开始节点\r\n             * @public\r\n             * @function\r\n             * @name    UM.dom.Selection.cache\r\n             */\n            cache: function cache() {\n                this.clear();\n                this._cachedRange = this.getRange();\n                this._cachedStartElement = this.getStart();\n                this._cachedStartElementPath = this.getStartElementPath();\n            },\n\n            getStartElementPath: function getStartElementPath() {\n                if (this._cachedStartElementPath) {\n                    return this._cachedStartElementPath;\n                }\n                var start = this.getStart();\n                if (start) {\n                    return domUtils.findParents(start, true, null, true);\n                }\n                return [];\n            },\n            /**\r\n             * 清空缓存\r\n             * @public\r\n             * @function\r\n             * @name    UM.dom.Selection.clear\r\n             */\n            clear: function clear() {\n                this._cachedStartElementPath = this._cachedRange = this._cachedStartElement = null;\n            },\n            /**\r\n             * 编辑器是否得到了选区\r\n             */\n            isFocus: function isFocus() {\n                return this.hasNativeRange();\n            },\n            /**\r\n             * 获取选区对应的Range\r\n             * @public\r\n             * @function\r\n             * @name    UM.dom.Selection.getRange\r\n             * @returns {UM.dom.Range}    得到Range对象\r\n             */\n            getRange: function getRange() {\n                var me = this;\n                function optimze(range) {\n                    var child = me.body.firstChild,\n                        collapsed = range.collapsed;\n                    while (child && child.firstChild) {\n                        range.setStart(child, 0);\n                        child = child.firstChild;\n                    }\n                    if (!range.startContainer) {\n                        range.setStart(me.body, 0);\n                    }\n                    if (collapsed) {\n                        range.collapse(true);\n                    }\n                }\n\n                if (me._cachedRange != null) {\n                    return this._cachedRange;\n                }\n                var range = new dom.Range(me.document, me.body);\n                if (browser.ie9below) {\n                    var nativeRange = me.getIERange();\n                    if (nativeRange && this.rangeInBody(nativeRange)) {\n\n                        try {\n                            transformIERangeToRange(nativeRange, range);\n                        } catch (e) {\n                            optimze(range);\n                        }\n                    } else {\n                        optimze(range);\n                    }\n                } else {\n                    var sel = me.getNative();\n                    if (sel && sel.rangeCount && me.rangeInBody(sel.getRangeAt(0))) {\n                        var firstRange = sel.getRangeAt(0);\n                        var lastRange = sel.getRangeAt(sel.rangeCount - 1);\n                        range.setStart(firstRange.startContainer, firstRange.startOffset).setEnd(lastRange.endContainer, lastRange.endOffset);\n                        if (range.collapsed && domUtils.isBody(range.startContainer) && !range.startOffset) {\n                            optimze(range);\n                        }\n                    } else {\n                        //trace:1734 有可能已经不在dom树上了，标识的节点\n                        if (this._bakRange && (this._bakRange.startContainer === this.body || domUtils.inDoc(this._bakRange.startContainer, this.body))) {\n                            return this._bakRange;\n                        }\n                        optimze(range);\n                    }\n                }\n\n                return this._bakRange = range;\n            },\n\n            /**\r\n             * 获取开始元素，用于状态反射\r\n             * @public\r\n             * @function\r\n             * @name    UM.dom.Selection.getStart\r\n             * @return {Element}     获得开始元素\r\n             */\n            getStart: function getStart() {\n                if (this._cachedStartElement) {\n                    return this._cachedStartElement;\n                }\n                var range = browser.ie9below ? this.getIERange() : this.getRange(),\n                    tmpRange,\n                    start,\n                    tmp,\n                    parent;\n                if (browser.ie9below) {\n                    if (!range) {\n                        //todo 给第一个值可能会有问题\n                        return this.document.body.firstChild;\n                    }\n                    //control元素\n                    if (range.item) {\n                        return range.item(0);\n                    }\n                    tmpRange = range.duplicate();\n                    //修正ie下<b>x</b>[xx] 闭合后 <b>x|</b>xx\n                    tmpRange.text.length > 0 && tmpRange.moveStart('character', 1);\n                    tmpRange.collapse(1);\n                    start = tmpRange.parentElement();\n                    parent = tmp = range.parentElement();\n                    while (tmp = tmp.parentNode) {\n                        if (tmp == start) {\n                            start = parent;\n                            break;\n                        }\n                    }\n                } else {\n                    start = range.startContainer;\n                    if (start.nodeType == 1 && start.hasChildNodes()) {\n                        start = start.childNodes[Math.min(start.childNodes.length - 1, range.startOffset)];\n                    }\n                    if (start.nodeType == 3) {\n                        return start.parentNode;\n                    }\n                }\n                return start;\n            },\n            /**\r\n             * 得到选区中的文本\r\n             * @public\r\n             * @function\r\n             * @name    UM.dom.Selection.getText\r\n             * @return  {String}    选区中包含的文本\r\n             */\n            getText: function getText() {\n                var nativeSel, nativeRange;\n                if (this.isFocus() && (nativeSel = this.getNative())) {\n                    nativeRange = browser.ie9below ? nativeSel.createRange() : nativeSel.getRangeAt(0);\n                    return browser.ie9below ? nativeRange.text : nativeRange.toString();\n                }\n                return '';\n            }\n        };\n    })();\n    /**\r\n     * @file\r\n     * @name UM.Editor\r\n     * @short Editor\r\n     * @import editor.js,core/utils.js,core/EventBase.js,core/browser.js,core/dom/dtd.js,core/dom/domUtils.js,core/dom/Range.js,core/dom/Selection.js,plugins/serialize.js\r\n     * @desc 编辑器主类，包含编辑器提供的大部分公用接口\r\n     */\n    (function () {\n        var uid = 0,\n            _selectionChangeTimer;\n\n        /**\r\n         * @private\r\n         * @ignore\r\n         * @param form  编辑器所在的form元素\r\n         * @param editor  编辑器实例对象\r\n         */\n        function setValue(form, editor) {\n            var textarea;\n            if (editor.textarea) {\n                if (utils.isString(editor.textarea)) {\n                    for (var i = 0, ti, tis = domUtils.getElementsByTagName(form, 'textarea'); ti = tis[i++];) {\n                        if (ti.id == 'umeditor_textarea_' + editor.options.textarea) {\n                            textarea = ti;\n                            break;\n                        }\n                    }\n                } else {\n                    textarea = editor.textarea;\n                }\n            }\n            if (!textarea) {\n                form.appendChild(textarea = domUtils.createElement(document, 'textarea', {\n                    'name': editor.options.textarea,\n                    'id': 'umeditor_textarea_' + editor.options.textarea,\n                    'style': \"display:none\"\n                }));\n                //不要产生多个textarea\n                editor.textarea = textarea;\n            }\n            textarea.value = editor.hasContents() ? editor.options.allHtmlEnabled ? editor.getAllHtml() : editor.getContent(null, null, true) : '';\n        }\n        function loadPlugins(me) {\n            //初始化插件\n            for (var pi in UM.plugins) {\n                if (me.options.excludePlugins.indexOf(pi) == -1) {\n                    UM.plugins[pi].call(me);\n                    me.plugins[pi] = 1;\n                }\n            }\n            me.langIsReady = true;\n\n            me.fireEvent(\"langReady\");\n        }\n        function checkCurLang(I18N) {\n            for (var lang in I18N) {\n                return lang;\n            }\n        }\n        /**\r\n         * UEditor编辑器类\r\n         * @name Editor\r\n         * @desc 创建一个跟编辑器实例\r\n         * - ***container*** 编辑器容器对象\r\n         * - ***iframe*** 编辑区域所在的iframe对象\r\n         * - ***window*** 编辑区域所在的window\r\n         * - ***document*** 编辑区域所在的document对象\r\n         * - ***body*** 编辑区域所在的body对象\r\n         * - ***selection*** 编辑区域的选区对象\r\n         */\n        var Editor = UM.Editor = function (options) {\n            var me = this;\n            me.uid = uid++;\n            EventBase.call(me);\n            me.commands = {};\n            me.options = utils.extend(utils.clone(options || {}), UMEDITOR_CONFIG, true);\n            me.shortcutkeys = {};\n            me.inputRules = [];\n            me.outputRules = [];\n            //设置默认的常用属性\n            me.setOpt({\n                isShow: true,\n                initialContent: '',\n                initialStyle: '',\n                autoClearinitialContent: false,\n                textarea: 'editorValue',\n                focus: false,\n                focusInEnd: true,\n                autoClearEmptyNode: true,\n                fullscreen: false,\n                readonly: false,\n                zIndex: 999,\n                enterTag: 'p',\n                lang: 'zh-cn',\n                langPath: me.options.UMEDITOR_HOME_URL + 'lang/',\n                theme: 'default',\n                themePath: me.options.UMEDITOR_HOME_URL + 'themes/',\n                allHtmlEnabled: false,\n                autoSyncData: true,\n                autoHeightEnabled: true,\n                excludePlugins: ''\n            });\n            me.plugins = {};\n            if (!utils.isEmptyObject(UM.I18N)) {\n                //修改默认的语言类型\n                me.options.lang = checkCurLang(UM.I18N);\n                loadPlugins(me);\n            } else {\n                utils.loadFile(document, {\n                    src: me.options.langPath + me.options.lang + \"/\" + me.options.lang + \".js\",\n                    tag: \"script\",\n                    type: \"text/javascript\",\n                    defer: \"defer\"\n                }, function () {\n                    loadPlugins(me);\n                });\n            }\n        };\n        Editor.prototype = {\n            /**\r\n             * 当编辑器ready后执行传入的fn,如果编辑器已经完成ready，就马上执行fn，fn的中的this是编辑器实例。\r\n             * 大部分的实例接口都需要放在该方法内部执行，否则在IE下可能会报错。\r\n             * @name ready\r\n             * @grammar editor.ready(fn) fn是当编辑器渲染好后执行的function\r\n             * @example\r\n             * var editor = new UM.ui.Editor();\r\n             * editor.render(\"myEditor\");\r\n             * editor.ready(function(){\r\n             *     editor.setContent(\"欢迎使用UEditor！\");\r\n             * })\r\n             */\n            ready: function ready(fn) {\n                var me = this;\n                if (fn) {\n                    me.isReady ? fn.apply(me) : me.addListener('ready', fn);\n                }\n            },\n            /**\r\n             * 为编辑器设置默认参数值。若用户配置为空，则以默认配置为准\r\n             * @grammar editor.setOpt(key,value);      //传入一个键、值对\r\n             * @grammar editor.setOpt({ key:value});   //传入一个json对象\r\n             */\n            setOpt: function setOpt(key, val) {\n                var obj = {};\n                if (utils.isString(key)) {\n                    obj[key] = val;\n                } else {\n                    obj = key;\n                }\n                utils.extend(this.options, obj, true);\n            },\n            getOpt: function getOpt(key) {\n                return this.options[key] || '';\n            },\n            /**\r\n             * 销毁编辑器实例对象\r\n             * @name destroy\r\n             * @grammar editor.destroy();\r\n             */\n            destroy: function destroy() {\n\n                var me = this;\n                me.fireEvent('destroy');\n                var container = me.container.parentNode;\n                if (container === document.body) {\n                    container = me.container;\n                }\n                var textarea = me.textarea;\n                if (!textarea) {\n                    textarea = document.createElement('textarea');\n                    container.parentNode.insertBefore(textarea, container);\n                } else {\n                    textarea.style.display = '';\n                }\n\n                textarea.style.width = me.body.offsetWidth + 'px';\n                textarea.style.height = me.body.offsetHeight + 'px';\n                textarea.value = me.getContent();\n                textarea.id = me.key;\n                if (container.contains(textarea)) {\n                    $(textarea).insertBefore(container);\n                }\n                container.innerHTML = '';\n\n                domUtils.remove(container);\n                UM.clearCache(me.id);\n                //trace:2004\n                for (var p in me) {\n                    if (me.hasOwnProperty(p)) {\n                        delete this[p];\n                    }\n                }\n            },\n            initialCont: function initialCont(holder) {\n\n                if (holder) {\n                    holder.getAttribute('name') && (this.options.textarea = holder.getAttribute('name'));\n                    if (holder && /script|textarea/ig.test(holder.tagName)) {\n                        var newDiv = document.createElement('div');\n                        holder.parentNode.insertBefore(newDiv, holder);\n                        this.options.initialContent = UM.htmlparser(holder.value || holder.innerHTML || this.options.initialContent).toHtml();\n                        holder.className && (newDiv.className = holder.className);\n                        holder.style.cssText && (newDiv.style.cssText = holder.style.cssText);\n\n                        if (/textarea/i.test(holder.tagName)) {\n                            this.textarea = holder;\n                            this.textarea.style.display = 'none';\n                        } else {\n                            holder.parentNode.removeChild(holder);\n                            holder.id && (newDiv.id = holder.id);\n                        }\n                        holder = newDiv;\n                        holder.innerHTML = '';\n                    }\n                    return holder;\n                } else {\n                    return null;\n                }\n            },\n            /**\r\n             * 渲染编辑器的DOM到指定容器，必须且只能调用一次\r\n             * @name render\r\n             * @grammar editor.render(containerId);    //可以指定一个容器ID\r\n             * @grammar editor.render(containerDom);   //也可以直接指定容器对象\r\n             */\n            render: function render(container) {\n                var me = this,\n                    options = me.options,\n                    getStyleValue = function getStyleValue(attr) {\n                    return parseInt($(container).css(attr));\n                };\n\n                if (utils.isString(container)) {\n                    container = document.getElementById(container);\n                }\n                if (container) {\n                    this.id = container.getAttribute('id');\n                    UM.setEditor(this);\n                    utils.cssRule('edui-style-body', me.options.initialStyle, document);\n\n                    container = this.initialCont(container);\n\n                    container.className += ' edui-body-container';\n\n                    if (options.initialFrameWidth) {\n                        options.minFrameWidth = options.initialFrameWidth;\n                    } else {\n                        //都没给值，先写死了\n                        options.minFrameWidth = options.initialFrameWidth = $(container).width() || UM.defaultWidth;\n                    }\n                    if (options.initialFrameHeight) {\n                        options.minFrameHeight = options.initialFrameHeight;\n                    } else {\n\n                        options.initialFrameHeight = options.minFrameHeight = $(container).height() || UM.defaultHeight;\n                    }\n\n                    container.style.width = /%$/.test(options.initialFrameWidth) ? '100%' : options.initialFrameWidth - getStyleValue(\"padding-left\") - getStyleValue(\"padding-right\") + 'px';\n\n                    var height = /%$/.test(options.initialFrameHeight) ? '100%' : options.initialFrameHeight - getStyleValue(\"padding-top\") - getStyleValue(\"padding-bottom\");\n                    if (this.options.autoHeightEnabled) {\n                        container.style.minHeight = height + 'px';\n                        container.style.height = '';\n                        if (browser.ie && browser.version <= 6) {\n                            container.style.height = height;\n                            container.style.setExpression('height', 'this.scrollHeight <= ' + height + ' ? \"' + height + 'px\" : \"auto\"');\n                        }\n                    } else {\n                        $(container).height(height);\n                    }\n                    container.style.zIndex = options.zIndex;\n                    this._setup(container);\n                }\n            },\n            /**\r\n             * 编辑器初始化\r\n             * @private\r\n             * @ignore\r\n             * @param {Element} doc 编辑器Iframe中的文档对象\r\n             */\n            _setup: function _setup(cont) {\n                var me = this,\n                    options = me.options;\n\n                cont.contentEditable = true;\n                document.body.spellcheck = false;\n\n                me.document = document;\n                me.window = document.defaultView || document.parentWindow;\n                me.body = cont;\n                me.$body = $(cont);\n                me.selection = new dom.Selection(document, me.body);\n                me._isEnabled = false;\n                //gecko初始化就能得到range,无法判断isFocus了\n                var geckoSel;\n                if (browser.gecko && (geckoSel = this.selection.getNative())) {\n                    geckoSel.removeAllRanges();\n                }\n                this._initEvents();\n                //为form提交提供一个隐藏的textarea\n                for (var form = cont.parentNode; form && !domUtils.isBody(form); form = form.parentNode) {\n                    if (form.tagName == 'FORM') {\n                        me.form = form;\n                        if (me.options.autoSyncData) {\n                            $(cont).on('blur', function () {\n                                setValue(form, me);\n                            });\n                        } else {\n                            $(form).on('submit', function () {\n                                setValue(this, me);\n                            });\n                        }\n                        break;\n                    }\n                }\n                if (options.initialContent) {\n                    if (options.autoClearinitialContent) {\n                        var oldExecCommand = me.execCommand;\n                        me.execCommand = function () {\n                            me.fireEvent('firstBeforeExecCommand');\n                            return oldExecCommand.apply(me, arguments);\n                        };\n                        this._setDefaultContent(options.initialContent);\n                    } else this.setContent(options.initialContent, false, true);\n                }\n\n                //编辑器不能为空内容\n\n                if (domUtils.isEmptyNode(me.body)) {\n                    me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';\n                }\n                //如果要求focus, 就把光标定位到内容开始\n                if (options.focus) {\n                    setTimeout(function () {\n                        me.focus(me.options.focusInEnd);\n                        //如果自动清除开着，就不需要做selectionchange;\n                        !me.options.autoClearinitialContent && me._selectionChange();\n                    }, 0);\n                }\n                if (!me.container) {\n                    me.container = cont.parentNode;\n                }\n\n                me._bindshortcutKeys();\n                me.isReady = 1;\n                me.fireEvent('ready');\n                options.onready && options.onready.call(me);\n                if (!browser.ie || browser.ie9above) {\n\n                    $(me.body).on('blur focus', function (e) {\n                        var nSel = me.selection.getNative();\n                        //chrome下会出现alt+tab切换时，导致选区位置不对\n                        if (e.type == 'blur') {\n                            if (nSel.rangeCount > 0) {\n                                me._bakRange = nSel.getRangeAt(0);\n                            }\n                        } else {\n                            try {\n                                me._bakRange && nSel.addRange(me._bakRange);\n                            } catch (e) {}\n                            me._bakRange = null;\n                        }\n                    });\n                }\n\n                !options.isShow && me.setHide();\n                options.readonly && me.setDisabled();\n            },\n            /**\r\n             * 同步编辑器的数据，为提交数据做准备，主要用于你是手动提交的情况\r\n             * @name sync\r\n             * @grammar editor.sync(); //从编辑器的容器向上查找，如果找到就同步数据\r\n             * @grammar editor.sync(formID); //formID制定一个要同步数据的form的id,编辑器的数据会同步到你指定form下\r\n             * @desc\r\n             * 后台取得数据得键值使用你容器上得''name''属性，如果没有就使用参数传入的''textarea''\r\n             * @example\r\n             * editor.sync();\r\n             * form.sumbit(); //form变量已经指向了form元素\r\n             *\r\n             */\n            sync: function sync(formId) {\n                var me = this,\n                    form = formId ? document.getElementById(formId) : domUtils.findParent(me.body.parentNode, function (node) {\n                    return node.tagName == 'FORM';\n                }, true);\n                form && setValue(form, me);\n            },\n            /**\r\n             * 设置编辑器高度\r\n             * @name setHeight\r\n             * @grammar editor.setHeight(number);  //纯数值，不带单位\r\n             */\n            setHeight: function setHeight(height, notSetHeight) {\n                !notSetHeight && (this.options.initialFrameHeight = height);\n                if (this.options.autoHeightEnabled) {\n                    $(this.body).css({\n                        'min-height': height + 'px'\n                    });\n                    if (browser.ie && browser.version <= 6 && this.container) {\n                        this.container.style.height = height;\n                        this.container.style.setExpression('height', 'this.scrollHeight <= ' + height + ' ? \"' + height + 'px\" : \"auto\"');\n                    }\n                } else {\n                    $(this.body).height(height);\n                }\n                this.fireEvent('resize');\n            },\n            /**\r\n             * 设置编辑器宽度\r\n             * @name setWidth\r\n             * @grammar editor.setWidth(number);  //纯数值，不带单位\r\n             */\n            setWidth: function setWidth(width) {\n                this.$container && this.$container.width(width);\n                $(this.body).width(width - $(this.body).css('padding-left').replace('px', '') * 1 - $(this.body).css('padding-right').replace('px', '') * 1);\n                this.fireEvent('resize');\n            },\n            addshortcutkey: function addshortcutkey(cmd, keys) {\n                var obj = {};\n                if (keys) {\n                    obj[cmd] = keys;\n                } else {\n                    obj = cmd;\n                }\n                utils.extend(this.shortcutkeys, obj);\n            },\n            _bindshortcutKeys: function _bindshortcutKeys() {\n                var me = this,\n                    shortcutkeys = this.shortcutkeys;\n                me.addListener('keydown', function (type, e) {\n                    var keyCode = e.keyCode || e.which;\n                    for (var i in shortcutkeys) {\n                        var tmp = shortcutkeys[i].split(',');\n                        for (var t = 0, ti; ti = tmp[t++];) {\n                            ti = ti.split(':');\n                            var key = ti[0],\n                                param = ti[1];\n                            if (/^(ctrl)(\\+shift)?\\+(\\d+)$/.test(key.toLowerCase()) || /^(\\d+)$/.test(key)) {\n                                if ((RegExp.$1 == 'ctrl' ? e.ctrlKey || e.metaKey : 0) && (RegExp.$2 != \"\" ? e[RegExp.$2.slice(1) + \"Key\"] : 1) && keyCode == RegExp.$3 || keyCode == RegExp.$1) {\n                                    if (me.queryCommandState(i, param) != -1) me.execCommand(i, param);\n                                    domUtils.preventDefault(e);\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n            /**\r\n             * 获取编辑器内容\r\n             * @name getContent\r\n             * @grammar editor.getContent()  => String //若编辑器中只包含字符\"&lt;p&gt;&lt;br /&gt;&lt;/p/&gt;\"会返回空。\r\n             * @grammar editor.getContent(fn)  => String\r\n             * @example\r\n             * getContent默认是会现调用hasContents来判断编辑器是否为空，如果是，就直接返回空字符串\r\n             * 你也可以传入一个fn来接替hasContents的工作，定制判断的规则\r\n             * editor.getContent(function(){\r\n             *     return false //编辑器没有内容 ，getContent直接返回空\r\n             * })\r\n             */\n            getContent: function getContent(cmd, fn, notSetCursor, ignoreBlank, formatter) {\n                var me = this;\n                if (cmd && utils.isFunction(cmd)) {\n                    fn = cmd;\n                    cmd = '';\n                }\n                if (fn ? !fn() : !this.hasContents()) {\n                    return '';\n                }\n                me.fireEvent('beforegetcontent');\n                var root = UM.htmlparser(me.body.innerHTML, ignoreBlank);\n                me.filterOutputRule(root);\n                me.fireEvent('aftergetcontent', root);\n                return root.toHtml(formatter);\n            },\n            /**\r\n             * 取得完整的html代码，可以直接显示成完整的html文档\r\n             * @name getAllHtml\r\n             * @grammar editor.getAllHtml()  => String\r\n             */\n            getAllHtml: function getAllHtml() {\n                var me = this,\n                    headHtml = [],\n                    html = '';\n                me.fireEvent('getAllHtml', headHtml);\n                if (browser.ie && browser.version > 8) {\n                    var headHtmlForIE9 = '';\n                    utils.each(me.document.styleSheets, function (si) {\n                        headHtmlForIE9 += si.href ? '<link rel=\"stylesheet\" type=\"text/css\" href=\"' + si.href + '\" />' : '<style>' + si.cssText + '</style>';\n                    });\n                    utils.each(me.document.getElementsByTagName('script'), function (si) {\n                        headHtmlForIE9 += si.outerHTML;\n                    });\n                }\n                return '<html><head>' + (me.options.charset ? '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' + me.options.charset + '\"/>' : '') + (headHtmlForIE9 || me.document.getElementsByTagName('head')[0].innerHTML) + headHtml.join('\\n') + '</head>' + '<body ' + (ie && browser.version < 9 ? 'class=\"view\"' : '') + '>' + me.getContent(null, null, true) + '</body></html>';\n            },\n            /**\r\n             * 得到编辑器的纯文本内容，但会保留段落格式\r\n             * @name getPlainTxt\r\n             * @grammar editor.getPlainTxt()  => String\r\n             */\n            getPlainTxt: function getPlainTxt() {\n                var reg = new RegExp(domUtils.fillChar, 'g'),\n                    html = this.body.innerHTML.replace(/[\\n\\r]/g, ''); //ie要先去了\\n在处理\n                html = html.replace(/<(p|div)[^>]*>(<br\\/?>|&nbsp;)<\\/\\1>/gi, '\\n').replace(/<br\\/?>/gi, '\\n').replace(/<[^>/]+>/g, '').replace(/(\\n)?<\\/([^>]+)>/g, function (a, b, c) {\n                    return dtd.$block[c] ? '\\n' : b ? b : '';\n                });\n                //取出来的空格会有c2a0会变成乱码，处理这种情况\\u00a0\n                return html.replace(reg, '').replace(/\\u00a0/g, ' ').replace(/&nbsp;/g, ' ');\n            },\n\n            /**\r\n             * 获取编辑器中的纯文本内容,没有段落格式\r\n             * @name getContentTxt\r\n             * @grammar editor.getContentTxt()  => String\r\n             */\n            getContentTxt: function getContentTxt() {\n                var reg = new RegExp(domUtils.fillChar, 'g');\n                //取出来的空格会有c2a0会变成乱码，处理这种情况\\u00a0\n                return this.body[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').replace(/\\u00a0/g, ' ');\n            },\n\n            /**\r\n             * 将html设置到编辑器中, 如果是用于初始化时给编辑器赋初值，则必须放在ready方法内部执行\r\n             * @name setContent\r\n             * @grammar editor.setContent(html)\r\n             * @example\r\n             * var editor = new UM.ui.Editor()\r\n             * editor.ready(function(){\r\n             *     //需要ready后执行，否则可能报错\r\n             *     editor.setContent(\"欢迎使用UEditor！\");\r\n             * })\r\n             */\n            setContent: function setContent(html, isAppendTo, notFireSelectionchange) {\n                var me = this;\n\n                me.fireEvent('beforesetcontent', html);\n                var root = UM.htmlparser(html);\n                me.filterInputRule(root);\n                html = root.toHtml();\n\n                me.body.innerHTML = (isAppendTo ? me.body.innerHTML : '') + html;\n\n                function isCdataDiv(node) {\n                    return node.tagName == 'DIV' && node.getAttribute('cdata_tag');\n                }\n                //给文本或者inline节点套p标签\n                if (me.options.enterTag == 'p') {\n\n                    var child = this.body.firstChild,\n                        tmpNode;\n                    if (!child || child.nodeType == 1 && (dtd.$cdata[child.tagName] || isCdataDiv(child) || domUtils.isCustomeNode(child)) && child === this.body.lastChild) {\n                        this.body.innerHTML = '<p>' + (browser.ie ? '&nbsp;' : '<br/>') + '</p>' + this.body.innerHTML;\n                    } else {\n                        var p = me.document.createElement('p');\n                        while (child) {\n                            while (child && (child.nodeType == 3 || child.nodeType == 1 && dtd.p[child.tagName] && !dtd.$cdata[child.tagName])) {\n                                tmpNode = child.nextSibling;\n                                p.appendChild(child);\n                                child = tmpNode;\n                            }\n                            if (p.firstChild) {\n                                if (!child) {\n                                    me.body.appendChild(p);\n                                    break;\n                                } else {\n                                    child.parentNode.insertBefore(p, child);\n                                    p = me.document.createElement('p');\n                                }\n                            }\n                            child = child.nextSibling;\n                        }\n                    }\n                }\n                me.fireEvent('aftersetcontent');\n                me.fireEvent('contentchange');\n\n                !notFireSelectionchange && me._selectionChange();\n                //清除保存的选区\n                me._bakRange = me._bakIERange = me._bakNativeRange = null;\n                //trace:1742 setContent后gecko能得到焦点问题\n                var geckoSel;\n                if (browser.gecko && (geckoSel = this.selection.getNative())) {\n                    geckoSel.removeAllRanges();\n                }\n                if (me.options.autoSyncData) {\n                    me.form && setValue(me.form, me);\n                }\n            },\n\n            /**\r\n             * 让编辑器获得焦点，toEnd确定focus位置\r\n             * @name focus\r\n             * @grammar editor.focus([toEnd])   //默认focus到编辑器头部，toEnd为true时focus到内容尾部\r\n             */\n            focus: function focus(toEnd) {\n                try {\n                    var me = this,\n                        rng = me.selection.getRange();\n                    if (toEnd) {\n                        rng.setStartAtLast(me.body.lastChild).setCursor(false, true);\n                    } else {\n                        rng.select(true);\n                    }\n                    this.fireEvent('focus');\n                } catch (e) {}\n            },\n            /**\r\n             * 使编辑区域失去焦点\r\n             */\n            blur: function blur() {\n                var sel = this.selection.getNative();\n                sel.empty ? sel.empty() : sel.removeAllRanges();\n                this.fireEvent('blur');\n            },\n            /**\r\n             * 判断编辑器当前是否获得了焦点\r\n             */\n            isFocus: function isFocus() {\n                if (this.fireEvent('isfocus') === true) {\n                    return true;\n                }\n                return this.selection.isFocus();\n            },\n\n            /**\r\n             * 初始化UE事件及部分事件代理\r\n             * @private\r\n             * @ignore\r\n             */\n            _initEvents: function _initEvents() {\n                var me = this,\n                    cont = me.body,\n                    _proxyDomEvent = function _proxyDomEvent() {\n                    me._proxyDomEvent.apply(me, arguments);\n                };\n\n                $(cont).on('click contextmenu mousedown keydown keyup keypress mouseup mouseover mouseout selectstart', _proxyDomEvent).on('focus blur', _proxyDomEvent).on('mouseup keydown', function (evt) {\n                    //特殊键不触发selectionchange\n                    if (evt.type == 'keydown' && (evt.ctrlKey || evt.metaKey || evt.shiftKey || evt.altKey)) {\n                        return;\n                    }\n                    if (evt.button == 2) return;\n                    me._selectionChange(250, evt);\n                });\n            },\n            /**\r\n             * 触发事件代理\r\n             * @private\r\n             * @ignore\r\n             */\n            _proxyDomEvent: function _proxyDomEvent(evt) {\n                return this.fireEvent(evt.type.replace(/^on/, ''), evt);\n            },\n            /**\r\n             * 变化选区\r\n             * @private\r\n             * @ignore\r\n             */\n            _selectionChange: function _selectionChange(delay, evt) {\n                var me = this;\n                //有光标才做selectionchange 为了解决未focus时点击source不能触发更改工具栏状态的问题（source命令notNeedUndo=1）\n                //            if ( !me.selection.isFocus() ){\n                //                return;\n                //            }\n\n\n                var hackForMouseUp = false;\n                var mouseX, mouseY;\n                if (browser.ie && browser.version < 9 && evt && evt.type == 'mouseup') {\n                    var range = this.selection.getRange();\n                    if (!range.collapsed) {\n                        hackForMouseUp = true;\n                        mouseX = evt.clientX;\n                        mouseY = evt.clientY;\n                    }\n                }\n                clearTimeout(_selectionChangeTimer);\n                _selectionChangeTimer = setTimeout(function () {\n                    if (!me.selection.getNative()) {\n                        return;\n                    }\n                    //修复一个IE下的bug: 鼠标点击一段已选择的文本中间时，可能在mouseup后的一段时间内取到的range是在selection的type为None下的错误值.\n                    //IE下如果用户是拖拽一段已选择文本，则不会触发mouseup事件，所以这里的特殊处理不会对其有影响\n                    var ieRange;\n                    if (hackForMouseUp && me.selection.getNative().type == 'None') {\n                        ieRange = me.document.body.createTextRange();\n                        try {\n                            ieRange.moveToPoint(mouseX, mouseY);\n                        } catch (ex) {\n                            ieRange = null;\n                        }\n                    }\n                    var bakGetIERange;\n                    if (ieRange) {\n                        bakGetIERange = me.selection.getIERange;\n                        me.selection.getIERange = function () {\n                            return ieRange;\n                        };\n                    }\n                    me.selection.cache();\n                    if (bakGetIERange) {\n                        me.selection.getIERange = bakGetIERange;\n                    }\n                    if (me.selection._cachedRange && me.selection._cachedStartElement) {\n                        me.fireEvent('beforeselectionchange');\n                        // 第二个参数causeByUi为true代表由用户交互造成的selectionchange.\n                        me.fireEvent('selectionchange', !!evt);\n                        me.fireEvent('afterselectionchange');\n                        me.selection.clear();\n                    }\n                }, delay || 50);\n            },\n            _callCmdFn: function _callCmdFn(fnName, args) {\n                args = Array.prototype.slice.call(args, 0);\n                var cmdName = args.shift().toLowerCase(),\n                    cmd,\n                    cmdFn;\n                cmd = this.commands[cmdName] || UM.commands[cmdName];\n                cmdFn = cmd && cmd[fnName];\n                //没有querycommandstate或者没有command的都默认返回0\n                if ((!cmd || !cmdFn) && fnName == 'queryCommandState') {\n                    return 0;\n                } else if (cmdFn) {\n                    return cmdFn.apply(this, [cmdName].concat(args));\n                }\n            },\n\n            /**\r\n             * 执行编辑命令cmdName，完成富文本编辑效果\r\n             * @name execCommand\r\n             * @grammar editor.execCommand(cmdName)   => {*}\r\n             */\n            execCommand: function execCommand(cmdName) {\n                if (!this.isFocus()) {\n                    var bakRange = this.selection._bakRange;\n                    if (bakRange) {\n                        bakRange.select();\n                    } else {\n                        this.focus(true);\n                    }\n                }\n                cmdName = cmdName.toLowerCase();\n                var me = this,\n                    result,\n                    cmd = me.commands[cmdName] || UM.commands[cmdName];\n                if (!cmd || !cmd.execCommand) {\n                    return null;\n                }\n                if (!cmd.notNeedUndo && !me.__hasEnterExecCommand) {\n                    me.__hasEnterExecCommand = true;\n                    if (me.queryCommandState.apply(me, arguments) != -1) {\n                        me.fireEvent('saveScene');\n                        me.fireEvent('beforeexeccommand', cmdName);\n                        result = this._callCmdFn('execCommand', arguments);\n                        !cmd.ignoreContentChange && !me._ignoreContentChange && me.fireEvent('contentchange');\n                        me.fireEvent('afterexeccommand', cmdName);\n                        me.fireEvent('saveScene');\n                    }\n                    me.__hasEnterExecCommand = false;\n                } else {\n                    result = this._callCmdFn('execCommand', arguments);\n                    !me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange && me.fireEvent('contentchange');\n                }\n                !me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange && me._selectionChange();\n                return result;\n            },\n            /**\r\n             * 根据传入的command命令，查选编辑器当前的选区，返回命令的状态\r\n             * @name  queryCommandState\r\n             * @grammar editor.queryCommandState(cmdName)  => (-1|0|1)\r\n             * @desc\r\n             * * ''-1'' 当前命令不可用\r\n             * * ''0'' 当前命令可用\r\n             * * ''1'' 当前命令已经执行过了\r\n             */\n            queryCommandState: function queryCommandState(cmdName) {\n                try {\n                    return this._callCmdFn('queryCommandState', arguments);\n                } catch (e) {\n                    return 0;\n                }\n            },\n\n            /**\r\n             * 根据传入的command命令，查选编辑器当前的选区，根据命令返回相关的值\r\n             * @name  queryCommandValue\r\n             * @grammar editor.queryCommandValue(cmdName)  =>  {*}\r\n             */\n            queryCommandValue: function queryCommandValue(cmdName) {\n                try {\n                    return this._callCmdFn('queryCommandValue', arguments);\n                } catch (e) {\n                    return null;\n                }\n            },\n            /**\r\n             * 检查编辑区域中是否有内容，若包含tags中的节点类型，直接返回true\r\n             * @name  hasContents\r\n             * @desc\r\n             * 默认有文本内容，或者有以下节点都不认为是空\r\n             * <code>{table:1,ul:1,ol:1,dl:1,iframe:1,area:1,base:1,col:1,hr:1,img:1,embed:1,input:1,link:1,meta:1,param:1}</code>\r\n             * @grammar editor.hasContents()  => (true|false)\r\n             * @grammar editor.hasContents(tags)  =>  (true|false)  //若文档中包含tags数组里对应的tag，直接返回true\r\n             * @example\r\n             * editor.hasContents(['span']) //如果编辑器里有这些，不认为是空\r\n             */\n            hasContents: function hasContents(tags) {\n                if (tags) {\n                    for (var i = 0, ci; ci = tags[i++];) {\n                        if (this.body.getElementsByTagName(ci).length > 0) {\n                            return true;\n                        }\n                    }\n                }\n                if (!domUtils.isEmptyBlock(this.body)) {\n                    return true;\n                }\n                //随时添加,定义的特殊标签如果存在，不能认为是空\n                tags = ['div'];\n                for (i = 0; ci = tags[i++];) {\n                    var nodes = domUtils.getElementsByTagName(this.body, ci);\n                    for (var n = 0, cn; cn = nodes[n++];) {\n                        if (domUtils.isCustomeNode(cn)) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            },\n            /**\r\n             * 重置编辑器，可用来做多个tab使用同一个编辑器实例\r\n             * @name  reset\r\n             * @desc\r\n             * * 清空编辑器内容\r\n             * * 清空回退列表\r\n             * @grammar editor.reset()\r\n             */\n            reset: function reset() {\n                this.fireEvent('reset');\n            },\n            isEnabled: function isEnabled() {\n                return this._isEnabled != true;\n            },\n\n            setEnabled: function setEnabled() {\n                var me = this,\n                    range;\n\n                me.body.contentEditable = true;\n\n                /* 恢复选区 */\n                if (me.lastBk) {\n                    range = me.selection.getRange();\n                    try {\n                        range.moveToBookmark(me.lastBk);\n                        delete me.lastBk;\n                    } catch (e) {\n                        range.setStartAtFirst(me.body).collapse(true);\n                    }\n                    range.select(true);\n                }\n\n                /* 恢复query函数 */\n                if (me.bkqueryCommandState) {\n                    me.queryCommandState = me.bkqueryCommandState;\n                    delete me.bkqueryCommandState;\n                }\n\n                /* 恢复原生事件 */\n                if (me._bkproxyDomEvent) {\n                    me._proxyDomEvent = me._bkproxyDomEvent;\n                    delete me._bkproxyDomEvent;\n                }\n\n                /* 触发事件 */\n                me.fireEvent('setEnabled');\n            },\n            /**\r\n             * 设置当前编辑区域可以编辑\r\n             * @name enable\r\n             * @grammar editor.enable()\r\n             */\n            enable: function enable() {\n                return this.setEnabled();\n            },\n            setDisabled: function setDisabled(except, keepDomEvent) {\n                var me = this;\n\n                me.body.contentEditable = false;\n                me._except = except ? utils.isArray(except) ? except : [except] : [];\n\n                /* 备份最后的选区 */\n                if (!me.lastBk) {\n                    me.lastBk = me.selection.getRange().createBookmark(true);\n                }\n\n                /* 备份并重置query函数 */\n                if (!me.bkqueryCommandState) {\n                    me.bkqueryCommandState = me.queryCommandState;\n                    me.queryCommandState = function (type) {\n                        if (utils.indexOf(me._except, type) != -1) {\n                            return me.bkqueryCommandState.apply(me, arguments);\n                        }\n                        return -1;\n                    };\n                }\n\n                /* 备份并墙原生事件 */\n                if (!keepDomEvent && !me._bkproxyDomEvent) {\n                    me._bkproxyDomEvent = me._proxyDomEvent;\n                    me._proxyDomEvent = function () {\n                        return false;\n                    };\n                }\n\n                /* 触发事件 */\n                me.fireEvent('selectionchange');\n                me.fireEvent('setDisabled', me._except);\n            },\n            /** 设置当前编辑区域不可编辑,except中的命令除外\r\n             * @name disable\r\n             * @grammar editor.disable()\r\n             * @grammar editor.disable(except)  //例外的命令，也即即使设置了disable，此处配置的命令仍然可以执行\r\n             * @example\r\n             * //禁用工具栏中除加粗和插入图片之外的所有功能\r\n             * editor.disable(['bold','insertimage']);//可以是单一的String,也可以是Array\r\n             */\n            disable: function disable(except) {\n                return this.setDisabled(except);\n            },\n            /**\r\n             * 设置默认内容\r\n             * @ignore\r\n             * @private\r\n             * @param  {String} cont 要存入的内容\r\n             */\n            _setDefaultContent: function () {\n                function clear() {\n                    var me = this;\n                    if (me.document.getElementById('initContent')) {\n                        me.body.innerHTML = '<p>' + (ie ? '' : '<br/>') + '</p>';\n                        me.removeListener('firstBeforeExecCommand focus', clear);\n                        setTimeout(function () {\n                            me.focus();\n                            me._selectionChange();\n                        }, 0);\n                    }\n                }\n\n                return function (cont) {\n                    var me = this;\n                    me.body.innerHTML = '<p id=\"initContent\">' + cont + '</p>';\n\n                    me.addListener('firstBeforeExecCommand focus', clear);\n                };\n            }(),\n            /**\r\n             * show方法的兼容版本\r\n             * @private\r\n             * @ignore\r\n             */\n            setShow: function setShow() {\n                var me = this,\n                    range = me.selection.getRange();\n                if (me.container.style.display == 'none') {\n                    //有可能内容丢失了\n                    try {\n                        range.moveToBookmark(me.lastBk);\n                        delete me.lastBk;\n                    } catch (e) {\n                        range.setStartAtFirst(me.body).collapse(true);\n                    }\n                    //ie下focus实效，所以做了个延迟\n                    setTimeout(function () {\n                        range.select(true);\n                    }, 100);\n                    me.container.style.display = '';\n                }\n            },\n            /**\r\n             * 显示编辑器\r\n             * @name show\r\n             * @grammar editor.show()\r\n             */\n            show: function show() {\n                return this.setShow();\n            },\n            /**\r\n             * hide方法的兼容版本\r\n             * @private\r\n             * @ignore\r\n             */\n            setHide: function setHide() {\n                var me = this;\n                if (!me.lastBk) {\n                    me.lastBk = me.selection.getRange().createBookmark(true);\n                }\n                me.container.style.display = 'none';\n            },\n            /**\r\n             * 隐藏编辑器\r\n             * @name hide\r\n             * @grammar editor.hide()\r\n             */\n            hide: function hide() {\n                return this.setHide();\n            },\n            /**\r\n             * 根据制定的路径，获取对应的语言资源\r\n             * @name  getLang\r\n             * @grammar editor.getLang(path)  =>  （JSON|String) 路径根据的是lang目录下的语言文件的路径结构\r\n             * @example\r\n             * editor.getLang('contextMenu.delete') //如果当前是中文，那返回是的是删除\r\n             */\n            getLang: function getLang(path) {\n                var lang = UM.I18N[this.options.lang];\n                if (!lang) {\n                    throw Error(\"not import language file\");\n                }\n                path = (path || \"\").split(\".\");\n                for (var i = 0, ci; ci = path[i++];) {\n                    lang = lang[ci];\n                    if (!lang) break;\n                }\n                return lang;\n            },\n            /**\r\n             * 计算编辑器当前内容的长度\r\n             * @name  getContentLength\r\n             * @grammar editor.getContentLength(ingoneHtml,tagNames)  =>\r\n             * @example\r\n             * editor.getLang(true)\r\n             */\n            getContentLength: function getContentLength(ingoneHtml, tagNames) {\n                var count = this.getContent(false, false, true).length;\n                if (ingoneHtml) {\n                    tagNames = (tagNames || []).concat(['hr', 'img', 'iframe']);\n                    count = this.getContentTxt().replace(/[\\t\\r\\n]+/g, '').length;\n                    for (var i = 0, ci; ci = tagNames[i++];) {\n                        count += this.body.getElementsByTagName(ci).length;\n                    }\n                }\n                return count;\n            },\n            addInputRule: function addInputRule(rule, ignoreUndo) {\n                rule.ignoreUndo = ignoreUndo;\n                this.inputRules.push(rule);\n            },\n            filterInputRule: function filterInputRule(root, isUndoLoad) {\n                for (var i = 0, ci; ci = this.inputRules[i++];) {\n                    if (isUndoLoad && ci.ignoreUndo) {\n                        continue;\n                    }\n                    ci.call(this, root);\n                }\n            },\n            addOutputRule: function addOutputRule(rule, ignoreUndo) {\n                rule.ignoreUndo = ignoreUndo;\n                this.outputRules.push(rule);\n            },\n            filterOutputRule: function filterOutputRule(root, isUndoLoad) {\n                for (var i = 0, ci; ci = this.outputRules[i++];) {\n                    if (isUndoLoad && ci.ignoreUndo) {\n                        continue;\n                    }\n                    ci.call(this, root);\n                }\n            }\n        };\n        utils.inherits(Editor, EventBase);\n    })();\n\n    /**\r\n     * @file\r\n     * @name UM.filterWord\r\n     * @short filterWord\r\n     * @desc 用来过滤word粘贴过来的字符串\r\n     * @import editor.js,core/utils.js\r\n     * @anthor zhanyi\r\n     */\n    var filterWord = UM.filterWord = function () {\n\n        //是否是word过来的内容\n        function isWordDocument(str) {\n            return (/(class=\"?Mso|style=\"[^\"]*\\bmso\\-|w:WordDocument|<(v|o):|lang=)/ig.test(str)\n            );\n        }\n        //去掉小数\n        function transUnit(v) {\n            v = v.replace(/[\\d.]+\\w+/g, function (m) {\n                return utils.transUnitToPx(m);\n            });\n            return v;\n        }\n\n        function filterPasteWord(str) {\n            return str.replace(/[\\t\\r\\n]+/g, ' ').replace(/<!--[\\s\\S]*?-->/ig, \"\")\n            //转换图片\n            .replace(/<v:shape [^>]*>[\\s\\S]*?.<\\/v:shape>/gi, function (str) {\n                //opera能自己解析出image所这里直接返回空\n                if (browser.opera) {\n                    return '';\n                }\n                try {\n                    //有可能是bitmap占为图，无用，直接过滤掉，主要体现在粘贴excel表格中\n                    if (/Bitmap/i.test(str)) {\n                        return '';\n                    }\n                    var width = str.match(/width:([ \\d.]*p[tx])/i)[1],\n                        height = str.match(/height:([ \\d.]*p[tx])/i)[1],\n                        src = str.match(/src=\\s*\"([^\"]*)\"/i)[1];\n                    return '<img width=\"' + transUnit(width) + '\" height=\"' + transUnit(height) + '\" src=\"' + src + '\" />';\n                } catch (e) {\n                    return '';\n                }\n            })\n            //针对wps添加的多余标签处理\n            .replace(/<\\/?div[^>]*>/g, '')\n            //去掉多余的属性\n            .replace(/v:\\w+=([\"']?)[^'\"]+\\1/g, '').replace(/<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|xml|meta|link|style|\\w+:\\w+)(?=[\\s\\/>]))[^>]*>/gi, \"\").replace(/<p [^>]*class=\"?MsoHeading\"?[^>]*>(.*?)<\\/p>/gi, \"<p><strong>$1</strong></p>\")\n            //去掉多余的属性\n            .replace(/\\s+(class|lang|align)\\s*=\\s*(['\"]?)([\\w-]+)\\2/ig, function (str, name, marks, val) {\n                //保留list的标示\n                return name == 'class' && val == 'MsoListParagraph' ? str : '';\n            })\n            //清除多余的font/span不能匹配&nbsp;有可能是空格\n            .replace(/<(font|span)[^>]*>(\\s*)<\\/\\1>/gi, function (a, b, c) {\n                return c.replace(/[\\t\\r\\n ]+/g, ' ');\n            })\n            //处理style的问题\n            .replace(/(<[a-z][^>]*)\\sstyle=([\"'])([^\\2]*?)\\2/gi, function (str, tag, tmp, style) {\n                var n = [],\n                    s = style.replace(/^\\s+|\\s+$/, '').replace(/&#39;/g, '\\'').replace(/&quot;/gi, \"'\").split(/;\\s*/g);\n\n                for (var i = 0, v; v = s[i]; i++) {\n\n                    var name,\n                        value,\n                        parts = v.split(\":\");\n\n                    if (parts.length == 2) {\n                        name = parts[0].toLowerCase();\n                        value = parts[1].toLowerCase();\n                        if (/^(background)\\w*/.test(name) && value.replace(/(initial|\\s)/g, '').length == 0 || /^(margin)\\w*/.test(name) && /^0\\w+$/.test(value)) {\n                            continue;\n                        }\n\n                        switch (name) {\n                            case \"mso-padding-alt\":\n                            case \"mso-padding-top-alt\":\n                            case \"mso-padding-right-alt\":\n                            case \"mso-padding-bottom-alt\":\n                            case \"mso-padding-left-alt\":\n                            case \"mso-margin-alt\":\n                            case \"mso-margin-top-alt\":\n                            case \"mso-margin-right-alt\":\n                            case \"mso-margin-bottom-alt\":\n                            case \"mso-margin-left-alt\":\n                            //ie下会出现挤到一起的情况\n                            //case \"mso-table-layout-alt\":\n                            case \"mso-height\":\n                            case \"mso-width\":\n                            case \"mso-vertical-align-alt\":\n                                //trace:1819 ff下会解析出padding在table上\n                                if (!/<table/.test(tag)) n[i] = name.replace(/^mso-|-alt$/g, \"\") + \":\" + transUnit(value);\n                                continue;\n                            case \"horiz-align\":\n                                n[i] = \"text-align:\" + value;\n                                continue;\n\n                            case \"vert-align\":\n                                n[i] = \"vertical-align:\" + value;\n                                continue;\n\n                            case \"font-color\":\n                            case \"mso-foreground\":\n                                n[i] = \"color:\" + value;\n                                continue;\n\n                            case \"mso-background\":\n                            case \"mso-highlight\":\n                                n[i] = \"background:\" + value;\n                                continue;\n\n                            case \"mso-default-height\":\n                                n[i] = \"min-height:\" + transUnit(value);\n                                continue;\n\n                            case \"mso-default-width\":\n                                n[i] = \"min-width:\" + transUnit(value);\n                                continue;\n\n                            case \"mso-padding-between-alt\":\n                                n[i] = \"border-collapse:separate;border-spacing:\" + transUnit(value);\n                                continue;\n\n                            case \"text-line-through\":\n                                if (value == \"single\" || value == \"double\") {\n                                    n[i] = \"text-decoration:line-through\";\n                                }\n                                continue;\n                            case \"mso-zero-height\":\n                                if (value == \"yes\") {\n                                    n[i] = \"display:none\";\n                                }\n                                continue;\n                            //                                case 'background':\n                            //                                    break;\n                            case 'margin':\n                                if (!/[1-9]/.test(value)) {\n                                    continue;\n                                }\n\n                        }\n\n                        if (/^(mso|column|font-emph|lang|layout|line-break|list-image|nav|panose|punct|row|ruby|sep|size|src|tab-|table-border|text-(?:decor|trans)|top-bar|version|vnd|word-break)/.test(name) || /text\\-indent|padding|margin/.test(name) && /\\-[\\d.]+/.test(value)) {\n                            continue;\n                        }\n\n                        n[i] = name + \":\" + parts[1];\n                    }\n                }\n                return tag + (n.length ? ' style=\"' + n.join(';').replace(/;{2,}/g, ';') + '\"' : '');\n            }).replace(/[\\d.]+(cm|pt)/g, function (str) {\n                return utils.transUnitToPx(str);\n            });\n        }\n\n        return function (html) {\n            return isWordDocument(html) ? filterPasteWord(html) : html;\n        };\n    }();\n    ///import editor.js\n    ///import core/utils.js\n    ///import core/dom/dom.js\n    ///import core/dom/dtd.js\n    ///import core/htmlparser.js\n    //模拟的节点类\n    //by zhanyi\n    (function () {\n        var uNode = UM.uNode = function (obj) {\n            this.type = obj.type;\n            this.data = obj.data;\n            this.tagName = obj.tagName;\n            this.parentNode = obj.parentNode;\n            this.attrs = obj.attrs || {};\n            this.children = obj.children;\n        };\n        var notTransAttrs = {\n            'href': 1,\n            'src': 1,\n            '_src': 1,\n            '_href': 1,\n            'cdata_data': 1\n        };\n\n        var notTransTagName = {\n            style: 1,\n            script: 1\n        };\n\n        var indentChar = '    ',\n            breakChar = '\\n';\n\n        function insertLine(arr, current, begin) {\n            arr.push(breakChar);\n            return current + (begin ? 1 : -1);\n        }\n\n        function insertIndent(arr, current) {\n            //插入缩进\n            for (var i = 0; i < current; i++) {\n                arr.push(indentChar);\n            }\n        }\n\n        //创建uNode的静态方法\n        //支持标签和html\n        uNode.createElement = function (html) {\n            if (/[<>]/.test(html)) {\n                return UM.htmlparser(html).children[0];\n            } else {\n                return new uNode({\n                    type: 'element',\n                    children: [],\n                    tagName: html\n                });\n            }\n        };\n        uNode.createText = function (data, noTrans) {\n            return new UM.uNode({\n                type: 'text',\n                'data': noTrans ? data : utils.unhtml(data || '')\n            });\n        };\n        function nodeToHtml(node, arr, formatter, current) {\n            switch (node.type) {\n                case 'root':\n                    for (var i = 0, ci; ci = node.children[i++];) {\n                        //插入新行\n                        if (formatter && ci.type == 'element' && !dtd.$inlineWithA[ci.tagName] && i > 1) {\n                            insertLine(arr, current, true);\n                            insertIndent(arr, current);\n                        }\n                        nodeToHtml(ci, arr, formatter, current);\n                    }\n                    break;\n                case 'text':\n                    isText(node, arr);\n                    break;\n                case 'element':\n                    isElement(node, arr, formatter, current);\n                    break;\n                case 'comment':\n                    isComment(node, arr, formatter);\n            }\n            return arr;\n        }\n\n        function isText(node, arr) {\n            if (node.parentNode.tagName == 'pre') {\n                //源码模式下输入html标签，不能做转换处理，直接输出\n                arr.push(node.data);\n            } else {\n                arr.push(notTransTagName[node.parentNode.tagName] ? utils.html(node.data) : node.data.replace(/[ ]{2}/g, ' &nbsp;'));\n            }\n        }\n\n        function isElement(node, arr, formatter, current) {\n            var attrhtml = '';\n            if (node.attrs) {\n                attrhtml = [];\n                var attrs = node.attrs;\n                for (var a in attrs) {\n                    //这里就针对\n                    //<p>'<img src='http://nsclick.baidu.com/u.gif?&asdf=\\\"sdf&asdfasdfs;asdf'></p>\n                    //这里边的\\\"做转换，要不用innerHTML直接被截断了，属性src\n                    //有可能做的不够\n                    attrhtml.push(a + (attrs[a] !== undefined ? '=\"' + (notTransAttrs[a] ? utils.html(attrs[a]).replace(/[\"]/g, function (a) {\n                        return '&quot;';\n                    }) : utils.unhtml(attrs[a])) + '\"' : ''));\n                }\n                attrhtml = attrhtml.join(' ');\n            }\n            arr.push('<' + node.tagName + (attrhtml ? ' ' + attrhtml : '') + (dtd.$empty[node.tagName] ? '\\/' : '') + '>');\n            //插入新行\n            if (formatter && !dtd.$inlineWithA[node.tagName] && node.tagName != 'pre') {\n                if (node.children && node.children.length) {\n                    current = insertLine(arr, current, true);\n                    insertIndent(arr, current);\n                }\n            }\n            if (node.children && node.children.length) {\n                for (var i = 0, ci; ci = node.children[i++];) {\n                    if (formatter && ci.type == 'element' && !dtd.$inlineWithA[ci.tagName] && i > 1) {\n                        insertLine(arr, current);\n                        insertIndent(arr, current);\n                    }\n                    nodeToHtml(ci, arr, formatter, current);\n                }\n            }\n            if (!dtd.$empty[node.tagName]) {\n                if (formatter && !dtd.$inlineWithA[node.tagName] && node.tagName != 'pre') {\n\n                    if (node.children && node.children.length) {\n                        current = insertLine(arr, current);\n                        insertIndent(arr, current);\n                    }\n                }\n                arr.push('<\\/' + node.tagName + '>');\n            }\n        }\n\n        function isComment(node, arr) {\n            arr.push('<!--' + node.data + '-->');\n        }\n\n        function _getNodeById(root, id) {\n            var node;\n            if (root.type == 'element' && root.getAttr('id') == id) {\n                return root;\n            }\n            if (root.children && root.children.length) {\n                for (var i = 0, ci; ci = root.children[i++];) {\n                    if (node = _getNodeById(ci, id)) {\n                        return node;\n                    }\n                }\n            }\n        }\n\n        function _getNodesByTagName(node, tagName, arr) {\n            if (node.type == 'element' && node.tagName == tagName) {\n                arr.push(node);\n            }\n            if (node.children && node.children.length) {\n                for (var i = 0, ci; ci = node.children[i++];) {\n                    _getNodesByTagName(ci, tagName, arr);\n                }\n            }\n        }\n        function nodeTraversal(root, fn) {\n            if (root.children && root.children.length) {\n                for (var i = 0, ci; ci = root.children[i];) {\n                    nodeTraversal(ci, fn);\n                    //ci被替换的情况，这里就不再走 fn了\n                    if (ci.parentNode) {\n                        if (ci.children && ci.children.length) {\n                            fn(ci);\n                        }\n                        if (ci.parentNode) i++;\n                    }\n                }\n            } else {\n                fn(root);\n            }\n        }\n        uNode.prototype = {\n\n            /**\r\n             * 当前节点对象，转换成html文本\r\n             * @method toHtml\r\n             * @return { String } 返回转换后的html字符串\r\n             * @example\r\n             * ```javascript\r\n             * node.toHtml();\r\n             * ```\r\n             */\n\n            /**\r\n             * 当前节点对象，转换成html文本\r\n             * @method toHtml\r\n             * @param { Boolean } formatter 是否格式化返回值\r\n             * @return { String } 返回转换后的html字符串\r\n             * @example\r\n             * ```javascript\r\n             * node.toHtml( true );\r\n             * ```\r\n             */\n            toHtml: function toHtml(formatter) {\n                var arr = [];\n                nodeToHtml(this, arr, formatter, 0);\n                return arr.join('');\n            },\n\n            /**\r\n             * 获取节点的html内容\r\n             * @method innerHTML\r\n             * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点\r\n             * @return { String } 返回节点的html内容\r\n             * @example\r\n             * ```javascript\r\n             * var htmlstr = node.innerHTML();\r\n             * ```\r\n             */\n\n            /**\r\n             * 设置节点的html内容\r\n             * @method innerHTML\r\n             * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点\r\n             * @param { String } htmlstr 传入要设置的html内容\r\n             * @return { UM.uNode } 返回节点本身\r\n             * @example\r\n             * ```javascript\r\n             * node.innerHTML('<span>text</span>');\r\n             * ```\r\n             */\n            innerHTML: function innerHTML(htmlstr) {\n                if (this.type != 'element' || dtd.$empty[this.tagName]) {\n                    return this;\n                }\n                if (utils.isString(htmlstr)) {\n                    if (this.children) {\n                        for (var i = 0, ci; ci = this.children[i++];) {\n                            ci.parentNode = null;\n                        }\n                    }\n                    this.children = [];\n                    var tmpRoot = UM.htmlparser(htmlstr);\n                    for (var i = 0, ci; ci = tmpRoot.children[i++];) {\n                        this.children.push(ci);\n                        ci.parentNode = this;\n                    }\n                    return this;\n                } else {\n                    var tmpRoot = new UM.uNode({\n                        type: 'root',\n                        children: this.children\n                    });\n                    return tmpRoot.toHtml();\n                }\n            },\n\n            /**\r\n             * 获取节点的纯文本内容\r\n             * @method innerText\r\n             * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点\r\n             * @return { String } 返回节点的存文本内容\r\n             * @example\r\n             * ```javascript\r\n             * var textStr = node.innerText();\r\n             * ```\r\n             */\n\n            /**\r\n             * 设置节点的纯文本内容\r\n             * @method innerText\r\n             * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点\r\n             * @param { String } textStr 传入要设置的文本内容\r\n             * @return { UM.uNode } 返回节点本身\r\n             * @example\r\n             * ```javascript\r\n             * node.innerText('<span>text</span>');\r\n             * ```\r\n             */\n            innerText: function innerText(textStr, noTrans) {\n                if (this.type != 'element' || dtd.$empty[this.tagName]) {\n                    return this;\n                }\n                if (textStr) {\n                    if (this.children) {\n                        for (var i = 0, ci; ci = this.children[i++];) {\n                            ci.parentNode = null;\n                        }\n                    }\n                    this.children = [];\n                    this.appendChild(uNode.createText(textStr, noTrans));\n                    return this;\n                } else {\n                    return this.toHtml().replace(/<[^>]+>/g, '');\n                }\n            },\n\n            /**\r\n             * 获取当前对象的data属性\r\n             * @method getData\r\n             * @return { Object } 若节点的type值是elemenet，返回空字符串，否则返回节点的data属性\r\n             * @example\r\n             * ```javascript\r\n             * node.getData();\r\n             * ```\r\n             */\n            getData: function getData() {\n                if (this.type == 'element') return '';\n                return this.data;\n            },\n\n            /**\r\n             * 获取当前节点下的第一个子节点\r\n             * @method firstChild\r\n             * @return { UM.uNode } 返回第一个子节点\r\n             * @example\r\n             * ```javascript\r\n             * node.firstChild(); //返回第一个子节点\r\n             * ```\r\n             */\n            firstChild: function firstChild() {\n                //            if (this.type != 'element' || dtd.$empty[this.tagName]) {\n                //                return this;\n                //            }\n                return this.children ? this.children[0] : null;\n            },\n\n            /**\r\n             * 获取当前节点下的最后一个子节点\r\n             * @method lastChild\r\n             * @return { UM.uNode } 返回最后一个子节点\r\n             * @example\r\n             * ```javascript\r\n             * node.lastChild(); //返回最后一个子节点\r\n             * ```\r\n             */\n            lastChild: function lastChild() {\n                //            if (this.type != 'element' || dtd.$empty[this.tagName] ) {\n                //                return this;\n                //            }\n                return this.children ? this.children[this.children.length - 1] : null;\n            },\n\n            /**\r\n             * 获取和当前节点有相同父亲节点的前一个节点\r\n             * @method previousSibling\r\n             * @return { UM.uNode } 返回前一个节点\r\n             * @example\r\n             * ```javascript\r\n             * node.children[2].previousSibling(); //返回子节点node.children[1]\r\n             * ```\r\n             */\n            previousSibling: function previousSibling() {\n                var parent = this.parentNode;\n                for (var i = 0, ci; ci = parent.children[i]; i++) {\n                    if (ci === this) {\n                        return i == 0 ? null : parent.children[i - 1];\n                    }\n                }\n            },\n\n            /**\r\n             * 获取和当前节点有相同父亲节点的后一个节点\r\n             * @method nextSibling\r\n             * @return { UM.uNode } 返回后一个节点,找不到返回null\r\n             * @example\r\n             * ```javascript\r\n             * node.children[2].nextSibling(); //如果有，返回子节点node.children[3]\r\n             * ```\r\n             */\n            nextSibling: function nextSibling() {\n                var parent = this.parentNode;\n                for (var i = 0, ci; ci = parent.children[i++];) {\n                    if (ci === this) {\n                        return parent.children[i];\n                    }\n                }\n            },\n\n            /**\r\n             * 用新的节点替换当前节点\r\n             * @method replaceChild\r\n             * @param { UM.uNode } target 要替换成该节点参数\r\n             * @param { UM.uNode } source 要被替换掉的节点\r\n             * @return { UM.uNode } 返回替换之后的节点对象\r\n             * @example\r\n             * ```javascript\r\n             * node.replaceChild(newNode, childNode); //用newNode替换childNode,childNode是node的子节点\r\n             * ```\r\n             */\n            replaceChild: function replaceChild(target, source) {\n                if (this.children) {\n                    if (target.parentNode) {\n                        target.parentNode.removeChild(target);\n                    }\n                    for (var i = 0, ci; ci = this.children[i]; i++) {\n                        if (ci === source) {\n                            this.children.splice(i, 1, target);\n                            source.parentNode = null;\n                            target.parentNode = this;\n                            return target;\n                        }\n                    }\n                }\n            },\n\n            /**\r\n             * 在节点的子节点列表最后位置插入一个节点\r\n             * @method appendChild\r\n             * @param { UM.uNode } node 要插入的节点\r\n             * @return { UM.uNode } 返回刚插入的子节点\r\n             * @example\r\n             * ```javascript\r\n             * node.appendChild( newNode ); //在node内插入子节点newNode\r\n             * ```\r\n             */\n            appendChild: function appendChild(node) {\n                if (this.type == 'root' || this.type == 'element' && !dtd.$empty[this.tagName]) {\n                    if (!this.children) {\n                        this.children = [];\n                    }\n                    if (node.parentNode) {\n                        node.parentNode.removeChild(node);\n                    }\n                    for (var i = 0, ci; ci = this.children[i]; i++) {\n                        if (ci === node) {\n                            this.children.splice(i, 1);\n                            break;\n                        }\n                    }\n                    this.children.push(node);\n                    node.parentNode = this;\n                    return node;\n                }\n            },\n\n            /**\r\n             * 在传入节点的前面插入一个节点\r\n             * @method insertBefore\r\n             * @param { UM.uNode } target 要插入的节点\r\n             * @param { UM.uNode } source 在该参数节点前面插入\r\n             * @return { UM.uNode } 返回刚插入的子节点\r\n             * @example\r\n             * ```javascript\r\n             * node.parentNode.insertBefore(newNode, node); //在node节点后面插入newNode\r\n             * ```\r\n             */\n            insertBefore: function insertBefore(target, source) {\n                if (this.children) {\n                    if (target.parentNode) {\n                        target.parentNode.removeChild(target);\n                    }\n                    for (var i = 0, ci; ci = this.children[i]; i++) {\n                        if (ci === source) {\n                            this.children.splice(i, 0, target);\n                            target.parentNode = this;\n                            return target;\n                        }\n                    }\n                }\n            },\n\n            /**\r\n             * 在传入节点的后面插入一个节点\r\n             * @method insertAfter\r\n             * @param { UM.uNode } target 要插入的节点\r\n             * @param { UM.uNode } source 在该参数节点后面插入\r\n             * @return { UM.uNode } 返回刚插入的子节点\r\n             * @example\r\n             * ```javascript\r\n             * node.parentNode.insertAfter(newNode, node); //在node节点后面插入newNode\r\n             * ```\r\n             */\n            insertAfter: function insertAfter(target, source) {\n                if (this.children) {\n                    if (target.parentNode) {\n                        target.parentNode.removeChild(target);\n                    }\n                    for (var i = 0, ci; ci = this.children[i]; i++) {\n                        if (ci === source) {\n                            this.children.splice(i + 1, 0, target);\n                            target.parentNode = this;\n                            return target;\n                        }\n                    }\n                }\n            },\n\n            /**\r\n             * 从当前节点的子节点列表中，移除节点\r\n             * @method removeChild\r\n             * @param { UM.uNode } node 要移除的节点引用\r\n             * @param { Boolean } keepChildren 是否保留移除节点的子节点，若传入true，自动把移除节点的子节点插入到移除的位置\r\n             * @return { * } 返回刚移除的子节点\r\n             * @example\r\n             * ```javascript\r\n             * node.removeChild(childNode,true); //在node的子节点列表中移除child节点，并且吧child的子节点插入到移除的位置\r\n             * ```\r\n             */\n            removeChild: function removeChild(node, keepChildren) {\n                if (this.children) {\n                    for (var i = 0, ci; ci = this.children[i]; i++) {\n                        if (ci === node) {\n                            this.children.splice(i, 1);\n                            ci.parentNode = null;\n                            if (keepChildren && ci.children && ci.children.length) {\n                                for (var j = 0, cj; cj = ci.children[j]; j++) {\n                                    this.children.splice(i + j, 0, cj);\n                                    cj.parentNode = this;\n                                }\n                            }\n                            return ci;\n                        }\n                    }\n                }\n            },\n\n            /**\r\n             * 获取当前节点所代表的元素属性，即获取attrs对象下的属性值\r\n             * @method getAttr\r\n             * @param { String } attrName 要获取的属性名称\r\n             * @return { * } 返回attrs对象下的属性值\r\n             * @example\r\n             * ```javascript\r\n             * node.getAttr('title');\r\n             * ```\r\n             */\n            getAttr: function getAttr(attrName) {\n                return this.attrs && this.attrs[attrName.toLowerCase()];\n            },\n\n            /**\r\n             * 设置当前节点所代表的元素属性，即设置attrs对象下的属性值\r\n             * @method setAttr\r\n             * @param { String } attrName 要设置的属性名称\r\n             * @param { * } attrVal 要设置的属性值，类型视设置的属性而定\r\n             * @return { * } 返回attrs对象下的属性值\r\n             * @example\r\n             * ```javascript\r\n             * node.setAttr('title','标题');\r\n             * ```\r\n             */\n            setAttr: function setAttr(attrName, attrVal) {\n                if (!attrName) {\n                    delete this.attrs;\n                    return;\n                }\n                if (!this.attrs) {\n                    this.attrs = {};\n                }\n                if (utils.isObject(attrName)) {\n                    for (var a in attrName) {\n                        if (!attrName[a]) {\n                            delete this.attrs[a];\n                        } else {\n                            this.attrs[a.toLowerCase()] = attrName[a];\n                        }\n                    }\n                } else {\n                    if (!attrVal) {\n                        delete this.attrs[attrName];\n                    } else {\n                        this.attrs[attrName.toLowerCase()] = attrVal;\n                    }\n                }\n            },\n            hasAttr: function hasAttr(attrName) {\n                var attrVal = this.getAttr(attrName);\n                return attrVal !== null && attrVal !== undefined;\n            },\n            /**\r\n             * 获取当前节点在父节点下的位置索引\r\n             * @method getIndex\r\n             * @return { Number } 返回索引数值，如果没有父节点，返回-1\r\n             * @example\r\n             * ```javascript\r\n             * node.getIndex();\r\n             * ```\r\n             */\n            getIndex: function getIndex() {\n                var parent = this.parentNode;\n                for (var i = 0, ci; ci = parent.children[i]; i++) {\n                    if (ci === this) {\n                        return i;\n                    }\n                }\n                return -1;\n            },\n\n            /**\r\n             * 在当前节点下，根据id查找节点\r\n             * @method getNodeById\r\n             * @param { String } id 要查找的id\r\n             * @return { UM.uNode } 返回找到的节点\r\n             * @example\r\n             * ```javascript\r\n             * node.getNodeById('textId');\r\n             * ```\r\n             */\n            getNodeById: function getNodeById(id) {\n                var node;\n                if (this.children && this.children.length) {\n                    for (var i = 0, ci; ci = this.children[i++];) {\n                        if (node = _getNodeById(ci, id)) {\n                            return node;\n                        }\n                    }\n                }\n            },\n\n            /**\r\n             * 在当前节点下，根据元素名称查找节点列表\r\n             * @method getNodesByTagName\r\n             * @param { String } tagNames 要查找的元素名称\r\n             * @return { Array } 返回找到的节点列表\r\n             * @example\r\n             * ```javascript\r\n             * node.getNodesByTagName('span');\r\n             * ```\r\n             */\n            getNodesByTagName: function getNodesByTagName(tagNames) {\n                tagNames = utils.trim(tagNames).replace(/[ ]{2,}/g, ' ').split(' ');\n                var arr = [],\n                    me = this;\n                utils.each(tagNames, function (tagName) {\n                    if (me.children && me.children.length) {\n                        for (var i = 0, ci; ci = me.children[i++];) {\n                            _getNodesByTagName(ci, tagName, arr);\n                        }\n                    }\n                });\n                return arr;\n            },\n\n            /**\r\n             * 根据样式名称，获取节点的样式值\r\n             * @method getStyle\r\n             * @param { String } name 要获取的样式名称\r\n             * @return { String } 返回样式值\r\n             * @example\r\n             * ```javascript\r\n             * node.getStyle('font-size');\r\n             * ```\r\n             */\n            getStyle: function getStyle(name) {\n                var cssStyle = this.getAttr('style');\n                if (!cssStyle) {\n                    return '';\n                }\n                var reg = new RegExp('(^|;)\\\\s*' + name + ':([^;]+)', 'i');\n                var match = cssStyle.match(reg);\n                if (match && match[0]) {\n                    return match[2];\n                }\n                return '';\n            },\n\n            /**\r\n             * 给节点设置样式\r\n             * @method setStyle\r\n             * @param { String } name 要设置的的样式名称\r\n             * @param { String } val 要设置的的样值\r\n             * @example\r\n             * ```javascript\r\n             * node.setStyle('font-size', '12px');\r\n             * ```\r\n             */\n            setStyle: function setStyle(name, val) {\n                function exec(name, val) {\n                    var reg = new RegExp('(^|;)\\\\s*' + name + ':([^;]+;?)', 'gi');\n                    cssStyle = cssStyle.replace(reg, '$1');\n                    if (val) {\n                        cssStyle = name + ':' + utils.unhtml(val) + ';' + cssStyle;\n                    }\n                }\n\n                var cssStyle = this.getAttr('style');\n                if (!cssStyle) {\n                    cssStyle = '';\n                }\n                if (utils.isObject(name)) {\n                    for (var a in name) {\n                        exec(a, name[a]);\n                    }\n                } else {\n                    exec(name, val);\n                }\n                this.setAttr('style', utils.trim(cssStyle));\n            },\n            hasClass: function hasClass(className) {\n                if (this.hasAttr('class')) {\n                    var classNames = this.getAttr('class').split(/\\s+/),\n                        hasClass = false;\n                    $.each(classNames, function (key, item) {\n                        if (item === className) {\n                            hasClass = true;\n                        }\n                    });\n                    return hasClass;\n                } else {\n                    return false;\n                }\n            },\n            addClass: function addClass(className) {\n\n                var classes = null,\n                    hasClass = false;\n\n                if (this.hasAttr('class')) {\n\n                    classes = this.getAttr('class');\n                    classes = classes.split(/\\s+/);\n\n                    classes.forEach(function (item) {\n\n                        if (item === className) {\n                            hasClass = true;\n                            return;\n                        }\n                    });\n\n                    !hasClass && classes.push(className);\n\n                    this.setAttr('class', classes.join(\" \"));\n                } else {\n                    this.setAttr('class', className);\n                }\n            },\n            removeClass: function removeClass(className) {\n                if (this.hasAttr('class')) {\n                    var cl = this.getAttr('class');\n                    cl = cl.replace(new RegExp('\\\\b' + className + '\\\\b', 'g'), '');\n                    this.setAttr('class', utils.trim(cl).replace(/[ ]{2,}/g, ' '));\n                }\n            },\n            /**\r\n             * 传入一个函数，递归遍历当前节点下的所有节点\r\n             * @method traversal\r\n             * @param { Function } fn 遍历到节点的时，传入节点作为参数，运行此函数\r\n             * @example\r\n             * ```javascript\r\n             * traversal(node, function(){\r\n             *     console.log(node.type);\r\n             * });\r\n             * ```\r\n             */\n            traversal: function traversal(fn) {\n                if (this.children && this.children.length) {\n                    nodeTraversal(this, fn);\n                }\n                return this;\n            }\n        };\n    })();\n\n    //html字符串转换成uNode节点\n    //by zhanyi\n    var htmlparser = UM.htmlparser = function (htmlstr, ignoreBlank) {\n        //todo 原来的方式  [^\"'<>\\/] 有\\/就不能配对上 <TD vAlign=top background=../AAA.JPG> 这样的标签了\n        //先去掉了，加上的原因忘了，这里先记录\n        var re_tag = /<(?:(?:\\/([^>]+)>)|(?:!--([\\S|\\s]*?)-->)|(?:([^\\s\\/>]+)\\s*((?:(?:\"[^\"]*\")|(?:'[^']*')|[^\"'<>])*)\\/?>))/g,\n            re_attr = /([\\w\\-:.]+)(?:(?:\\s*=\\s*(?:(?:\"([^\"]*)\")|(?:'([^']*)')|([^\\s>]+)))|(?=\\s|$))/g;\n\n        //ie下取得的html可能会有\\n存在，要去掉，在处理replace(/[\\t\\r\\n]*/g,'');代码高量的\\n不能去除\n        var allowEmptyTags = {\n            b: 1, code: 1, i: 1, u: 1, strike: 1, s: 1, tt: 1, strong: 1, q: 1, samp: 1, em: 1, span: 1,\n            sub: 1, img: 1, sup: 1, font: 1, big: 1, small: 1, iframe: 1, a: 1, br: 1, pre: 1\n        };\n        htmlstr = htmlstr.replace(new RegExp(domUtils.fillChar, 'g'), '');\n        if (!ignoreBlank) {\n            htmlstr = htmlstr.replace(new RegExp('[\\\\r\\\\t\\\\n' + (ignoreBlank ? '' : ' ') + ']*<\\/?(\\\\w+)\\\\s*(?:[^>]*)>[\\\\r\\\\t\\\\n' + (ignoreBlank ? '' : ' ') + ']*', 'g'), function (a, b) {\n                //br暂时单独处理\n                if (b && allowEmptyTags[b.toLowerCase()]) {\n                    return a.replace(/(^[\\n\\r]+)|([\\n\\r]+$)/g, '');\n                }\n                return a.replace(new RegExp('^[\\\\r\\\\n' + (ignoreBlank ? '' : ' ') + ']+'), '').replace(new RegExp('[\\\\r\\\\n' + (ignoreBlank ? '' : ' ') + ']+$'), '');\n            });\n        }\n\n        var notTransAttrs = {\n            'href': 1,\n            'src': 1\n        };\n\n        var uNode = UM.uNode,\n            needParentNode = {\n            'td': 'tr',\n            'tr': ['tbody', 'thead', 'tfoot'],\n            'tbody': 'table',\n            'th': 'tr',\n            'thead': 'table',\n            'tfoot': 'table',\n            'caption': 'table',\n            'li': ['ul', 'ol'],\n            'dt': 'dl',\n            'dd': 'dl',\n            'option': 'select'\n        },\n            needChild = {\n            'ol': 'li',\n            'ul': 'li'\n        };\n\n        function text(parent, data) {\n\n            if (needChild[parent.tagName]) {\n                var tmpNode = uNode.createElement(needChild[parent.tagName]);\n                parent.appendChild(tmpNode);\n                tmpNode.appendChild(uNode.createText(data));\n                parent = tmpNode;\n            } else {\n\n                parent.appendChild(uNode.createText(data));\n            }\n        }\n\n        function element(parent, tagName, htmlattr) {\n            var needParentTag;\n            if (needParentTag = needParentNode[tagName]) {\n                var tmpParent = parent,\n                    hasParent;\n                while (tmpParent.type != 'root') {\n                    if (utils.isArray(needParentTag) ? utils.indexOf(needParentTag, tmpParent.tagName) != -1 : needParentTag == tmpParent.tagName) {\n                        parent = tmpParent;\n                        hasParent = true;\n                        break;\n                    }\n                    tmpParent = tmpParent.parentNode;\n                }\n                if (!hasParent) {\n                    parent = element(parent, utils.isArray(needParentTag) ? needParentTag[0] : needParentTag);\n                }\n            }\n            //按dtd处理嵌套\n            //        if(parent.type != 'root' && !dtd[parent.tagName][tagName])\n            //            parent = parent.parentNode;\n            var elm = new uNode({\n                parentNode: parent,\n                type: 'element',\n                tagName: tagName.toLowerCase(),\n                //是自闭合的处理一下\n                children: dtd.$empty[tagName] ? null : []\n            });\n            //如果属性存在，处理属性\n            if (htmlattr) {\n                var attrs = {},\n                    match;\n                while (match = re_attr.exec(htmlattr)) {\n                    attrs[match[1].toLowerCase()] = notTransAttrs[match[1].toLowerCase()] ? match[2] || match[3] || match[4] : utils.unhtml(match[2] || match[3] || match[4]);\n                }\n                elm.attrs = attrs;\n            }\n\n            parent.children.push(elm);\n            //如果是自闭合节点返回父亲节点\n            return dtd.$empty[tagName] ? parent : elm;\n        }\n\n        function comment(parent, data) {\n            parent.children.push(new uNode({\n                type: 'comment',\n                data: data,\n                parentNode: parent\n            }));\n        }\n\n        var match,\n            currentIndex = 0,\n            nextIndex = 0;\n        //设置根节点\n        var root = new uNode({\n            type: 'root',\n            children: []\n        });\n        var currentParent = root;\n\n        while (match = re_tag.exec(htmlstr)) {\n            currentIndex = match.index;\n            try {\n                if (currentIndex > nextIndex) {\n                    //text node\n                    text(currentParent, htmlstr.slice(nextIndex, currentIndex));\n                }\n                if (match[3]) {\n\n                    if (dtd.$cdata[currentParent.tagName]) {\n                        text(currentParent, match[0]);\n                    } else {\n                        //start tag\n                        currentParent = element(currentParent, match[3].toLowerCase(), match[4]);\n                    }\n                } else if (match[1]) {\n                    if (currentParent.type != 'root') {\n                        if (dtd.$cdata[currentParent.tagName] && !dtd.$cdata[match[1]]) {\n                            text(currentParent, match[0]);\n                        } else {\n                            var tmpParent = currentParent;\n                            while (currentParent.type == 'element' && currentParent.tagName != match[1].toLowerCase()) {\n                                currentParent = currentParent.parentNode;\n                                if (currentParent.type == 'root') {\n                                    currentParent = tmpParent;\n                                    throw 'break';\n                                }\n                            }\n                            //end tag\n                            currentParent = currentParent.parentNode;\n                        }\n                    }\n                } else if (match[2]) {\n                    //comment\n                    comment(currentParent, match[2]);\n                }\n            } catch (e) {}\n\n            nextIndex = re_tag.lastIndex;\n        }\n        //如果结束是文本，就有可能丢掉，所以这里手动判断一下\n        //例如 <li>sdfsdfsdf<li>sdfsdfsdfsdf\n        if (nextIndex < htmlstr.length) {\n            text(currentParent, htmlstr.slice(nextIndex));\n        }\n        return root;\n    };\n    /**\r\n     * @file\r\n     * @name UM.filterNode\r\n     * @short filterNode\r\n     * @desc 根据给定的规则过滤节点\r\n     * @import editor.js,core/utils.js\r\n     * @anthor zhanyi\r\n     */\n    var filterNode = UM.filterNode = function () {\n        function filterNode(node, rules) {\n            switch (node.type) {\n                case 'text':\n                    break;\n                case 'element':\n                    var val;\n                    if (val = rules[node.tagName]) {\n                        if (val === '-') {\n                            node.parentNode.removeChild(node);\n                        } else if (utils.isFunction(val)) {\n                            var parentNode = node.parentNode,\n                                index = node.getIndex();\n                            val(node);\n                            if (node.parentNode) {\n                                if (node.children) {\n                                    for (var i = 0, ci; ci = node.children[i];) {\n                                        filterNode(ci, rules);\n                                        if (ci.parentNode) {\n                                            i++;\n                                        }\n                                    }\n                                }\n                            } else {\n                                for (var i = index, ci; ci = parentNode.children[i];) {\n                                    filterNode(ci, rules);\n                                    if (ci.parentNode) {\n                                        i++;\n                                    }\n                                }\n                            }\n                        } else {\n                            var attrs = val['$'];\n                            if (attrs && node.attrs) {\n                                var tmpAttrs = {},\n                                    tmpVal;\n                                for (var a in attrs) {\n                                    tmpVal = node.getAttr(a);\n                                    //todo 只先对style单独处理\n                                    if (a == 'style' && utils.isArray(attrs[a])) {\n                                        var tmpCssStyle = [];\n                                        utils.each(attrs[a], function (v) {\n                                            var tmp;\n                                            if (tmp = node.getStyle(v)) {\n                                                tmpCssStyle.push(v + ':' + tmp);\n                                            }\n                                        });\n                                        tmpVal = tmpCssStyle.join(';');\n                                    }\n                                    if (tmpVal) {\n                                        tmpAttrs[a] = tmpVal;\n                                    }\n                                }\n                                node.attrs = tmpAttrs;\n                            }\n                            if (node.children) {\n                                for (var i = 0, ci; ci = node.children[i];) {\n                                    filterNode(ci, rules);\n                                    if (ci.parentNode) {\n                                        i++;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        //如果不在名单里扣出子节点并删除该节点,cdata除外\n                        if (dtd.$cdata[node.tagName]) {\n                            node.parentNode.removeChild(node);\n                        } else {\n                            var parentNode = node.parentNode,\n                                index = node.getIndex();\n                            node.parentNode.removeChild(node, true);\n                            for (var i = index, ci; ci = parentNode.children[i];) {\n                                filterNode(ci, rules);\n                                if (ci.parentNode) {\n                                    i++;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'comment':\n                    node.parentNode.removeChild(node);\n            }\n        }\n        return function (root, rules) {\n            if (utils.isEmptyObject(rules)) {\n                return root;\n            }\n            var val;\n            if (val = rules['-']) {\n                utils.each(val.split(' '), function (k) {\n                    rules[k] = '-';\n                });\n            }\n            for (var i = 0, ci; ci = root.children[i];) {\n                filterNode(ci, rules);\n                if (ci.parentNode) {\n                    i++;\n                }\n            }\n            return root;\n        };\n    }();\n    ///import core\n    /**\r\n     * @description 插入内容\r\n     * @name baidu.editor.execCommand\r\n     * @param   {String}   cmdName     inserthtml插入内容的命令\r\n     * @param   {String}   html                要插入的内容\r\n     * @author zhanyi\r\n     */\n    UM.commands['inserthtml'] = {\n        execCommand: function execCommand(command, html, notNeedFilter) {\n            var me = this,\n                range,\n                div;\n            if (!html) {\n                return;\n            }\n            if (me.fireEvent('beforeinserthtml', html) === true) {\n                return;\n            }\n            range = me.selection.getRange();\n            div = range.document.createElement('div');\n            div.style.display = 'inline';\n\n            if (!notNeedFilter) {\n                var root = UM.htmlparser(html);\n                //如果给了过滤规则就先进行过滤\n                if (me.options.filterRules) {\n                    UM.filterNode(root, me.options.filterRules);\n                }\n                //执行默认的处理\n                me.filterInputRule(root);\n                html = root.toHtml();\n            }\n            div.innerHTML = utils.trim(html);\n\n            if (!range.collapsed) {\n                var tmpNode = range.startContainer;\n                if (domUtils.isFillChar(tmpNode)) {\n                    range.setStartBefore(tmpNode);\n                }\n                tmpNode = range.endContainer;\n                if (domUtils.isFillChar(tmpNode)) {\n                    range.setEndAfter(tmpNode);\n                }\n                range.txtToElmBoundary();\n                //结束边界可能放到了br的前边，要把br包含进来\n                // x[xxx]<br/>\n                if (range.endContainer && range.endContainer.nodeType == 1) {\n                    tmpNode = range.endContainer.childNodes[range.endOffset];\n                    if (tmpNode && domUtils.isBr(tmpNode)) {\n                        range.setEndAfter(tmpNode);\n                    }\n                }\n                if (range.startOffset == 0) {\n                    tmpNode = range.startContainer;\n                    if (domUtils.isBoundaryNode(tmpNode, 'firstChild')) {\n                        tmpNode = range.endContainer;\n                        if (range.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode, 'lastChild')) {\n                            me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';\n                            range.setStart(me.body.firstChild, 0).collapse(true);\n                        }\n                    }\n                }\n                !range.collapsed && range.deleteContents();\n                if (range.startContainer.nodeType == 1) {\n                    var child = range.startContainer.childNodes[range.startOffset],\n                        pre;\n                    if (child && domUtils.isBlockElm(child) && (pre = child.previousSibling) && domUtils.isBlockElm(pre)) {\n                        range.setEnd(pre, pre.childNodes.length).collapse();\n                        while (child.firstChild) {\n                            pre.appendChild(child.firstChild);\n                        }\n                        domUtils.remove(child);\n                    }\n                }\n            }\n\n            var child,\n                parent,\n                pre,\n                tmp,\n                hadBreak = 0,\n                nextNode;\n            //如果当前位置选中了fillchar要干掉，要不会产生空行\n            if (range.inFillChar()) {\n                child = range.startContainer;\n                if (domUtils.isFillChar(child)) {\n                    range.setStartBefore(child).collapse(true);\n                    domUtils.remove(child);\n                } else if (domUtils.isFillChar(child, true)) {\n                    child.nodeValue = child.nodeValue.replace(fillCharReg, '');\n                    range.startOffset--;\n                    range.collapsed && range.collapse(true);\n                }\n            }\n            while (child = div.firstChild) {\n                if (hadBreak) {\n                    var p = me.document.createElement('p');\n                    while (child && (child.nodeType == 3 || !dtd.$block[child.tagName])) {\n                        nextNode = child.nextSibling;\n                        p.appendChild(child);\n                        child = nextNode;\n                    }\n                    if (p.firstChild) {\n\n                        child = p;\n                    }\n                }\n                range.insertNode(child);\n                nextNode = child.nextSibling;\n                if (!hadBreak && child.nodeType == domUtils.NODE_ELEMENT && domUtils.isBlockElm(child)) {\n\n                    parent = domUtils.findParent(child, function (node) {\n                        return domUtils.isBlockElm(node);\n                    });\n                    if (parent && parent.tagName.toLowerCase() != 'body' && !(dtd[parent.tagName][child.nodeName] && child.parentNode === parent)) {\n                        if (!dtd[parent.tagName][child.nodeName]) {\n                            pre = parent;\n                        } else {\n                            tmp = child.parentNode;\n                            while (tmp !== parent) {\n                                pre = tmp;\n                                tmp = tmp.parentNode;\n                            }\n                        }\n\n                        domUtils.breakParent(child, pre || tmp);\n                        //去掉break后前一个多余的节点  <p>|<[p> ==> <p></p><div></div><p>|</p>\n                        var pre = child.previousSibling;\n                        domUtils.trimWhiteTextNode(pre);\n                        if (!pre.childNodes.length) {\n                            domUtils.remove(pre);\n                        }\n                        //trace:2012,在非ie的情况，切开后剩下的节点有可能不能点入光标添加br占位\n\n                        if (!browser.ie && (next = child.nextSibling) && domUtils.isBlockElm(next) && next.lastChild && !domUtils.isBr(next.lastChild)) {\n                            next.appendChild(me.document.createElement('br'));\n                        }\n                        hadBreak = 1;\n                    }\n                }\n                var next = child.nextSibling;\n                if (!div.firstChild && next && domUtils.isBlockElm(next)) {\n\n                    range.setStart(next, 0).collapse(true);\n                    break;\n                }\n                range.setEndAfter(child).collapse();\n            }\n\n            child = range.startContainer;\n\n            if (nextNode && domUtils.isBr(nextNode)) {\n                domUtils.remove(nextNode);\n            }\n            //用chrome可能有空白展位符\n            if (domUtils.isBlockElm(child) && domUtils.isEmptyNode(child)) {\n                if (nextNode = child.nextSibling) {\n                    domUtils.remove(child);\n                    if (nextNode.nodeType == 1 && dtd.$block[nextNode.tagName]) {\n\n                        range.setStart(nextNode, 0).collapse(true).shrinkBoundary();\n                    }\n                } else {\n\n                    try {\n                        child.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';\n                    } catch (e) {\n                        range.setStartBefore(child);\n                        domUtils.remove(child);\n                    }\n                }\n            }\n            //加上true因为在删除表情等时会删两次，第一次是删的fillData\n            try {\n                if (browser.ie9below && range.startContainer.nodeType == 1 && !range.startContainer.childNodes[range.startOffset]) {\n                    var start = range.startContainer,\n                        pre = start.childNodes[range.startOffset - 1];\n                    if (pre && pre.nodeType == 1 && dtd.$empty[pre.tagName]) {\n                        var txt = this.document.createTextNode(domUtils.fillChar);\n                        range.insertNode(txt).setStart(txt, 0).collapse(true);\n                    }\n                }\n                setTimeout(function () {\n                    range.select(true);\n                });\n            } catch (e) {}\n\n            setTimeout(function () {\n                range = me.selection.getRange();\n                range.scrollIntoView();\n                me.fireEvent('afterinserthtml');\n            }, 200);\n        }\n    };\n\n    ///import core\n    ///import plugins\\inserthtml.js\n    ///commands 插入图片，操作图片的对齐方式\n    ///commandsName  InsertImage,ImageNone,ImageLeft,ImageRight,ImageCenter\n    ///commandsTitle  图片,默认,居左,居右,居中\n    ///commandsDialog  dialogs\\image\n    /**\r\n     * Created by .\r\n     * User: zhanyi\r\n     * for image\r\n     */\n    UM.commands['insertimage'] = {\n        execCommand: function execCommand(cmd, opt) {\n            opt = utils.isArray(opt) ? opt : [opt];\n            if (!opt.length) {\n                return;\n            }\n            var me = this;\n            var html = [],\n                str = '',\n                ci;\n            ci = opt[0];\n            if (opt.length == 1) {\n                str = '<img src=\"' + ci.src + '\" ' + (ci._src ? ' _src=\"' + ci._src + '\" ' : '') + (ci.width ? 'width=\"' + ci.width + '\" ' : '') + (ci.height ? ' height=\"' + ci.height + '\" ' : '') + (ci['floatStyle'] == 'left' || ci['floatStyle'] == 'right' ? ' style=\"float:' + ci['floatStyle'] + ';\"' : '') + (ci.title && ci.title != \"\" ? ' title=\"' + ci.title + '\"' : '') + (ci.border && ci.border != \"0\" ? ' border=\"' + ci.border + '\"' : '') + (ci.alt && ci.alt != \"\" ? ' alt=\"' + ci.alt + '\"' : '') + (ci.hspace && ci.hspace != \"0\" ? ' hspace = \"' + ci.hspace + '\"' : '') + (ci.vspace && ci.vspace != \"0\" ? ' vspace = \"' + ci.vspace + '\"' : '') + '/>';\n                if (ci['floatStyle'] == 'center') {\n                    str = '<p style=\"text-align: center\">' + str + '</p>';\n                }\n                html.push(str);\n            } else {\n                for (var i = 0; ci = opt[i++];) {\n                    str = '<p ' + (ci['floatStyle'] == 'center' ? 'style=\"text-align: center\" ' : '') + '><img src=\"' + ci.src + '\" ' + (ci.width ? 'width=\"' + ci.width + '\" ' : '') + (ci._src ? ' _src=\"' + ci._src + '\" ' : '') + (ci.height ? ' height=\"' + ci.height + '\" ' : '') + ' style=\"' + (ci['floatStyle'] && ci['floatStyle'] != 'center' ? 'float:' + ci['floatStyle'] + ';' : '') + (ci.border || '') + '\" ' + (ci.title ? ' title=\"' + ci.title + '\"' : '') + ' /></p>';\n                    html.push(str);\n                }\n            }\n\n            me.execCommand('insertHtml', html.join(''), true);\n        }\n    };\n    ///import core\n    ///commands 段落格式,居左,居右,居中,两端对齐\n    ///commandsName  JustifyLeft,JustifyCenter,JustifyRight,JustifyJustify\n    ///commandsTitle  居左对齐,居中对齐,居右对齐,两端对齐\n    /**\r\n     * @description 居左右中\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     justify执行对齐方式的命令\r\n     * @param   {String}   align               对齐方式：left居左，right居右，center居中，justify两端对齐\r\n     * @author zhanyi\r\n     */\n    UM.plugins['justify'] = function () {\n        var me = this;\n        $.each('justifyleft justifyright justifycenter justifyfull'.split(' '), function (i, cmdName) {\n            me.commands[cmdName] = {\n                execCommand: function execCommand(cmdName) {\n                    return this.document.execCommand(cmdName);\n                },\n                queryCommandValue: function queryCommandValue(cmdName) {\n                    var val = this.document.queryCommandValue(cmdName);\n                    return val === true || val === 'true' ? cmdName.replace(/justify/, '') : '';\n                },\n                queryCommandState: function queryCommandState(cmdName) {\n                    return this.document.queryCommandState(cmdName) ? 1 : 0;\n                }\n            };\n        });\n    };\n\n    ///import core\n    ///import plugins\\removeformat.js\n    ///commands 字体颜色,背景色,字号,字体,下划线,删除线\n    ///commandsName  ForeColor,BackColor,FontSize,FontFamily,Underline,StrikeThrough\n    ///commandsTitle  字体颜色,背景色,字号,字体,下划线,删除线\n    /**\r\n     * @description 字体\r\n     * @name UM.execCommand\r\n     * @param {String}     cmdName    执行的功能名称\r\n     * @param {String}    value             传入的值\r\n     */\n    UM.plugins['font'] = function () {\n        var me = this,\n            fonts = {\n            'forecolor': 'forecolor',\n            'backcolor': 'backcolor',\n            'fontsize': 'fontsize',\n            'fontfamily': 'fontname'\n        },\n            cmdNameToStyle = {\n            'forecolor': 'color',\n            'backcolor': 'background-color',\n            'fontsize': 'font-size',\n            'fontfamily': 'font-family'\n        },\n            cmdNameToAttr = {\n            'forecolor': 'color',\n            'fontsize': 'size',\n            'fontfamily': 'face'\n        };\n        me.setOpt({\n            'fontfamily': [{ name: 'songti', val: '宋体,SimSun' }, { name: 'yahei', val: '微软雅黑,Microsoft YaHei' }, { name: 'kaiti', val: '楷体,楷体_GB2312, SimKai' }, { name: 'heiti', val: '黑体, SimHei' }, { name: 'lishu', val: '隶书, SimLi' }, { name: 'andaleMono', val: 'andale mono' }, { name: 'arial', val: 'arial, helvetica,sans-serif' }, { name: 'arialBlack', val: 'arial black,avant garde' }, { name: 'comicSansMs', val: 'comic sans ms' }, { name: 'impact', val: 'impact,chicago' }, { name: 'timesNewRoman', val: 'times new roman' }, { name: 'sans-serif', val: 'sans-serif' }],\n            'fontsize': [10, 12, 16, 18, 24, 32, 48]\n        });\n\n        me.addOutputRule(function (root) {\n            utils.each(root.getNodesByTagName('font'), function (node) {\n                if (node.tagName == 'font') {\n                    var cssStyle = [];\n                    for (var p in node.attrs) {\n                        switch (p) {\n                            case 'size':\n                                var val = node.attrs[p];\n                                $.each({\n                                    '10': '1',\n                                    '12': '2',\n                                    '16': '3',\n                                    '18': '4',\n                                    '24': '5',\n                                    '32': '6',\n                                    '48': '7'\n                                }, function (k, v) {\n                                    if (v == val) {\n                                        val = k;\n                                        return false;\n                                    }\n                                });\n                                cssStyle.push('font-size:' + val + 'px');\n                                break;\n                            case 'color':\n                                cssStyle.push('color:' + node.attrs[p]);\n                                break;\n                            case 'face':\n                                cssStyle.push('font-family:' + node.attrs[p]);\n                                break;\n                            case 'style':\n                                cssStyle.push(node.attrs[p]);\n                        }\n                    }\n                    node.attrs = {\n                        'style': cssStyle.join(';')\n                    };\n                }\n                node.tagName = 'span';\n                if (node.parentNode.tagName == 'span' && node.parentNode.children.length == 1) {\n                    $.each(node.attrs, function (k, v) {\n\n                        node.parentNode.attrs[k] = k == 'style' ? node.parentNode.attrs[k] + v : v;\n                    });\n                    node.parentNode.removeChild(node, true);\n                }\n            });\n        });\n        for (var p in fonts) {\n            (function (cmd) {\n                me.commands[cmd] = {\n                    execCommand: function execCommand(cmdName, value) {\n                        if (value == 'transparent') {\n                            return;\n                        }\n                        var rng = this.selection.getRange();\n                        if (rng.collapsed) {\n                            var span = $('<span></span>').css(cmdNameToStyle[cmdName], value)[0];\n                            rng.insertNode(span).setStart(span, 0).setCursor();\n                        } else {\n                            if (cmdName == 'fontsize') {\n                                value = {\n                                    '10': '1',\n                                    '12': '2',\n                                    '16': '3',\n                                    '18': '4',\n                                    '24': '5',\n                                    '32': '6',\n                                    '48': '7'\n                                }[(value + \"\").replace(/px/, '')];\n                            }\n                            this.document.execCommand(fonts[cmdName], false, value);\n                            if (browser.gecko) {\n                                $.each(this.$body.find('a'), function (i, a) {\n                                    var parent = a.parentNode;\n                                    if (parent.lastChild === parent.firstChild && /FONT|SPAN/.test(parent.tagName)) {\n                                        var cloneNode = parent.cloneNode(false);\n                                        cloneNode.innerHTML = a.innerHTML;\n                                        $(a).html('').append(cloneNode).insertBefore(parent);\n\n                                        $(parent).remove();\n                                    }\n                                });\n                            }\n                            if (!browser.ie) {\n                                var nativeRange = this.selection.getNative().getRangeAt(0);\n                                var common = nativeRange.commonAncestorContainer;\n                                var rng = this.selection.getRange(),\n                                    bk = rng.createBookmark(true);\n\n                                $(common).find('a').each(function (i, n) {\n                                    var parent = n.parentNode;\n                                    if (parent.nodeName == 'FONT') {\n                                        var font = parent.cloneNode(false);\n                                        font.innerHTML = n.innerHTML;\n                                        $(n).html('').append(font);\n                                    }\n                                });\n                                rng.moveToBookmark(bk).select();\n                            }\n                            return true;\n                        }\n                    },\n                    queryCommandValue: function queryCommandValue(cmdName) {\n                        var start = me.selection.getStart();\n                        var val = $(start).css(cmdNameToStyle[cmdName]);\n                        if (val === undefined) {\n                            val = $(start).attr(cmdNameToAttr[cmdName]);\n                        }\n                        return val ? utils.fixColor(cmdName, val).replace(/px/, '') : '';\n                    },\n                    queryCommandState: function queryCommandState(cmdName) {\n                        return this.queryCommandValue(cmdName);\n                    }\n                };\n            })(p);\n        }\n    };\n    ///import core\n    ///commands 超链接,取消链接\n    ///commandsName  Link,Unlink\n    ///commandsTitle  超链接,取消链接\n    ///commandsDialog  dialogs\\link\n    /**\r\n     * 超链接\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     link插入超链接\r\n     * @param   {Object}  options         url地址，title标题，target是否打开新页\r\n     * @author zhanyi\r\n     */\n    /**\r\n     * 取消链接\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     unlink取消链接\r\n     * @author zhanyi\r\n     */\n\n    UM.plugins['link'] = function () {\n        var me = this;\n\n        me.setOpt('autourldetectinie', false);\n        //在ie下禁用autolink\n        if (browser.ie && this.options.autourldetectinie === false) {\n            this.addListener('keyup', function (cmd, evt) {\n                var me = this,\n                    keyCode = evt.keyCode;\n                if (keyCode == 13 || keyCode == 32) {\n                    var rng = me.selection.getRange();\n                    var start = rng.startContainer;\n                    if (keyCode == 13) {\n                        if (start.nodeName == 'P') {\n                            var pre = start.previousSibling;\n                            if (pre && pre.nodeType == 1) {\n                                var pre = pre.lastChild;\n                                if (pre && pre.nodeName == 'A' && !pre.getAttribute('_href')) {\n                                    domUtils.remove(pre, true);\n                                }\n                            }\n                        }\n                    } else if (keyCode == 32) {\n                        if (start.nodeType == 3 && /^\\s$/.test(start.nodeValue)) {\n                            start = start.previousSibling;\n                            if (start && start.nodeName == 'A' && !start.getAttribute('_href')) {\n                                domUtils.remove(start, true);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n        this.addOutputRule(function (root) {\n            $.each(root.getNodesByTagName('a'), function (i, a) {\n                var _href = utils.html(a.getAttr('_href'));\n                if (!/^(ftp|https?|\\/|file)/.test(_href)) {\n                    _href = 'http://' + _href;\n                }\n                a.setAttr('href', _href);\n                a.setAttr('_href');\n                if (a.getAttr('title') == '') {\n                    a.setAttr('title');\n                }\n            });\n        });\n        this.addInputRule(function (root) {\n            $.each(root.getNodesByTagName('a'), function (i, a) {\n                a.setAttr('_href', utils.html(a.getAttr('href')));\n            });\n        });\n        me.commands['link'] = {\n            execCommand: function execCommand(cmdName, opt) {\n\n                var me = this;\n                var rng = me.selection.getRange();\n                if (rng.collapsed) {\n                    var start = rng.startContainer;\n                    if (start = domUtils.findParentByTagName(start, 'a', true)) {\n                        $(start).attr(opt);\n                        rng.selectNode(start).select();\n                    } else {\n                        rng.insertNode($('<a>' + opt.href + '</a>').attr(opt)[0]).select();\n                    }\n                } else {\n                    me.document.execCommand('createlink', false, '_umeditor_link');\n                    utils.each(domUtils.getElementsByTagName(me.body, 'a', function (n) {\n\n                        return n.getAttribute('href') == '_umeditor_link';\n                    }), function (l) {\n                        if ($(l).text() == '_umeditor_link') {\n                            $(l).text(opt.href);\n                        }\n                        domUtils.setAttributes(l, opt);\n                        rng.selectNode(l).select();\n                    });\n                }\n            },\n            queryCommandState: function queryCommandState() {\n                return this.queryCommandValue('link') ? 1 : 0;\n            },\n            queryCommandValue: function queryCommandValue() {\n                var path = this.selection.getStartElementPath();\n                var result;\n                $.each(path, function (i, n) {\n                    if (n.nodeName == \"A\") {\n                        result = n;\n                        return false;\n                    }\n                });\n                return result;\n            }\n        };\n        me.commands['unlink'] = {\n            execCommand: function execCommand() {\n                this.document.execCommand('unlink');\n            }\n        };\n    };\n    ///import core\n    ///commands 打印\n    ///commandsName  Print\n    ///commandsTitle  打印\n    /**\r\n     * @description 打印\r\n     * @name baidu.editor.execCommand\r\n     * @param   {String}   cmdName     print打印编辑器内容\r\n     * @author zhanyi\r\n     */\n    UM.commands['print'] = {\n        execCommand: function execCommand() {\n            var me = this,\n                id = 'editor_print_' + +new Date();\n\n            $('<iframe src=\"\" id=\"' + id + '\" name=\"' + id + '\" frameborder=\"0\"></iframe>').attr('id', id).css({\n                width: '0px',\n                height: '0px',\n                'overflow': 'hidden',\n                'float': 'left',\n                'position': 'absolute',\n                top: '-10000px',\n                left: '-10000px'\n            }).appendTo(me.$container.find('.edui-dialog-container'));\n\n            var w = window.open('', id, ''),\n                d = w.document;\n            d.open();\n            d.write('<html><head></head><body><div>' + this.getContent(null, null, true) + '</div><script>' + \"setTimeout(function(){\" + \"window.print();\" + \"setTimeout(function(){\" + \"window.parent.$('#\" + id + \"').remove();\" + \"},100);\" + \"},200);\" + '</script></body></html>');\n            d.close();\n        },\n        notNeedUndo: 1\n    };\n    ///import core\n    ///commands 格式\n    ///commandsName  Paragraph\n    ///commandsTitle  段落格式\n    /**\r\n     * 段落样式\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     paragraph插入段落执行命令\r\n     * @param   {String}   style               标签值为：'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'\r\n     * @param   {String}   attrs               标签的属性\r\n     * @author zhanyi\r\n     */\n    UM.plugins['paragraph'] = function () {\n        var me = this;\n        me.setOpt('paragraph', { 'p': '', 'h1': '', 'h2': '', 'h3': '', 'h4': '', 'h5': '', 'h6': '' });\n        me.commands['paragraph'] = {\n            execCommand: function execCommand(cmdName, style) {\n                return this.document.execCommand('formatBlock', false, '<' + style + '>');\n            },\n            queryCommandValue: function queryCommandValue() {\n                try {\n                    var val = this.document.queryCommandValue('formatBlock');\n                } catch (e) {}\n                return val;\n            }\n        };\n    };\n\n    ///import core\n    ///import plugins\\inserthtml.js\n    ///commands 分割线\n    ///commandsName  Horizontal\n    ///commandsTitle  分隔线\n    /**\r\n     * 分割线\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param {String}     cmdName    horizontal插入分割线\r\n     */\n    UM.plugins['horizontal'] = function () {\n        var me = this;\n        me.commands['horizontal'] = {\n            execCommand: function execCommand() {\n                this.document.execCommand('insertHorizontalRule');\n                var rng = me.selection.getRange().txtToElmBoundary(true),\n                    start = rng.startContainer;\n                if (domUtils.isBody(rng.startContainer)) {\n                    var next = rng.startContainer.childNodes[rng.startOffset];\n                    if (!next) {\n                        next = $('<p></p>').appendTo(rng.startContainer).html(browser.ie ? '&nbsp;' : '<br/>')[0];\n                    }\n                    rng.setStart(next, 0).setCursor();\n                } else {\n\n                    while (dtd.$inline[start.tagName] && start.lastChild === start.firstChild) {\n\n                        var parent = start.parentNode;\n                        parent.appendChild(start.firstChild);\n                        parent.removeChild(start);\n                        start = parent;\n                    }\n                    while (dtd.$inline[start.tagName]) {\n                        start = start.parentNode;\n                    }\n                    if (start.childNodes.length == 1 && start.lastChild.nodeName == 'HR') {\n                        var hr = start.lastChild;\n                        $(hr).insertBefore(start);\n                        rng.setStart(start, 0).setCursor();\n                    } else {\n                        hr = $('hr', start)[0];\n                        domUtils.breakParent(hr, start);\n                        var pre = hr.previousSibling;\n                        if (pre && domUtils.isEmptyBlock(pre)) {\n                            $(pre).remove();\n                        }\n                        rng.setStart(hr.nextSibling, 0).setCursor();\n                    }\n                }\n            }\n        };\n    };\n\n    ///import core\n    ///commands 清空文档\n    ///commandsName  ClearDoc\n    ///commandsTitle  清空文档\n    /**\r\n     *\r\n     * 清空文档\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     cleardoc清空文档\r\n     */\n\n    UM.commands['cleardoc'] = {\n        execCommand: function execCommand() {\n            var me = this,\n                range = me.selection.getRange();\n            me.body.innerHTML = \"<p>\" + (ie ? \"\" : \"<br/>\") + \"</p>\";\n            range.setStart(me.body.firstChild, 0).setCursor(false, true);\n            setTimeout(function () {\n                me.fireEvent(\"clearDoc\");\n            }, 0);\n        }\n    };\n\n    ///import core\n    ///commands 撤销和重做\n    ///commandsName  Undo,Redo\n    ///commandsTitle  撤销,重做\n    /**\r\n     * @description 回退\r\n     * @author zhanyi\r\n     */\n\n    UM.plugins['undo'] = function () {\n        var saveSceneTimer;\n        var me = this,\n            maxUndoCount = me.options.maxUndoCount || 20,\n            maxInputCount = me.options.maxInputCount || 20,\n            fillchar = new RegExp(domUtils.fillChar + '|<\\/hr>', 'gi'); // ie会产生多余的</hr>\n        var noNeedFillCharTags = {\n            ol: 1, ul: 1, table: 1, tbody: 1, tr: 1, body: 1\n        };\n        var orgState = me.options.autoClearEmptyNode;\n        function compareAddr(indexA, indexB) {\n            if (indexA.length != indexB.length) return 0;\n            for (var i = 0, l = indexA.length; i < l; i++) {\n                if (indexA[i] != indexB[i]) return 0;\n            }\n            return 1;\n        }\n\n        function compareRangeAddress(rngAddrA, rngAddrB) {\n            if (rngAddrA.collapsed != rngAddrB.collapsed) {\n                return 0;\n            }\n            if (!compareAddr(rngAddrA.startAddress, rngAddrB.startAddress) || !compareAddr(rngAddrA.endAddress, rngAddrB.endAddress)) {\n                return 0;\n            }\n            return 1;\n        }\n\n        function UndoManager() {\n            this.list = [];\n            this.index = 0;\n            this.hasUndo = false;\n            this.hasRedo = false;\n            this.undo = function () {\n                if (this.hasUndo) {\n                    if (!this.list[this.index - 1] && this.list.length == 1) {\n                        this.reset();\n                        return;\n                    }\n                    while (this.list[this.index].content == this.list[this.index - 1].content) {\n                        this.index--;\n                        if (this.index == 0) {\n                            return this.restore(0);\n                        }\n                    }\n                    this.restore(--this.index);\n                }\n            };\n            this.redo = function () {\n                if (this.hasRedo) {\n                    while (this.list[this.index].content == this.list[this.index + 1].content) {\n                        this.index++;\n                        if (this.index == this.list.length - 1) {\n                            return this.restore(this.index);\n                        }\n                    }\n                    this.restore(++this.index);\n                }\n            };\n\n            this.restore = function () {\n                var me = this.editor;\n                var scene = this.list[this.index];\n                var root = UM.htmlparser(scene.content.replace(fillchar, ''));\n                me.options.autoClearEmptyNode = false;\n                me.filterInputRule(root, true);\n                me.options.autoClearEmptyNode = orgState;\n                //trace:873\n                //去掉展位符\n                me.body.innerHTML = root.toHtml();\n                me.fireEvent('afterscencerestore');\n                //处理undo后空格不展位的问题\n                if (browser.ie) {\n                    utils.each(domUtils.getElementsByTagName(me.document, 'td th caption p'), function (node) {\n                        if (domUtils.isEmptyNode(node)) {\n                            domUtils.fillNode(me.document, node);\n                        }\n                    });\n                }\n\n                try {\n                    var rng = new dom.Range(me.document, me.body).moveToAddress(scene.address);\n                    if (browser.ie && rng.collapsed && rng.startContainer.nodeType == 1) {\n                        var tmpNode = rng.startContainer.childNodes[rng.startOffset];\n                        if (!tmpNode || tmpNode.nodeType == 1 && dtd.$empty[tmpNode]) {\n                            rng.insertNode(me.document.createTextNode(' ')).collapse(true);\n                        }\n                    }\n                    rng.select(noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]);\n                } catch (e) {}\n\n                this.update();\n                this.clearKey();\n                //不能把自己reset了\n                me.fireEvent('reset', true);\n            };\n\n            this.getScene = function () {\n                var me = this.editor;\n                var rng = me.selection.getRange(),\n                    rngAddress = rng.createAddress(false, true);\n                me.fireEvent('beforegetscene');\n                var root = UM.htmlparser(me.body.innerHTML, true);\n                me.options.autoClearEmptyNode = false;\n                me.filterOutputRule(root, true);\n                me.options.autoClearEmptyNode = orgState;\n                var cont = root.toHtml();\n                browser.ie && (cont = cont.replace(/>&nbsp;</g, '><').replace(/\\s*</g, '<').replace(/>\\s*/g, '>'));\n                me.fireEvent('aftergetscene');\n                return {\n                    address: rngAddress,\n                    content: cont\n                };\n            };\n            this.save = function (notCompareRange, notSetCursor) {\n                clearTimeout(saveSceneTimer);\n                var currentScene = this.getScene(notSetCursor),\n                    lastScene = this.list[this.index];\n                //内容相同位置相同不存\n                if (lastScene && lastScene.content == currentScene.content && (notCompareRange ? 1 : compareRangeAddress(lastScene.address, currentScene.address))) {\n                    return;\n                }\n                this.list = this.list.slice(0, this.index + 1);\n                this.list.push(currentScene);\n                //如果大于最大数量了，就把最前的剔除\n                if (this.list.length > maxUndoCount) {\n                    this.list.shift();\n                }\n                this.index = this.list.length - 1;\n                this.clearKey();\n                //跟新undo/redo状态\n                this.update();\n            };\n            this.update = function () {\n                this.hasRedo = !!this.list[this.index + 1];\n                this.hasUndo = !!this.list[this.index - 1];\n            };\n            this.reset = function () {\n                this.list = [];\n                this.index = 0;\n                this.hasUndo = false;\n                this.hasRedo = false;\n                this.clearKey();\n            };\n            this.clearKey = function () {\n                keycont = 0;\n                lastKeyCode = null;\n            };\n        }\n\n        me.undoManger = new UndoManager();\n        me.undoManger.editor = me;\n        function saveScene() {\n            this.undoManger.save();\n        }\n\n        me.addListener('saveScene', function () {\n            var args = Array.prototype.splice.call(arguments, 1);\n            this.undoManger.save.apply(this.undoManger, args);\n        });\n\n        me.addListener('beforeexeccommand', saveScene);\n        me.addListener('afterexeccommand', saveScene);\n\n        me.addListener('reset', function (type, exclude) {\n            if (!exclude) {\n                this.undoManger.reset();\n            }\n        });\n        me.commands['redo'] = me.commands['undo'] = {\n            execCommand: function execCommand(cmdName) {\n                this.undoManger[cmdName]();\n            },\n            queryCommandState: function queryCommandState(cmdName) {\n                return this.undoManger['has' + (cmdName.toLowerCase() == 'undo' ? 'Undo' : 'Redo')] ? 0 : -1;\n            },\n            notNeedUndo: 1\n        };\n\n        var keys = {\n            //  /*Backspace*/ 8:1, /*Delete*/ 46:1,\n            /*Shift*/16: 1, /*Ctrl*/17: 1, /*Alt*/18: 1,\n            37: 1, 38: 1, 39: 1, 40: 1\n\n        },\n            keycont = 0,\n            lastKeyCode;\n        //输入法状态下不计算字符数\n        var inputType = false;\n        me.addListener('ready', function () {\n            $(this.body).on('compositionstart', function () {\n                inputType = true;\n            }).on('compositionend', function () {\n                inputType = false;\n            });\n        });\n        //快捷键\n        me.addshortcutkey({\n            \"Undo\": \"ctrl+90\", //undo\n            \"Redo\": \"ctrl+89,shift+ctrl+z\" //redo\n\n        });\n        var isCollapsed = true;\n        me.addListener('keydown', function (type, evt) {\n\n            var me = this;\n            var keyCode = evt.keyCode || evt.which;\n            if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {\n                var save = function save(cont) {\n\n                    if (cont.selection.getRange().collapsed) cont.fireEvent('contentchange');\n                    cont.undoManger.save(false, true);\n                    cont.fireEvent('selectionchange');\n                };\n\n                if (inputType) return;\n\n                if (!me.selection.getRange().collapsed) {\n                    me.undoManger.save(false, true);\n                    isCollapsed = false;\n                    return;\n                }\n                if (me.undoManger.list.length == 0) {\n                    me.undoManger.save(true);\n                }\n                clearTimeout(saveSceneTimer);\n\n                saveSceneTimer = setTimeout(function () {\n                    if (inputType) {\n                        var interalTimer = setInterval(function () {\n                            if (!inputType) {\n                                save(me);\n                                clearInterval(interalTimer);\n                            }\n                        }, 300);\n                        return;\n                    }\n                    save(me);\n                }, 200);\n\n                lastKeyCode = keyCode;\n                keycont++;\n                if (keycont >= maxInputCount) {\n                    save(me);\n                }\n            }\n        });\n        me.addListener('keyup', function (type, evt) {\n            var keyCode = evt.keyCode || evt.which;\n            if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {\n                if (inputType) return;\n                if (!isCollapsed) {\n                    this.undoManger.save(false, true);\n                    isCollapsed = true;\n                }\n            }\n        });\n    };\n\n    ///import core\n    ///import plugins/inserthtml.js\n    ///import plugins/undo.js\n    ///import plugins/serialize.js\n    ///commands 粘贴\n    ///commandsName  PastePlain\n    ///commandsTitle  纯文本粘贴模式\n    /**\r\n     * @description 粘贴\r\n     * @author zhanyi\r\n     */\n    UM.plugins['paste'] = function () {\n        function getClipboardData(callback) {\n            var doc = this.document;\n            if (doc.getElementById('baidu_pastebin')) {\n                return;\n            }\n            var range = this.selection.getRange(),\n                bk = range.createBookmark(),\n\n            //创建剪贴的容器div\n            pastebin = doc.createElement('div');\n            pastebin.id = 'baidu_pastebin';\n            // Safari 要求div必须有内容，才能粘贴内容进来\n            browser.webkit && pastebin.appendChild(doc.createTextNode(domUtils.fillChar + domUtils.fillChar));\n            this.body.appendChild(pastebin);\n            //trace:717 隐藏的span不能得到top\n            //bk.start.innerHTML = '&nbsp;';\n            bk.start.style.display = '';\n\n            pastebin.style.cssText = \"position:absolute;width:1px;height:1px;overflow:hidden;left:-1000px;white-space:nowrap;top:\" +\n            //要在现在光标平行的位置加入，否则会出现跳动的问题\n            $(bk.start).position().top + 'px';\n\n            range.selectNodeContents(pastebin).select(true);\n\n            setTimeout(function () {\n                if (browser.webkit) {\n                    for (var i = 0, pastebins = doc.querySelectorAll('#baidu_pastebin'), pi; pi = pastebins[i++];) {\n                        if (domUtils.isEmptyNode(pi)) {\n                            domUtils.remove(pi);\n                        } else {\n                            pastebin = pi;\n                            break;\n                        }\n                    }\n                }\n                try {\n                    pastebin.parentNode.removeChild(pastebin);\n                } catch (e) {}\n                range.moveToBookmark(bk).select(true);\n                callback(pastebin);\n            }, 0);\n        }\n\n        var me = this;\n\n        function filter(div) {\n            var html;\n            if (div.firstChild) {\n                //去掉cut中添加的边界值\n                var nodes = domUtils.getElementsByTagName(div, 'span');\n                for (var i = 0, ni; ni = nodes[i++];) {\n                    if (ni.id == '_baidu_cut_start' || ni.id == '_baidu_cut_end') {\n                        domUtils.remove(ni);\n                    }\n                }\n\n                if (browser.webkit) {\n\n                    var brs = div.querySelectorAll('div br');\n                    for (var i = 0, bi; bi = brs[i++];) {\n                        var pN = bi.parentNode;\n                        if (pN.tagName == 'DIV' && pN.childNodes.length == 1) {\n                            pN.innerHTML = '<p><br/></p>';\n                            domUtils.remove(pN);\n                        }\n                    }\n                    var divs = div.querySelectorAll('#baidu_pastebin');\n                    for (var i = 0, di; di = divs[i++];) {\n                        var tmpP = me.document.createElement('p');\n                        di.parentNode.insertBefore(tmpP, di);\n                        while (di.firstChild) {\n                            tmpP.appendChild(di.firstChild);\n                        }\n                        domUtils.remove(di);\n                    }\n\n                    var metas = div.querySelectorAll('meta');\n                    for (var i = 0, ci; ci = metas[i++];) {\n                        domUtils.remove(ci);\n                    }\n\n                    var brs = div.querySelectorAll('br');\n                    for (i = 0; ci = brs[i++];) {\n                        if (/^apple-/i.test(ci.className)) {\n                            domUtils.remove(ci);\n                        }\n                    }\n                }\n                if (browser.gecko) {\n                    var dirtyNodes = div.querySelectorAll('[_moz_dirty]');\n                    for (i = 0; ci = dirtyNodes[i++];) {\n                        ci.removeAttribute('_moz_dirty');\n                    }\n                }\n                if (!browser.ie) {\n                    var spans = div.querySelectorAll('span.Apple-style-span');\n                    for (var i = 0, ci; ci = spans[i++];) {\n                        domUtils.remove(ci, true);\n                    }\n                }\n\n                //ie下使用innerHTML会产生多余的\\r\\n字符，也会产生&nbsp;这里过滤掉\n                html = div.innerHTML; //.replace(/>(?:(\\s|&nbsp;)*?)</g,'><');\n\n                //过滤word粘贴过来的冗余属性\n                html = UM.filterWord(html);\n                //取消了忽略空白的第二个参数，粘贴过来的有些是有空白的，会被套上相关的标签\n                var root = UM.htmlparser(html);\n                //如果给了过滤规则就先进行过滤\n                if (me.options.filterRules) {\n                    UM.filterNode(root, me.options.filterRules);\n                }\n                //执行默认的处理\n                me.filterInputRule(root);\n                //针对chrome的处理\n                if (browser.webkit) {\n                    var br = root.lastChild();\n                    if (br && br.type == 'element' && br.tagName == 'br') {\n                        root.removeChild(br);\n                    }\n                    utils.each(me.body.querySelectorAll('div'), function (node) {\n                        if (domUtils.isEmptyBlock(node)) {\n                            domUtils.remove(node);\n                        }\n                    });\n                }\n                html = { 'html': root.toHtml() };\n                me.fireEvent('beforepaste', html, root);\n                //抢了默认的粘贴，那后边的内容就不执行了，比如表格粘贴\n                if (!html.html) {\n                    return;\n                }\n\n                me.execCommand('insertHtml', html.html, true);\n                me.fireEvent(\"afterpaste\", html);\n            }\n        }\n\n        me.addListener('ready', function () {\n            $(me.body).on('cut', function () {\n                var range = me.selection.getRange();\n                if (!range.collapsed && me.undoManger) {\n                    me.undoManger.save();\n                }\n            }).on(browser.ie || browser.opera ? 'keydown' : 'paste', function (e) {\n                //ie下beforepaste在点击右键时也会触发，所以用监控键盘才处理\n                if ((browser.ie || browser.opera) && (!e.ctrlKey && !e.metaKey || e.keyCode != '86')) {\n                    return;\n                }\n                getClipboardData.call(me, function (div) {\n                    filter(div);\n                });\n            });\n        });\n    };\n\n    ///import core\n    ///commands 有序列表,无序列表\n    ///commandsName  InsertOrderedList,InsertUnorderedList\n    ///commandsTitle  有序列表,无序列表\n    /**\r\n     * 有序列表\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     insertorderlist插入有序列表\r\n     * @param   {String}   style               值为：decimal,lower-alpha,lower-roman,upper-alpha,upper-roman\r\n     * @author zhanyi\r\n     */\n    /**\r\n     * 无序链接\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     insertunorderlist插入无序列表\r\n     * * @param   {String}   style            值为：circle,disc,square\r\n     * @author zhanyi\r\n     */\n\n    UM.plugins['list'] = function () {\n        var me = this;\n\n        me.setOpt({\n            'insertorderedlist': {\n                'decimal': '',\n                'lower-alpha': '',\n                'lower-roman': '',\n                'upper-alpha': '',\n                'upper-roman': ''\n            },\n            'insertunorderedlist': {\n                'circle': '',\n                'disc': '',\n                'square': ''\n            }\n        });\n\n        this.addInputRule(function (root) {\n            utils.each(root.getNodesByTagName('li'), function (node) {\n                if (node.children.length == 0) {\n                    node.parentNode.removeChild(node);\n                }\n            });\n        });\n        me.commands['insertorderedlist'] = me.commands['insertunorderedlist'] = {\n            execCommand: function execCommand(cmdName) {\n                this.document.execCommand(cmdName);\n                var rng = this.selection.getRange(),\n                    bk = rng.createBookmark(true);\n\n                this.$body.find('ol,ul').each(function (i, n) {\n                    var parent = n.parentNode;\n                    if (parent.tagName == 'P' && parent.lastChild === parent.firstChild) {\n                        $(n).children().each(function (j, li) {\n                            var p = parent.cloneNode(false);\n                            $(p).append(li.innerHTML);\n                            $(li).html('').append(p);\n                        });\n                        $(n).insertBefore(parent);\n                        $(parent).remove();\n                    }\n\n                    if (dtd.$inline[parent.tagName]) {\n                        if (parent.tagName == 'SPAN') {\n\n                            $(n).children().each(function (k, li) {\n                                var span = parent.cloneNode(false);\n                                if (li.firstChild.nodeName != 'P') {\n\n                                    while (li.firstChild) {\n                                        span.appendChild(li.firstChild);\n                                    };\n                                    $('<p></p>').appendTo(li).append(span);\n                                } else {\n                                    while (li.firstChild) {\n                                        span.appendChild(li.firstChild);\n                                    };\n                                    $(li.firstChild).append(span);\n                                }\n                            });\n                        }\n                        domUtils.remove(parent, true);\n                    }\n                });\n\n                rng.moveToBookmark(bk).select();\n                return true;\n            },\n            queryCommandState: function queryCommandState(cmdName) {\n                return this.document.queryCommandState(cmdName);\n            }\n        };\n    };\n\n    ///import core\n    ///import plugins/serialize.js\n    ///import plugins/undo.js\n    ///commands 查看源码\n    ///commandsName  Source\n    ///commandsTitle  查看源码\n    (function () {\n        var sourceEditors = {\n            textarea: function textarea(editor, holder) {\n                var textarea = holder.ownerDocument.createElement('textarea');\n                textarea.style.cssText = 'resize:none;border:0;padding:0;margin:0;overflow-y:auto;outline:0';\n                // todo: IE下只有onresize属性可用... 很纠结\n                if (browser.ie && browser.version < 8) {\n\n                    textarea.style.width = holder.offsetWidth + 'px';\n                    textarea.style.height = holder.offsetHeight + 'px';\n                    holder.onresize = function () {\n                        textarea.style.width = holder.offsetWidth + 'px';\n                        textarea.style.height = holder.offsetHeight + 'px';\n                    };\n                }\n                holder.appendChild(textarea);\n                return {\n                    container: textarea,\n                    setContent: function setContent(content) {\n                        textarea.value = content;\n                    },\n                    getContent: function getContent() {\n                        return textarea.value;\n                    },\n                    select: function select() {\n                        var range;\n                        if (browser.ie) {\n                            range = textarea.createTextRange();\n                            range.collapse(true);\n                            range.select();\n                        } else {\n                            //todo: chrome下无法设置焦点\n                            textarea.setSelectionRange(0, 0);\n                            textarea.focus();\n                        }\n                    },\n                    dispose: function dispose() {\n                        holder.removeChild(textarea);\n                        // todo\n                        holder.onresize = null;\n                        textarea = null;\n                        holder = null;\n                    }\n                };\n            }\n        };\n\n        UM.plugins['source'] = function () {\n            var me = this;\n            var opt = this.options;\n            var sourceMode = false;\n            var sourceEditor;\n\n            opt.sourceEditor = 'textarea';\n\n            me.setOpt({\n                sourceEditorFirst: false\n            });\n            function createSourceEditor(holder) {\n                return sourceEditors.textarea(me, holder);\n            }\n\n            var bakCssText;\n            //解决在源码模式下getContent不能得到最新的内容问题\n            var oldGetContent = me.getContent,\n                bakAddress;\n\n            me.commands['source'] = {\n                execCommand: function execCommand() {\n\n                    sourceMode = !sourceMode;\n                    if (sourceMode) {\n                        bakAddress = me.selection.getRange().createAddress(false, true);\n                        me.undoManger && me.undoManger.save(true);\n                        if (browser.gecko) {\n                            me.body.contentEditable = false;\n                        }\n\n                        //                    bakCssText = me.body.style.cssText;\n                        me.body.style.cssText += ';position:absolute;left:-32768px;top:-32768px;';\n\n                        me.fireEvent('beforegetcontent');\n                        var root = UM.htmlparser(me.body.innerHTML);\n                        me.filterOutputRule(root);\n                        root.traversal(function (node) {\n                            if (node.type == 'element') {\n                                switch (node.tagName) {\n                                    case 'td':\n                                    case 'th':\n                                    case 'caption':\n                                        if (node.children && node.children.length == 1) {\n                                            if (node.firstChild().tagName == 'br') {\n                                                node.removeChild(node.firstChild());\n                                            }\n                                        };\n                                        break;\n                                    case 'pre':\n                                        node.innerText(node.innerText().replace(/&nbsp;/g, ' '));\n\n                                }\n                            }\n                        });\n\n                        me.fireEvent('aftergetcontent');\n\n                        var content = root.toHtml(true);\n\n                        sourceEditor = createSourceEditor(me.body.parentNode);\n\n                        sourceEditor.setContent(content);\n\n                        var getStyleValue = function getStyleValue(attr) {\n                            return parseInt($(me.body).css(attr));\n                        };\n                        $(sourceEditor.container).width($(me.body).width() + getStyleValue(\"padding-left\") + getStyleValue(\"padding-right\")).height($(me.body).height());\n                        setTimeout(function () {\n                            sourceEditor.select();\n                        });\n                        //重置getContent，源码模式下取值也能是最新的数据\n                        me.getContent = function () {\n                            return sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>') + '</p>';\n                        };\n                    } else {\n                        me.$body.css({\n                            'position': '',\n                            'left': '',\n                            'top': ''\n                        });\n                        //                    me.body.style.cssText = bakCssText;\n                        var cont = sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>') + '</p>';\n                        //处理掉block节点前后的空格,有可能会误命中，暂时不考虑\n                        cont = cont.replace(new RegExp('[\\\\r\\\\t\\\\n ]*<\\/?(\\\\w+)\\\\s*(?:[^>]*)>', 'g'), function (a, b) {\n                            if (b && !dtd.$inlineWithA[b.toLowerCase()]) {\n                                return a.replace(/(^[\\n\\r\\t ]*)|([\\n\\r\\t ]*$)/g, '');\n                            }\n                            return a.replace(/(^[\\n\\r\\t]*)|([\\n\\r\\t]*$)/g, '');\n                        });\n                        me.setContent(cont);\n                        sourceEditor.dispose();\n                        sourceEditor = null;\n                        //还原getContent方法\n                        me.getContent = oldGetContent;\n                        var first = me.body.firstChild;\n                        //trace:1106 都删除空了，下边会报错，所以补充一个p占位\n                        if (!first) {\n                            me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';\n                        }\n                        //要在ifm为显示时ff才能取到selection,否则报错\n                        //这里不能比较位置了\n                        me.undoManger && me.undoManger.save(true);\n                        if (browser.gecko) {\n                            me.body.contentEditable = true;\n                        }\n                        try {\n                            me.selection.getRange().moveToAddress(bakAddress).select();\n                        } catch (e) {}\n                    }\n                    this.fireEvent('sourcemodechanged', sourceMode);\n                },\n                queryCommandState: function queryCommandState() {\n                    return sourceMode | 0;\n                },\n                notNeedUndo: 1\n            };\n            var oldQueryCommandState = me.queryCommandState;\n\n            me.queryCommandState = function (cmdName) {\n                cmdName = cmdName.toLowerCase();\n                if (sourceMode) {\n                    //源码模式下可以开启的命令\n                    return cmdName in {\n                        'source': 1,\n                        'fullscreen': 1\n                    } ? oldQueryCommandState.apply(this, arguments) : -1;\n                }\n                return oldQueryCommandState.apply(this, arguments);\n            };\n        };\n    })();\n    ///import core\n    ///import plugins/undo.js\n    ///commands 设置回车标签p或br\n    ///commandsName  EnterKey\n    ///commandsTitle  设置回车标签p或br\n    /**\r\n     * @description 处理回车\r\n     * @author zhanyi\r\n     */\n    UM.plugins['enterkey'] = function () {\n        var hTag,\n            me = this,\n            tag = me.options.enterTag;\n        me.addListener('keyup', function (type, evt) {\n\n            var keyCode = evt.keyCode || evt.which;\n            if (keyCode == 13) {\n                var range = me.selection.getRange(),\n                    start = range.startContainer,\n                    doSave;\n\n                //修正在h1-h6里边回车后不能嵌套p的问题\n                if (!browser.ie) {\n\n                    if (/h\\d/i.test(hTag)) {\n                        if (browser.gecko) {\n                            var h = domUtils.findParentByTagName(start, ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'caption', 'table'], true);\n                            if (!h) {\n                                me.document.execCommand('formatBlock', false, '<p>');\n                                doSave = 1;\n                            }\n                        } else {\n                            //chrome remove div\n                            if (start.nodeType == 1) {\n                                var tmp = me.document.createTextNode(''),\n                                    div;\n                                range.insertNode(tmp);\n                                div = domUtils.findParentByTagName(tmp, 'div', true);\n                                if (div) {\n                                    var p = me.document.createElement('p');\n                                    while (div.firstChild) {\n                                        p.appendChild(div.firstChild);\n                                    }\n                                    div.parentNode.insertBefore(p, div);\n                                    domUtils.remove(div);\n                                    range.setStartBefore(tmp).setCursor();\n                                    doSave = 1;\n                                }\n                                domUtils.remove(tmp);\n                            }\n                        }\n\n                        if (me.undoManger && doSave) {\n                            me.undoManger.save();\n                        }\n                    }\n                    //没有站位符，会出现多行的问题\n                    browser.opera && range.select();\n                } else {\n                    me.fireEvent('saveScene', true, true);\n                }\n            }\n        });\n\n        me.addListener('keydown', function (type, evt) {\n            var keyCode = evt.keyCode || evt.which;\n            if (keyCode == 13) {\n                //回车\n                if (me.fireEvent('beforeenterkeydown')) {\n                    domUtils.preventDefault(evt);\n                    return;\n                }\n                me.fireEvent('saveScene', true, true);\n                hTag = '';\n\n                var range = me.selection.getRange();\n\n                if (!range.collapsed) {\n                    //跨td不能删\n                    var start = range.startContainer,\n                        end = range.endContainer,\n                        startTd = domUtils.findParentByTagName(start, 'td', true),\n                        endTd = domUtils.findParentByTagName(end, 'td', true);\n                    if (startTd && endTd && startTd !== endTd || !startTd && endTd || startTd && !endTd) {\n                        evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n                        return;\n                    }\n                }\n                if (tag == 'p') {\n\n                    if (!browser.ie) {\n\n                        start = domUtils.findParentByTagName(range.startContainer, ['ol', 'ul', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'caption'], true);\n\n                        //opera下执行formatblock会在table的场景下有问题，回车在opera原生支持很好，所以暂时在opera去掉调用这个原生的command\n                        //trace:2431\n                        if (!start && !browser.opera) {\n\n                            me.document.execCommand('formatBlock', false, '<p>');\n\n                            if (browser.gecko) {\n                                range = me.selection.getRange();\n                                start = domUtils.findParentByTagName(range.startContainer, 'p', true);\n                                start && domUtils.removeDirtyAttr(start);\n                            }\n                        } else {\n                            hTag = start.tagName;\n                            start.tagName.toLowerCase() == 'p' && browser.gecko && domUtils.removeDirtyAttr(start);\n                        }\n                    }\n                }\n            }\n        });\n\n        browser.ie && me.addListener('setDisabled', function () {\n            $(me.body).find('p').each(function (i, p) {\n                if (domUtils.isEmptyBlock(p)) {\n                    p.innerHTML = '&nbsp;';\n                }\n            });\n        });\n    };\n\n    ///import core\n    ///commands 预览\n    ///commandsName  Preview\n    ///commandsTitle  预览\n    /**\r\n     * 预览\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName     preview预览编辑器内容\r\n     */\n    UM.commands['preview'] = {\n        execCommand: function execCommand() {\n            var w = window.open('', '_blank', ''),\n                d = w.document,\n                c = this.getContent(null, null, true),\n                path = this.getOpt('UMEDITOR_HOME_URL'),\n                formula = c.indexOf('mathquill-embedded-latex') != -1 ? '<link rel=\"stylesheet\" href=\"' + path + 'third-party/mathquill/mathquill.css\"/>' + '<script src=\"' + path + 'third-party/jquery.min.js\"></script>' + '<script src=\"' + path + 'third-party/mathquill/mathquill.min.js\"></script>' : '';\n            d.open();\n            d.write('<html><head>' + formula + '</head><body><div>' + c + '</div></body></html>');\n            d.close();\n        },\n        notNeedUndo: 1\n    };\n\n    ///import core\n    ///commands 加粗,斜体,上标,下标\n    ///commandsName  Bold,Italic,Subscript,Superscript\n    ///commandsTitle  加粗,加斜,下标,上标\n    /**\r\n     * b u i等基础功能实现\r\n     * @function\r\n     * @name UM.execCommands\r\n     * @param    {String}    cmdName    bold加粗。italic斜体。subscript上标。superscript下标。\r\n    */\n    UM.plugins['basestyle'] = function () {\n        var basestyles = ['bold', 'underline', 'superscript', 'subscript', 'italic', 'strikethrough'],\n            me = this;\n        //添加快捷键\n        me.addshortcutkey({\n            \"Bold\": \"ctrl+66\", //^B\n            \"Italic\": \"ctrl+73\", //^I\n            \"Underline\": \"ctrl+shift+85\", //^U\n            \"strikeThrough\": 'ctrl+shift+83' //^s\n        });\n        //过滤最后的产出数据\n        me.addOutputRule(function (root) {\n            $.each(root.getNodesByTagName('b i u strike s'), function (i, node) {\n                switch (node.tagName) {\n                    case 'b':\n                        node.tagName = 'strong';\n                        break;\n                    case 'i':\n                        node.tagName = 'em';\n                        break;\n                    case 'u':\n                        node.tagName = 'span';\n                        node.setStyle('text-decoration', 'underline');\n                        break;\n                    case 's':\n                    case 'strike':\n                        node.tagName = 'span';\n                        node.setStyle('text-decoration', 'line-through');\n                }\n            });\n        });\n        $.each(basestyles, function (i, cmd) {\n            me.commands[cmd] = {\n                execCommand: function execCommand(cmdName) {\n                    var rng = this.selection.getRange();\n                    if (rng.collapsed && this.queryCommandState(cmdName) != 1) {\n                        var node = this.document.createElement({\n                            'bold': 'strong',\n                            'underline': 'u',\n                            'superscript': 'sup',\n                            'subscript': 'sub',\n                            'italic': 'em',\n                            'strikethrough': 'strike'\n                        }[cmdName]);\n                        rng.insertNode(node).setStart(node, 0).setCursor(false);\n                        return true;\n                    } else {\n                        return this.document.execCommand(cmdName);\n                    }\n                },\n                queryCommandState: function queryCommandState(cmdName) {\n                    if (browser.gecko) {\n                        return this.document.queryCommandState(cmdName);\n                    }\n                    var path = this.selection.getStartElementPath(),\n                        result = false;\n                    $.each(path, function (i, n) {\n                        switch (cmdName) {\n                            case 'bold':\n                                if (n.nodeName == 'STRONG' || n.nodeName == 'B') {\n                                    result = 1;\n                                    return false;\n                                }\n                                break;\n                            case 'underline':\n                                if (n.nodeName == 'U' || n.nodeName == 'SPAN' && $(n).css('text-decoration') == 'underline') {\n                                    result = 1;\n                                    return false;\n                                }\n                                break;\n                            case 'superscript':\n                                if (n.nodeName == 'SUP') {\n                                    result = 1;\n                                    return false;\n                                }\n                                break;\n                            case 'subscript':\n                                if (n.nodeName == 'SUB') {\n                                    result = 1;\n                                    return false;\n                                }\n                                break;\n                            case 'italic':\n                                if (n.nodeName == 'EM' || n.nodeName == 'I') {\n                                    result = 1;\n                                    return false;\n                                }\n                                break;\n                            case 'strikethrough':\n                                if (n.nodeName == 'S' || n.nodeName == 'STRIKE' || n.nodeName == 'SPAN' && $(n).css('text-decoration') == 'line-through') {\n                                    result = 1;\n                                    return false;\n                                }\n                                break;\n                        }\n                    });\n                    return result;\n                }\n            };\n        });\n    };\n\n    ///import core\n    ///import plugins/inserthtml.js\n    ///commands 视频\n    ///commandsName InsertVideo\n    ///commandsTitle  插入视频\n    ///commandsDialog  dialogs\\video\n    UM.plugins['video'] = function () {\n        var me = this,\n            div;\n\n        /**\r\n         * 创建插入视频字符窜\r\n         * @param url 视频地址\r\n         * @param width 视频宽度\r\n         * @param height 视频高度\r\n         * @param align 视频对齐\r\n         * @param toEmbed 是否以flash代替显示\r\n         * @param addParagraph  是否需要添加P 标签\r\n         */\n        function creatInsertStr(url, width, height, id, align, toEmbed) {\n            return !toEmbed ? '<img ' + (id ? 'id=\"' + id + '\"' : '') + ' width=\"' + width + '\" height=\"' + height + '\" _url=\"' + url + '\" class=\"edui-faked-video\"' + ' src=\"' + me.options.UMEDITOR_HOME_URL + 'themes/default/images/spacer.gif\" style=\"background:url(' + me.options.UMEDITOR_HOME_URL + 'themes/default/images/videologo.gif) no-repeat center center; border:1px solid gray;' + (align ? 'float:' + align + ';' : '') + '\" />' : '<embed type=\"application/x-shockwave-flash\" class=\"edui-faked-video\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\"' + ' src=\"' + url + '\" width=\"' + width + '\" height=\"' + height + '\"' + (align ? ' style=\"float:' + align + '\"' : '') + ' wmode=\"transparent\" play=\"true\" loop=\"false\" menu=\"false\" allowscriptaccess=\"never\" allowfullscreen=\"true\" >';\n        }\n\n        function switchImgAndEmbed(root, img2embed) {\n            utils.each(root.getNodesByTagName(img2embed ? 'img' : 'embed'), function (node) {\n                if (node.getAttr('class') == 'edui-faked-video') {\n\n                    var html = creatInsertStr(img2embed ? node.getAttr('_url') : node.getAttr('src'), node.getAttr('width'), node.getAttr('height'), null, node.getStyle('float') || '', img2embed);\n                    node.parentNode.replaceChild(UM.uNode.createElement(html), node);\n                }\n            });\n        }\n\n        me.addOutputRule(function (root) {\n            switchImgAndEmbed(root, true);\n        });\n        me.addInputRule(function (root) {\n            switchImgAndEmbed(root);\n        });\n\n        me.commands[\"insertvideo\"] = {\n            execCommand: function execCommand(cmd, videoObjs) {\n                videoObjs = utils.isArray(videoObjs) ? videoObjs : [videoObjs];\n                var html = [],\n                    id = 'tmpVedio';\n                for (var i = 0, vi, len = videoObjs.length; i < len; i++) {\n                    vi = videoObjs[i];\n                    html.push(creatInsertStr(vi.url, vi.width || 420, vi.height || 280, id + i, vi.align, false));\n                }\n                me.execCommand(\"inserthtml\", html.join(\"\"), true);\n            },\n            queryCommandState: function queryCommandState() {\n                var img = me.selection.getRange().getClosedNode(),\n                    flag = img && img.className == \"edui-faked-video\";\n                return flag ? 1 : 0;\n            }\n        };\n    };\n    ///import core\n    ///commands 全选\n    ///commandsName  SelectAll\n    ///commandsTitle  全选\n    /**\r\n     * 选中所有\r\n     * @function\r\n     * @name UM.execCommand\r\n     * @param   {String}   cmdName    selectall选中编辑器里的所有内容\r\n     * @author zhanyi\r\n    */\n    UM.plugins['selectall'] = function () {\n        var me = this;\n        me.commands['selectall'] = {\n            execCommand: function execCommand() {\n                //去掉了原生的selectAll,因为会出现报错和当内容为空时，不能出现闭合状态的光标\n                var me = this,\n                    body = me.body,\n                    range = me.selection.getRange();\n                range.selectNodeContents(body);\n                if (domUtils.isEmptyBlock(body)) {\n                    //opera不能自动合并到元素的里边，要手动处理一下\n                    if (browser.opera && body.firstChild && body.firstChild.nodeType == 1) {\n                        range.setStartAtFirst(body.firstChild);\n                    }\n                    range.collapse(true);\n                }\n                range.select(true);\n            },\n            notNeedUndo: 1\n        };\n\n        //快捷键\n        me.addshortcutkey({\n            \"selectAll\": \"ctrl+65\"\n        });\n    };\n\n    //UM.plugins['removeformat'] = function () {\n    //    var me = this;\n    //    me.commands['removeformat'] = {\n    //        execCommand: function () {\n    //            me.document.execCommand('removeformat');\n    //\n    //            /* 处理ie8和firefox选区有链接时,清除格式的bug */\n    //            if (browser.gecko || browser.ie8 || browser.webkit) {\n    //                var nativeRange = this.selection.getNative().getRangeAt(0),\n    //                    common = nativeRange.commonAncestorContainer,\n    //                    rng = me.selection.getRange(),\n    //                    bk = rng.createBookmark();\n    //\n    //                function isEleInBookmark(node, bk){\n    //                    if ( (domUtils.getPosition(node, bk.start) & domUtils.POSITION_FOLLOWING) &&\n    //                        (domUtils.getPosition(bk.end, node) & domUtils.POSITION_FOLLOWING) ) {\n    //                        return true;\n    //                    } else if ( (domUtils.getPosition(node, bk.start) & domUtils.POSITION_CONTAINS) ||\n    //                        (domUtils.getPosition(node, bk.end) & domUtils.POSITION_CONTAINS) ) {\n    //                        return true;\n    //                    }\n    //                    return false;\n    //                }\n    //\n    //                $(common).find('a').each(function (k, a) {\n    //                    if ( isEleInBookmark(a, bk) ) {\n    //                        a.removeAttribute('style');\n    //                    }\n    //                });\n    //\n    //            }\n    //        }\n    //    };\n    //\n    //};\n    //\n\n\n    UM.plugins['removeformat'] = function () {\n        var me = this;\n        me.setOpt({\n            'removeFormatTags': 'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var',\n            'removeFormatAttributes': 'class,style,lang,width,height,align,hspace,valign'\n        });\n        me.commands['removeformat'] = {\n            execCommand: function execCommand(cmdName, tags, style, attrs, notIncludeA) {\n\n                var tagReg = new RegExp('^(?:' + (tags || this.options.removeFormatTags).replace(/,/g, '|') + ')$', 'i'),\n                    removeFormatAttributes = style ? [] : (attrs || this.options.removeFormatAttributes).split(','),\n                    range = new dom.Range(this.document),\n                    bookmark,\n                    node,\n                    parent,\n                    filter = function filter(node) {\n                    return node.nodeType == 1;\n                };\n\n                function isRedundantSpan(node) {\n                    if (node.nodeType == 3 || node.tagName.toLowerCase() != 'span') {\n                        return 0;\n                    }\n                    if (browser.ie) {\n                        //ie 下判断实效，所以只能简单用style来判断\n                        //return node.style.cssText == '' ? 1 : 0;\n                        var attrs = node.attributes;\n                        if (attrs.length) {\n                            for (var i = 0, l = attrs.length; i < l; i++) {\n                                if (attrs[i].specified) {\n                                    return 0;\n                                }\n                            }\n                            return 1;\n                        }\n                    }\n                    return !node.attributes.length;\n                }\n                function doRemove(range) {\n\n                    var bookmark1 = range.createBookmark();\n                    if (range.collapsed) {\n                        range.enlarge(true);\n                    }\n\n                    //不能把a标签切了\n                    if (!notIncludeA) {\n                        var aNode = domUtils.findParentByTagName(range.startContainer, 'a', true);\n                        if (aNode) {\n                            range.setStartBefore(aNode);\n                        }\n\n                        aNode = domUtils.findParentByTagName(range.endContainer, 'a', true);\n                        if (aNode) {\n                            range.setEndAfter(aNode);\n                        }\n                    }\n\n                    bookmark = range.createBookmark();\n\n                    node = bookmark.start;\n\n                    //切开始\n                    while ((parent = node.parentNode) && !domUtils.isBlockElm(parent)) {\n                        domUtils.breakParent(node, parent);\n                        domUtils.clearEmptySibling(node);\n                    }\n                    if (bookmark.end) {\n                        //切结束\n                        node = bookmark.end;\n                        while ((parent = node.parentNode) && !domUtils.isBlockElm(parent)) {\n                            domUtils.breakParent(node, parent);\n                            domUtils.clearEmptySibling(node);\n                        }\n\n                        //开始去除样式\n                        var current = domUtils.getNextDomNode(bookmark.start, false, filter),\n                            next;\n                        while (current) {\n                            if (current == bookmark.end) {\n                                break;\n                            }\n\n                            next = domUtils.getNextDomNode(current, true, filter);\n\n                            if (!dtd.$empty[current.tagName.toLowerCase()] && !domUtils.isBookmarkNode(current)) {\n                                if (tagReg.test(current.tagName)) {\n                                    if (style) {\n                                        domUtils.removeStyle(current, style);\n                                        if (isRedundantSpan(current) && style != 'text-decoration') {\n                                            domUtils.remove(current, true);\n                                        }\n                                    } else {\n                                        domUtils.remove(current, true);\n                                    }\n                                } else {\n                                    //trace:939  不能把list上的样式去掉\n                                    if (!dtd.$tableContent[current.tagName] && !dtd.$list[current.tagName]) {\n                                        domUtils.removeAttributes(current, removeFormatAttributes);\n                                        if (isRedundantSpan(current)) {\n                                            domUtils.remove(current, true);\n                                        }\n                                    }\n                                }\n                            }\n                            current = next;\n                        }\n                    }\n                    //trace:1035\n                    //trace:1096 不能把td上的样式去掉，比如边框\n                    var pN = bookmark.start.parentNode;\n                    if (domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName] && !dtd.$list[pN.tagName]) {\n                        domUtils.removeAttributes(pN, removeFormatAttributes);\n                    }\n                    pN = bookmark.end.parentNode;\n                    if (bookmark.end && domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName] && !dtd.$list[pN.tagName]) {\n                        domUtils.removeAttributes(pN, removeFormatAttributes);\n                    }\n                    range.moveToBookmark(bookmark).moveToBookmark(bookmark1);\n                    //清除冗余的代码 <b><bookmark></b>\n                    var node = range.startContainer,\n                        tmp,\n                        collapsed = range.collapsed;\n                    while (node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]) {\n                        tmp = node.parentNode;\n                        range.setStartBefore(node);\n                        //trace:937\n                        //更新结束边界\n                        if (range.startContainer === range.endContainer) {\n                            range.endOffset--;\n                        }\n                        domUtils.remove(node);\n                        node = tmp;\n                    }\n\n                    if (!collapsed) {\n                        node = range.endContainer;\n                        while (node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]) {\n                            tmp = node.parentNode;\n                            range.setEndBefore(node);\n                            domUtils.remove(node);\n\n                            node = tmp;\n                        }\n                    }\n                }\n\n                range = this.selection.getRange();\n                if (!range.collapsed) {\n                    doRemove(range);\n                    range.select();\n                }\n            }\n\n        };\n    };\n    /*\r\n     *   处理特殊键的兼容性问题\r\n     */\n    UM.plugins['keystrokes'] = function () {\n        var me = this;\n        var collapsed = true;\n        me.addListener('keydown', function (type, evt) {\n            var keyCode = evt.keyCode || evt.which,\n                rng = me.selection.getRange();\n\n            //处理全选的情况\n            if (!rng.collapsed && !(evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey) && (keyCode >= 65 && keyCode <= 90 || keyCode >= 48 && keyCode <= 57 || keyCode >= 96 && keyCode <= 111 || {\n                13: 1,\n                8: 1,\n                46: 1\n            }[keyCode])) {\n\n                var tmpNode = rng.startContainer;\n                if (domUtils.isFillChar(tmpNode)) {\n                    rng.setStartBefore(tmpNode);\n                }\n                tmpNode = rng.endContainer;\n                if (domUtils.isFillChar(tmpNode)) {\n                    rng.setEndAfter(tmpNode);\n                }\n                rng.txtToElmBoundary();\n                //结束边界可能放到了br的前边，要把br包含进来\n                // x[xxx]<br/>\n                if (rng.endContainer && rng.endContainer.nodeType == 1) {\n                    tmpNode = rng.endContainer.childNodes[rng.endOffset];\n                    if (tmpNode && domUtils.isBr(tmpNode)) {\n                        rng.setEndAfter(tmpNode);\n                    }\n                }\n                if (rng.startOffset == 0) {\n                    tmpNode = rng.startContainer;\n                    if (domUtils.isBoundaryNode(tmpNode, 'firstChild')) {\n                        tmpNode = rng.endContainer;\n                        if (rng.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode, 'lastChild')) {\n                            me.fireEvent('saveScene');\n                            me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';\n                            rng.setStart(me.body.firstChild, 0).setCursor(false, true);\n                            me._selectionChange();\n                            return;\n                        }\n                    }\n                }\n            }\n\n            //处理backspace\n            if (keyCode == 8) {\n                rng = me.selection.getRange();\n                collapsed = rng.collapsed;\n                if (me.fireEvent('delkeydown', evt)) {\n                    return;\n                }\n                var start, end;\n                //避免按两次删除才能生效的问题\n                if (rng.collapsed && rng.inFillChar()) {\n                    start = rng.startContainer;\n\n                    if (domUtils.isFillChar(start)) {\n                        rng.setStartBefore(start).shrinkBoundary(true).collapse(true);\n                        domUtils.remove(start);\n                    } else {\n                        start.nodeValue = start.nodeValue.replace(new RegExp('^' + domUtils.fillChar), '');\n                        rng.startOffset--;\n                        rng.collapse(true).select(true);\n                    }\n                }\n                //解决选中control元素不能删除的问题\n                if (start = rng.getClosedNode()) {\n                    me.fireEvent('saveScene');\n                    rng.setStartBefore(start);\n                    domUtils.remove(start);\n                    rng.setCursor();\n                    me.fireEvent('saveScene');\n                    domUtils.preventDefault(evt);\n                    return;\n                }\n                //阻止在table上的删除\n                if (!browser.ie) {\n                    start = domUtils.findParentByTagName(rng.startContainer, 'table', true);\n                    end = domUtils.findParentByTagName(rng.endContainer, 'table', true);\n                    if (start && !end || !start && end || start !== end) {\n                        evt.preventDefault();\n                        return;\n                    }\n                }\n                start = rng.startContainer;\n                if (rng.collapsed && start.nodeType == 1) {\n                    var currentNode = start.childNodes[rng.startOffset - 1];\n                    if (currentNode && currentNode.nodeType == 1 && currentNode.tagName == 'BR') {\n                        me.fireEvent('saveScene');\n                        rng.setStartBefore(currentNode).collapse(true);\n                        domUtils.remove(currentNode);\n                        rng.select();\n                        me.fireEvent('saveScene');\n                    }\n                }\n\n                //trace:3613\n                if (browser.chrome) {\n                    if (rng.collapsed) {\n\n                        while (rng.startOffset == 0 && !domUtils.isEmptyBlock(rng.startContainer)) {\n                            rng.setStartBefore(rng.startContainer);\n                        }\n                        var pre = rng.startContainer.childNodes[rng.startOffset - 1];\n                        if (pre && pre.nodeName == 'BR') {\n                            rng.setStartBefore(pre);\n                            me.fireEvent('saveScene');\n                            $(pre).remove();\n                            rng.setCursor();\n                            me.fireEvent('saveScene');\n                        }\n                    }\n                }\n            }\n            //trace:1634\n            //ff的del键在容器空的时候，也会删除\n            if (browser.gecko && keyCode == 46) {\n                var range = me.selection.getRange();\n                if (range.collapsed) {\n                    start = range.startContainer;\n                    if (domUtils.isEmptyBlock(start)) {\n                        var parent = start.parentNode;\n                        while (domUtils.getChildCount(parent) == 1 && !domUtils.isBody(parent)) {\n                            start = parent;\n                            parent = parent.parentNode;\n                        }\n                        if (start === parent.lastChild) evt.preventDefault();\n                        return;\n                    }\n                }\n            }\n        });\n        me.addListener('keyup', function (type, evt) {\n            var keyCode = evt.keyCode || evt.which,\n                rng,\n                me = this;\n            if (keyCode == 8) {\n                if (me.fireEvent('delkeyup')) {\n                    return;\n                }\n                rng = me.selection.getRange();\n                if (rng.collapsed) {\n                    var tmpNode,\n                        autoClearTagName = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n                    if (tmpNode = domUtils.findParentByTagName(rng.startContainer, autoClearTagName, true)) {\n                        if (domUtils.isEmptyBlock(tmpNode)) {\n                            var pre = tmpNode.previousSibling;\n                            if (pre && pre.nodeName != 'TABLE') {\n                                domUtils.remove(tmpNode);\n                                rng.setStartAtLast(pre).setCursor(false, true);\n                                return;\n                            } else {\n                                var next = tmpNode.nextSibling;\n                                if (next && next.nodeName != 'TABLE') {\n                                    domUtils.remove(tmpNode);\n                                    rng.setStartAtFirst(next).setCursor(false, true);\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                    //处理当删除到body时，要重新给p标签展位\n                    if (domUtils.isBody(rng.startContainer)) {\n                        var tmpNode = domUtils.createElement(me.document, 'p', {\n                            'innerHTML': browser.ie ? domUtils.fillChar : '<br/>'\n                        });\n                        rng.insertNode(tmpNode).setStart(tmpNode, 0).setCursor(false, true);\n                    }\n                }\n\n                //chrome下如果删除了inline标签，浏览器会有记忆，在输入文字还是会套上刚才删除的标签，所以这里再选一次就不会了\n                if (!collapsed && (rng.startContainer.nodeType == 3 || rng.startContainer.nodeType == 1 && domUtils.isEmptyBlock(rng.startContainer))) {\n                    if (browser.ie) {\n                        var span = rng.document.createElement('span');\n                        rng.insertNode(span).setStartBefore(span).collapse(true);\n                        rng.select();\n                        domUtils.remove(span);\n                    } else {\n                        rng.select();\n                    }\n                }\n            }\n        });\n    };\n    /**\r\n     * 自动保存草稿\r\n     */\n    UM.plugins['autosave'] = function () {\n\n        var me = this,\n\n        //无限循环保护\n        lastSaveTime = new Date(),\n\n        //最小保存间隔时间\n        MIN_TIME = 20,\n\n        //auto save key\n        saveKey = null;\n\n        //默认间隔时间\n        me.setOpt('saveInterval', 500);\n\n        //存储媒介封装\n        var LocalStorage = UM.LocalStorage = function () {\n\n            var storage = window.localStorage || getUserData() || null,\n                LOCAL_FILE = \"localStorage\";\n\n            return {\n\n                saveLocalData: function saveLocalData(key, data) {\n\n                    if (storage && data) {\n                        storage.setItem(key, data);\n                        return true;\n                    }\n\n                    return false;\n                },\n\n                getLocalData: function getLocalData(key) {\n\n                    if (storage) {\n                        return storage.getItem(key);\n                    }\n\n                    return null;\n                },\n\n                removeItem: function removeItem(key) {\n\n                    storage && storage.removeItem(key);\n                }\n\n            };\n\n            function getUserData() {\n\n                var container = document.createElement(\"div\");\n                container.style.display = \"none\";\n\n                if (!container.addBehavior) {\n                    return null;\n                }\n\n                container.addBehavior(\"#default#userdata\");\n\n                return {\n\n                    getItem: function getItem(key) {\n\n                        var result = null;\n\n                        try {\n                            document.body.appendChild(container);\n                            container.load(LOCAL_FILE);\n                            result = container.getAttribute(key);\n                            document.body.removeChild(container);\n                        } catch (e) {}\n\n                        return result;\n                    },\n\n                    setItem: function setItem(key, value) {\n\n                        document.body.appendChild(container);\n                        container.setAttribute(key, value);\n                        container.save(LOCAL_FILE);\n                        document.body.removeChild(container);\n                    },\n                    //               暂时没有用到\n                    //                clear: function () {\n                    //\n                    //                    var expiresTime = new Date();\n                    //                    expiresTime.setFullYear( expiresTime.getFullYear() - 1 );\n                    //                    document.body.appendChild( container );\n                    //                    container.expires = expiresTime.toUTCString();\n                    //                    container.save( LOCAL_FILE );\n                    //                    document.body.removeChild( container );\n                    //\n                    //                },\n\n                    removeItem: function removeItem(key) {\n\n                        document.body.appendChild(container);\n                        container.removeAttribute(key);\n                        container.save(LOCAL_FILE);\n                        document.body.removeChild(container);\n                    }\n\n                };\n            }\n        }();\n\n        function save(editor) {\n\n            var saveData = null;\n\n            if (new Date() - lastSaveTime < MIN_TIME) {\n                return;\n            }\n\n            if (!editor.hasContents()) {\n                //这里不能调用命令来删除， 会造成事件死循环\n                saveKey && LocalStorage.removeItem(saveKey);\n                return;\n            }\n\n            lastSaveTime = new Date();\n\n            editor._saveFlag = null;\n\n            saveData = me.body.innerHTML;\n\n            if (editor.fireEvent(\"beforeautosave\", {\n                content: saveData\n            }) === false) {\n                return;\n            }\n\n            LocalStorage.saveLocalData(saveKey, saveData);\n\n            editor.fireEvent(\"afterautosave\", {\n                content: saveData\n            });\n        }\n\n        me.addListener('ready', function () {\n            var _suffix = \"-drafts-data\",\n                key = null;\n\n            if (me.key) {\n                key = me.key + _suffix;\n            } else {\n                key = (me.container.parentNode.id || 'ue-common') + _suffix;\n            }\n\n            //页面地址+编辑器ID 保持唯一\n            saveKey = (location.protocol + location.host + location.pathname).replace(/[.:\\/]/g, '_') + key;\n        });\n\n        me.addListener('contentchange', function () {\n\n            if (!saveKey) {\n                return;\n            }\n\n            if (me._saveFlag) {\n                window.clearTimeout(me._saveFlag);\n            }\n\n            if (me.options.saveInterval > 0) {\n\n                me._saveFlag = window.setTimeout(function () {\n\n                    save(me);\n                }, me.options.saveInterval);\n            } else {\n\n                save(me);\n            }\n        });\n\n        me.commands['clearlocaldata'] = {\n            execCommand: function execCommand(cmd, name) {\n                if (saveKey && LocalStorage.getLocalData(saveKey)) {\n                    LocalStorage.removeItem(saveKey);\n                }\n            },\n            notNeedUndo: true,\n            ignoreContentChange: true\n        };\n\n        me.commands['getlocaldata'] = {\n            execCommand: function execCommand(cmd, name) {\n                return saveKey ? LocalStorage.getLocalData(saveKey) || '' : '';\n            },\n            notNeedUndo: true,\n            ignoreContentChange: true\n        };\n\n        me.commands['drafts'] = {\n            execCommand: function execCommand(cmd, name) {\n                if (saveKey) {\n                    me.body.innerHTML = LocalStorage.getLocalData(saveKey) || '<p>' + (browser.ie ? '&nbsp;' : '<br/>') + '</p>';\n                    me.focus(true);\n                }\n            },\n            queryCommandState: function queryCommandState() {\n                return saveKey ? LocalStorage.getLocalData(saveKey) === null ? -1 : 0 : -1;\n            },\n            notNeedUndo: true,\n            ignoreContentChange: true\n        };\n    };\n\n    /**\r\n     * @description\r\n     * 1.拖放文件到编辑区域，自动上传并插入到选区\r\n     * 2.插入粘贴板的图片，自动上传并插入到选区\r\n     * @author Jinqn\r\n     * @date 2013-10-14\r\n     */\n    UM.plugins['autoupload'] = function () {\n\n        var me = this;\n\n        me.setOpt('pasteImageEnabled', true);\n        me.setOpt('dropFileEnabled', true);\n        var sendAndInsertImage = function sendAndInsertImage(file, editor) {\n            //模拟数据\n            var fd = new FormData();\n            fd.append(editor.options.imageFieldName || 'upfile', file, file.name || 'blob.' + file.type.substr('image/'.length));\n            fd.append('type', 'ajax');\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"post\", me.options.imageUrl, true);\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            xhr.addEventListener('load', function (e) {\n                try {\n                    var json = eval('(' + e.target.response + ')'),\n                        link = json.url,\n                        picLink = me.options.imagePath + link;\n                    editor.execCommand('insertimage', {\n                        src: picLink,\n                        _src: picLink\n                    });\n                } catch (er) {}\n            });\n            xhr.send(fd);\n        };\n\n        function getPasteImage(e) {\n            return e.clipboardData && e.clipboardData.items && e.clipboardData.items.length == 1 && /^image\\//.test(e.clipboardData.items[0].type) ? e.clipboardData.items : null;\n        }\n\n        function getDropImage(e) {\n            return e.dataTransfer && e.dataTransfer.files ? e.dataTransfer.files : null;\n        }\n\n        me.addListener('ready', function () {\n            if (window.FormData && window.FileReader) {\n                var autoUploadHandler = function autoUploadHandler(e) {\n                    var hasImg = false,\n                        items;\n                    //获取粘贴板文件列表或者拖放文件列表\n                    items = e.type == 'paste' ? getPasteImage(e.originalEvent) : getDropImage(e.originalEvent);\n                    if (items) {\n                        var len = items.length,\n                            file;\n                        while (len--) {\n                            file = items[len];\n                            if (file.getAsFile) file = file.getAsFile();\n                            if (file && file.size > 0 && /image\\/\\w+/i.test(file.type)) {\n                                sendAndInsertImage(file, me);\n                                hasImg = true;\n                            }\n                        }\n                        if (hasImg) return false;\n                    }\n                };\n                me.getOpt('pasteImageEnabled') && me.$body.on('paste', autoUploadHandler);\n                me.getOpt('dropFileEnabled') && me.$body.on('drop', autoUploadHandler);\n\n                //取消拖放图片时出现的文字光标位置提示\n                me.$body.on('dragover', function (e) {\n                    if (e.originalEvent.dataTransfer.types[0] == 'Files') {\n                        return false;\n                    }\n                });\n            }\n        });\n    };\n    /**\r\n     * 公式插件\r\n     */\n    UM.plugins['formula'] = function () {\n        var me = this;\n\n        function getActiveIframe() {\n            return me.$body.find('iframe.edui-formula-active')[0] || null;\n        }\n\n        function blurActiveIframe() {\n            var iframe = getActiveIframe();\n            iframe && iframe.contentWindow.formula.blur();\n        }\n\n        me.addInputRule(function (root) {\n            $.each(root.getNodesByTagName('span'), function (i, node) {\n                if (node.hasClass('mathquill-embedded-latex')) {\n                    var firstChild,\n                        latex = '';\n                    while (firstChild = node.firstChild()) {\n                        latex += firstChild.data;\n                        node.removeChild(firstChild);\n                    }\n                    node.tagName = 'iframe';\n                    node.setAttr({\n                        'frameborder': '0',\n                        'src': me.getOpt('UMEDITOR_HOME_URL') + 'dialogs/formula/formula.html',\n                        'data-latex': utils.unhtml(latex)\n                    });\n                }\n            });\n        });\n        me.addOutputRule(function (root) {\n            $.each(root.getNodesByTagName('iframe'), function (i, node) {\n                if (node.hasClass('mathquill-embedded-latex')) {\n                    node.tagName = 'span';\n                    node.appendChild(UM.uNode.createText(node.getAttr('data-latex')));\n                    node.setAttr({\n                        'frameborder': '',\n                        'src': '',\n                        'data-latex': ''\n                    });\n                }\n            });\n        });\n        me.addListener('click', function () {\n            blurActiveIframe();\n        });\n        me.addListener('afterexeccommand', function (type, cmd) {\n            if (cmd != 'formula') {\n                blurActiveIframe();\n            }\n        });\n\n        me.commands['formula'] = {\n            execCommand: function execCommand(cmd, latex) {\n                var iframe = getActiveIframe();\n                if (iframe) {\n                    iframe.contentWindow.formula.insertLatex(latex);\n                } else {\n                    me.execCommand('inserthtml', '<span class=\"mathquill-embedded-latex\">' + latex + '</span>');\n                    browser.ie && browser.ie9below && setTimeout(function () {\n                        var rng = me.selection.getRange(),\n                            startContainer = rng.startContainer;\n                        if (startContainer.nodeType == 1 && !startContainer.childNodes[rng.startOffset]) {\n                            rng.insertNode(me.document.createTextNode(' '));\n                            rng.setCursor();\n                        }\n                    }, 100);\n                }\n            },\n            queryCommandState: function queryCommandState(cmd) {\n                return 0;\n            },\n            queryCommandValue: function queryCommandValue(cmd) {\n                var iframe = getActiveIframe();\n                return iframe && iframe.contentWindow.formula.getLatex();\n            }\n        };\n    };\n\n    (function ($) {\n        //对jquery的扩展\n        $.parseTmpl = function parse(str, data) {\n            var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' + 'with(obj||{}){__p.push(\\'' + str.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\").replace(/<%=([\\s\\S]+?)%>/g, function (match, code) {\n                return \"',\" + code.replace(/\\\\'/g, \"'\") + \",'\";\n            }).replace(/<%([\\s\\S]+?)%>/g, function (match, code) {\n                return \"');\" + code.replace(/\\\\'/g, \"'\").replace(/[\\r\\n\\t]/g, ' ') + \"__p.push('\";\n            }).replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t') + \"');}return __p.join('');\";\n            var func = new Function('obj', tmpl);\n            return data ? func(data) : func;\n        };\n        $.extend2 = function (t, s) {\n            var a = arguments,\n                notCover = $.type(a[a.length - 1]) == 'boolean' ? a[a.length - 1] : false,\n                len = $.type(a[a.length - 1]) == 'boolean' ? a.length - 1 : a.length;\n            for (var i = 1; i < len; i++) {\n                var x = a[i];\n                for (var k in x) {\n                    if (!notCover || !t.hasOwnProperty(k)) {\n                        t[k] = x[k];\n                    }\n                }\n            }\n            return t;\n        };\n\n        $.IE6 = !!window.ActiveXObject && parseFloat(navigator.userAgent.match(/msie (\\d+)/i)[1]) == 6;\n\n        //所有ui的基类\n        var _eventHandler = [];\n        var _widget = function _widget() {};\n        var _prefix = 'edui';\n        _widget.prototype = {\n            on: function on(ev, cb) {\n                this.root().on(ev, $.proxy(cb, this));\n                return this;\n            },\n            off: function off(ev, cb) {\n                this.root().off(ev, $.proxy(cb, this));\n                return this;\n            },\n            trigger: function trigger(ev, data) {\n                return this.root().trigger(ev, data) === false ? false : this;\n            },\n            root: function root($el) {\n                return this._$el || (this._$el = $el);\n            },\n            destroy: function destroy() {},\n            data: function data(key, val) {\n                if (val !== undefined) {\n                    this.root().data(_prefix + key, val);\n                    return this;\n                } else {\n                    return this.root().data(_prefix + key);\n                }\n            },\n            register: function register(eventName, $el, fn) {\n                _eventHandler.push({\n                    'evtname': eventName,\n                    '$els': $.isArray($el) ? $el : [$el],\n                    handler: $.proxy(fn, $el)\n                });\n            }\n        };\n\n        //从jq实例上拿到绑定的widget实例\n        $.fn.edui = function (obj) {\n            return obj ? this.data('eduiwidget', obj) : this.data('eduiwidget');\n        };\n\n        function _createClass(ClassObj, properties, supperClass) {\n            ClassObj.prototype = $.extend2($.extend({}, properties), (UM.ui[supperClass] || _widget).prototype, true);\n            ClassObj.prototype.supper = (UM.ui[supperClass] || _widget).prototype;\n            //父class的defaultOpt 合并\n            if (UM.ui[supperClass] && UM.ui[supperClass].prototype.defaultOpt) {\n\n                var parentDefaultOptions = UM.ui[supperClass].prototype.defaultOpt,\n                    subDefaultOptions = ClassObj.prototype.defaultOpt;\n\n                ClassObj.prototype.defaultOpt = $.extend({}, parentDefaultOptions, subDefaultOptions || {});\n            }\n            return ClassObj;\n        }\n\n        var _guid = 1;\n\n        function mergeToJQ(ClassObj, className) {\n            $[_prefix + className] = ClassObj;\n            $.fn[_prefix + className] = function (opt) {\n                var result,\n                    args = Array.prototype.slice.call(arguments, 1);\n\n                this.each(function (i, el) {\n                    var $this = $(el);\n                    var obj = $this.edui();\n                    if (!obj) {\n                        ClassObj(!opt || !$.isPlainObject(opt) ? {} : opt, $this);\n                        $this.edui(obj);\n                    }\n                    if ($.type(opt) == 'string') {\n                        if (opt == 'this') {\n                            result = obj;\n                        } else {\n                            result = obj[opt].apply(obj, args);\n                            if (result !== obj && result !== undefined) {\n                                return false;\n                            }\n                            result = null;\n                        }\n                    }\n                });\n\n                return result !== null ? result : this;\n            };\n        }\n\n        UM.ui = {\n            define: function define(className, properties, supperClass) {\n                var ClassObj = UM.ui[className] = _createClass(function (options, $el) {\n                    var _obj = function _obj() {};\n                    $.extend(_obj.prototype, ClassObj.prototype, {\n                        guid: className + _guid++,\n                        widgetName: className\n                    });\n                    var obj = new _obj();\n                    if ($.type(options) == 'string') {\n                        obj.init && obj.init({});\n                        obj.root().edui(obj);\n                        obj.root().find('a').click(function (evt) {\n                            evt.preventDefault();\n                        });\n                        return obj.root()[_prefix + className].apply(obj.root(), arguments);\n                    } else {\n                        $el && obj.root($el);\n                        obj.init && obj.init(!options || $.isPlainObject(options) ? $.extend2(options || {}, obj.defaultOpt || {}, true) : options);\n                        try {\n                            obj.root().find('a').click(function (evt) {\n                                evt.preventDefault();\n                            });\n                        } catch (e) {}\n\n                        return obj.root().edui(obj);\n                    }\n                }, properties, supperClass);\n\n                mergeToJQ(ClassObj, className);\n            }\n        };\n\n        $(function () {\n            $(document).on('click mouseup mousedown dblclick mouseover', function (evt) {\n                $.each(_eventHandler, function (i, obj) {\n                    if (obj.evtname == evt.type) {\n                        $.each(obj.$els, function (i, $el) {\n                            if ($el[0] !== evt.target && !$.contains($el[0], evt.target)) {\n                                obj.handler(evt);\n                            }\n                        });\n                    }\n                });\n            });\n        });\n    })(jQuery);\n    //button 类\n    UM.ui.define('button', {\n        tpl: '<<%if(!texttype){%>div class=\"edui-btn edui-btn-<%=icon%> <%if(name){%>edui-btn-name-<%=name%><%}%>\" unselectable=\"on\" onmousedown=\"return false\" <%}else{%>a class=\"edui-text-btn\"<%}%><% if(title) {%> data-original-title=\"<%=title%>\" <%};%>> ' + '<% if(icon) {%><div unselectable=\"on\" class=\"edui-icon-<%=icon%> edui-icon\"></div><% }; %><%if(text) {%><span unselectable=\"on\" onmousedown=\"return false\" class=\"edui-button-label\"><%=text%></span><%}%>' + '<%if(caret && text){%><span class=\"edui-button-spacing\"></span><%}%>' + '<% if(caret) {%><span unselectable=\"on\" onmousedown=\"return false\" class=\"edui-caret\"></span><% };%></<%if(!texttype){%>div<%}else{%>a<%}%>>',\n        defaultOpt: {\n            text: '',\n            title: '',\n            icon: '',\n            width: '',\n            caret: false,\n            texttype: false,\n            click: function click() {}\n        },\n        init: function init(options) {\n            var me = this;\n\n            me.root($($.parseTmpl(me.tpl, options))).click(function (evt) {\n                me.wrapclick(options.click, evt);\n            });\n\n            me.root().hover(function () {\n                if (!me.root().hasClass(\"edui-disabled\")) {\n                    me.root().toggleClass('edui-hover');\n                }\n            });\n\n            return me;\n        },\n        wrapclick: function wrapclick(fn, evt) {\n            if (!this.disabled()) {\n                this.root().trigger('wrapclick');\n                $.proxy(fn, this, evt)();\n            }\n            return this;\n        },\n        label: function label(text) {\n            if (text === undefined) {\n                return this.root().find('.edui-button-label').text();\n            } else {\n                this.root().find('.edui-button-label').text(text);\n                return this;\n            }\n        },\n        disabled: function disabled(state) {\n            if (state === undefined) {\n                return this.root().hasClass('edui-disabled');\n            }\n            this.root().toggleClass('edui-disabled', state);\n            if (this.root().hasClass('edui-disabled')) {\n                this.root().removeClass('edui-hover');\n            }\n            return this;\n        },\n        active: function active(state) {\n            if (state === undefined) {\n                return this.root().hasClass('edui-active');\n            }\n            this.root().toggleClass('edui-active', state);\n\n            return this;\n        },\n        mergeWith: function mergeWith($obj) {\n            var me = this;\n            me.data('$mergeObj', $obj);\n            $obj.edui().data('$mergeObj', me.root());\n            if (!$.contains(document.body, $obj[0])) {\n                $obj.appendTo(me.root());\n            }\n            me.on('click', function () {\n                me.wrapclick(function () {\n                    $obj.edui().show();\n                });\n            }).register('click', me.root(), function (evt) {\n                $obj.hide();\n            });\n        }\n    });\n    //toolbar 类\n    (function () {\n        UM.ui.define('toolbar', {\n            tpl: '<div class=\"edui-toolbar\"  ><div class=\"edui-btn-toolbar\" unselectable=\"on\" onmousedown=\"return false\"  ></div></div>',\n\n            init: function init() {\n                var $root = this.root($(this.tpl));\n                this.data('$btnToolbar', $root.find('.edui-btn-toolbar'));\n            },\n            appendToBtnmenu: function appendToBtnmenu(data) {\n                var $cont = this.data('$btnToolbar');\n                data = $.isArray(data) ? data : [data];\n                $.each(data, function (i, $item) {\n                    $cont.append($item);\n                });\n            }\n        });\n    })();\n\n    //menu 类\n    UM.ui.define('menu', {\n        show: function show($obj, dir, fnname, topOffset, leftOffset) {\n\n            fnname = fnname || 'position';\n            if (this.trigger('beforeshow') === false) {\n                return;\n            } else {\n                this.root().css($.extend({ display: 'block' }, $obj ? {\n                    top: $obj[fnname]().top + (dir == 'right' ? 0 : $obj.outerHeight()) - (topOffset || 0),\n                    left: $obj[fnname]().left + (dir == 'right' ? $obj.outerWidth() : 0) - (leftOffset || 0)\n                } : {}));\n                this.trigger('aftershow');\n            }\n        },\n        hide: function hide(all) {\n            var $parentmenu;\n            if (this.trigger('beforehide') === false) {\n                return;\n            } else {\n\n                if ($parentmenu = this.root().data('parentmenu')) {\n                    if ($parentmenu.data('parentmenu') || all) $parentmenu.edui().hide();\n                }\n                this.root().css('display', 'none');\n                this.trigger('afterhide');\n            }\n        },\n        attachTo: function attachTo($obj) {\n            var me = this;\n            if (!$obj.data('$mergeObj')) {\n                $obj.data('$mergeObj', me.root());\n                $obj.on('wrapclick', function (evt) {\n                    me.show();\n                });\n                me.register('click', $obj, function (evt) {\n                    me.hide();\n                });\n                me.data('$mergeObj', $obj);\n            }\n        }\n    });\n    //dropmenu 类\n    UM.ui.define('dropmenu', {\n        tmpl: '<ul class=\"edui-dropdown-menu\" aria-labelledby=\"dropdownMenu\" >' + '<%for(var i=0,ci;ci=data[i++];){%>' + '<%if(ci.divider){%><li class=\"edui-divider\"></li><%}else{%>' + '<li <%if(ci.active||ci.disabled){%>class=\"<%= ci.active|| \\'\\' %> <%=ci.disabled||\\'\\' %>\" <%}%> data-value=\"<%= ci.value%>\">' + '<a href=\"#\" tabindex=\"-1\"><em class=\"edui-dropmenu-checkbox\"><i class=\"edui-icon-ok\"></i></em><%= ci.label%></a>' + '</li><%}%>' + '<%}%>' + '</ul>',\n        defaultOpt: {\n            data: [],\n            click: function click() {}\n        },\n        init: function init(options) {\n            var me = this;\n            var eventName = {\n                click: 1,\n                mouseover: 1,\n                mouseout: 1\n            };\n\n            this.root($($.parseTmpl(this.tmpl, options))).on('click', 'li[class!=\"edui-disabled edui-divider edui-dropdown-submenu\"]', function (evt) {\n                $.proxy(options.click, me, evt, $(this).data('value'), $(this))();\n            }).find('li').each(function (i, el) {\n                var $this = $(this);\n                if (!$this.hasClass(\"edui-disabled edui-divider edui-dropdown-submenu\")) {\n                    var data = options.data[i];\n                    $.each(eventName, function (k) {\n                        data[k] && $this[k](function (evt) {\n                            $.proxy(data[k], el)(evt, data, me.root);\n                        });\n                    });\n                }\n            });\n        },\n        disabled: function disabled(cb) {\n            $('li[class!=edui-divider]', this.root()).each(function () {\n                var $el = $(this);\n                if (cb === true) {\n                    $el.addClass('edui-disabled');\n                } else if ($.isFunction(cb)) {\n                    $el.toggleClass('edui-disabled', cb(li));\n                } else {\n                    $el.removeClass('edui-disabled');\n                }\n            });\n        },\n        val: function val(_val) {\n            var currentVal;\n            $('li[class!=\"edui-divider edui-disabled edui-dropdown-submenu\"]', this.root()).each(function () {\n                var $el = $(this);\n                if (_val === undefined) {\n                    if ($el.find('em.edui-dropmenu-checked').length) {\n                        currentVal = $el.data('value');\n                        return false;\n                    }\n                } else {\n                    $el.find('em').toggleClass('edui-dropmenu-checked', $el.data('value') == _val);\n                }\n            });\n            if (_val === undefined) {\n                return currentVal;\n            }\n        },\n        addSubmenu: function addSubmenu(label, menu, index) {\n            index = index || 0;\n\n            var $list = $('li[class!=edui-divider]', this.root());\n            var $node = $('<li class=\"edui-dropdown-submenu\"><a tabindex=\"-1\" href=\"#\">' + label + '</a></li>').append(menu);\n\n            if (index >= 0 && index < $list.length) {\n                $node.insertBefore($list[index]);\n            } else if (index < 0) {\n                $node.insertBefore($list[0]);\n            } else if (index >= $list.length) {\n                $node.appendTo($list);\n            }\n        }\n    }, 'menu');\n    //splitbutton 类\n    ///import button\n    UM.ui.define('splitbutton', {\n        tpl: '<div class=\"edui-splitbutton <%if (name){%>edui-splitbutton-<%= name %><%}%>\"  unselectable=\"on\" <%if(title){%>data-original-title=\"<%=title%>\"<%}%>><div class=\"edui-btn\"  unselectable=\"on\" ><%if(icon){%><div  unselectable=\"on\" class=\"edui-icon-<%=icon%> edui-icon\"></div><%}%><%if(text){%><%=text%><%}%></div>' + '<div  unselectable=\"on\" class=\"edui-btn edui-dropdown-toggle\" >' + '<div  unselectable=\"on\" class=\"edui-caret\"><\\/div>' + '</div>' + '</div>',\n        defaultOpt: {\n            text: '',\n            title: '',\n            click: function click() {}\n        },\n        init: function init(options) {\n            var me = this;\n            me.root($($.parseTmpl(me.tpl, options)));\n            me.root().find('.edui-btn:first').click(function (evt) {\n                if (!me.disabled()) {\n                    $.proxy(options.click, me)();\n                }\n            });\n            me.root().find('.edui-dropdown-toggle').click(function () {\n                if (!me.disabled()) {\n                    me.trigger('arrowclick');\n                }\n            });\n            me.root().hover(function () {\n                if (!me.root().hasClass(\"edui-disabled\")) {\n                    me.root().toggleClass('edui-hover');\n                }\n            });\n\n            return me;\n        },\n        wrapclick: function wrapclick(fn, evt) {\n            if (!this.disabled()) {\n                $.proxy(fn, this, evt)();\n            }\n            return this;\n        },\n        disabled: function disabled(state) {\n            if (state === undefined) {\n                return this.root().hasClass('edui-disabled');\n            }\n            this.root().toggleClass('edui-disabled', state).find('.edui-btn').toggleClass('edui-disabled', state);\n            return this;\n        },\n        active: function active(state) {\n            if (state === undefined) {\n                return this.root().hasClass('edui-active');\n            }\n            this.root().toggleClass('edui-active', state).find('.edui-btn:first').toggleClass('edui-active', state);\n            return this;\n        },\n        mergeWith: function mergeWith($obj) {\n            var me = this;\n            me.data('$mergeObj', $obj);\n            $obj.edui().data('$mergeObj', me.root());\n            if (!$.contains(document.body, $obj[0])) {\n                $obj.appendTo(me.root());\n            }\n            me.root().delegate('.edui-dropdown-toggle', 'click', function () {\n                me.wrapclick(function () {\n                    $obj.edui().show();\n                });\n            });\n            me.register('click', me.root().find('.edui-dropdown-toggle'), function (evt) {\n                $obj.hide();\n            });\n        }\n    });\n    /**\r\n     * Created with JetBrains PhpStorm.\r\n     * User: hn\r\n     * Date: 13-7-10\r\n     * Time: 下午3:07\r\n     * To change this template use File | Settings | File Templates.\r\n     */\n    UM.ui.define('colorsplitbutton', {\n\n        tpl: '<div class=\"edui-splitbutton <%if (name){%>edui-splitbutton-<%= name %><%}%>\"  unselectable=\"on\" <%if(title){%>data-original-title=\"<%=title%>\"<%}%>><div class=\"edui-btn\"  unselectable=\"on\" ><%if(icon){%><div  unselectable=\"on\" class=\"edui-icon-<%=icon%> edui-icon\"></div><%}%><div class=\"edui-splitbutton-color-label\" <%if (color) {%>style=\"background: <%=color%>\"<%}%>></div><%if(text){%><%=text%><%}%></div>' + '<div  unselectable=\"on\" class=\"edui-btn edui-dropdown-toggle\" >' + '<div  unselectable=\"on\" class=\"edui-caret\"><\\/div>' + '</div>' + '</div>',\n        defaultOpt: {\n            color: ''\n        },\n        init: function init(options) {\n\n            var me = this;\n\n            me.supper.init.call(me, options);\n        },\n        colorLabel: function colorLabel() {\n            return this.root().find('.edui-splitbutton-color-label');\n        }\n\n    }, 'splitbutton');\n    //popup 类\n    UM.ui.define('popup', {\n        tpl: '<div class=\"edui-dropdown-menu edui-popup\"' + '<%if(!<%=stopprop%>){%>onmousedown=\"return false\"<%}%>' + '><div class=\"edui-popup-body\" unselectable=\"on\" onmousedown=\"return false\"><%=subtpl%></div>' + '<div class=\"edui-popup-caret\"></div>' + '</div>',\n        defaultOpt: {\n            stopprop: false,\n            subtpl: '',\n            width: '',\n            height: ''\n        },\n        init: function init(options) {\n            this.root($($.parseTmpl(this.tpl, options)));\n            return this;\n        },\n        mergeTpl: function mergeTpl(data) {\n            return $.parseTmpl(this.tpl, { subtpl: data });\n        },\n        show: function show($obj, posObj) {\n            if (!posObj) posObj = {};\n\n            var fnname = posObj.fnname || 'position';\n            if (this.trigger('beforeshow') === false) {\n                return;\n            } else {\n                this.root().css($.extend({ display: 'block' }, $obj ? {\n                    top: $obj[fnname]().top + (posObj.dir == 'right' ? 0 : $obj.outerHeight()) - (posObj.offsetTop || 0),\n                    left: $obj[fnname]().left + (posObj.dir == 'right' ? $obj.outerWidth() : 0) - (posObj.offsetLeft || 0),\n                    position: 'absolute'\n                } : {}));\n\n                this.root().find('.edui-popup-caret').css({\n                    top: posObj.caretTop || 0,\n                    left: posObj.caretLeft || 0,\n                    position: 'absolute'\n                }).addClass(posObj.caretDir || \"up\");\n            }\n            this.trigger(\"aftershow\");\n        },\n        hide: function hide() {\n            this.root().css('display', 'none');\n            this.trigger('afterhide');\n        },\n        attachTo: function attachTo($obj, posObj) {\n            var me = this;\n            if (!$obj.data('$mergeObj')) {\n                $obj.data('$mergeObj', me.root());\n                $obj.on('wrapclick', function (evt) {\n                    me.show($obj, posObj);\n                });\n                me.register('click', $obj, function (evt) {\n                    me.hide();\n                });\n                me.data('$mergeObj', $obj);\n            }\n        },\n        getBodyContainer: function getBodyContainer() {\n            return this.root().find(\".edui-popup-body\");\n        }\n    });\n    //scale 类\n    UM.ui.define('scale', {\n        tpl: '<div class=\"edui-scale\" unselectable=\"on\">' + '<span class=\"edui-scale-hand0\"></span>' + '<span class=\"edui-scale-hand1\"></span>' + '<span class=\"edui-scale-hand2\"></span>' + '<span class=\"edui-scale-hand3\"></span>' + '<span class=\"edui-scale-hand4\"></span>' + '<span class=\"edui-scale-hand5\"></span>' + '<span class=\"edui-scale-hand6\"></span>' + '<span class=\"edui-scale-hand7\"></span>' + '</div>',\n        defaultOpt: {\n            $doc: $(document),\n            $wrap: $(document)\n        },\n        init: function init(options) {\n            if (options.$doc) this.defaultOpt.$doc = options.$doc;\n            if (options.$wrap) this.defaultOpt.$wrap = options.$wrap;\n            this.root($($.parseTmpl(this.tpl, options)));\n            this.initStyle();\n            this.startPos = this.prePos = { x: 0, y: 0 };\n            this.dragId = -1;\n            return this;\n        },\n        initStyle: function initStyle() {\n            utils.cssRule('edui-style-scale', '.edui-scale{display:none;position:absolute;border:1px solid #38B2CE;cursor:hand;}' + '.edui-scale span{position:absolute;left:0;top:0;width:7px;height:7px;overflow:hidden;font-size:0px;display:block;background-color:#3C9DD0;}' + '.edui-scale .edui-scale-hand0{cursor:nw-resize;top:0;margin-top:-4px;left:0;margin-left:-4px;}' + '.edui-scale .edui-scale-hand1{cursor:n-resize;top:0;margin-top:-4px;left:50%;margin-left:-4px;}' + '.edui-scale .edui-scale-hand2{cursor:ne-resize;top:0;margin-top:-4px;left:100%;margin-left:-3px;}' + '.edui-scale .edui-scale-hand3{cursor:w-resize;top:50%;margin-top:-4px;left:0;margin-left:-4px;}' + '.edui-scale .edui-scale-hand4{cursor:e-resize;top:50%;margin-top:-4px;left:100%;margin-left:-3px;}' + '.edui-scale .edui-scale-hand5{cursor:sw-resize;top:100%;margin-top:-3px;left:0;margin-left:-4px;}' + '.edui-scale .edui-scale-hand6{cursor:s-resize;top:100%;margin-top:-3px;left:50%;margin-left:-4px;}' + '.edui-scale .edui-scale-hand7{cursor:se-resize;top:100%;margin-top:-3px;left:100%;margin-left:-3px;}');\n        },\n        _eventHandler: function _eventHandler(e) {\n            var me = this,\n                $doc = me.defaultOpt.$doc;\n            switch (e.type) {\n                case 'mousedown':\n                    var hand = e.target || e.srcElement,\n                        hand;\n                    if (hand.className.indexOf('edui-scale-hand') != -1) {\n                        me.dragId = hand.className.slice(-1);\n                        me.startPos.x = me.prePos.x = e.clientX;\n                        me.startPos.y = me.prePos.y = e.clientY;\n                        $doc.bind('mousemove', $.proxy(me._eventHandler, me));\n                    }\n                    break;\n                case 'mousemove':\n                    if (me.dragId != -1) {\n                        me.updateContainerStyle(me.dragId, { x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y });\n                        me.prePos.x = e.clientX;\n                        me.prePos.y = e.clientY;\n                        me.updateTargetElement();\n                    }\n                    break;\n                case 'mouseup':\n                    if (me.dragId != -1) {\n                        me.dragId = -1;\n                        me.updateTargetElement();\n                        var $target = me.data('$scaleTarget');\n                        if ($target.parent()) me.attachTo(me.data('$scaleTarget'));\n                    }\n                    $doc.unbind('mousemove', $.proxy(me._eventHandler, me));\n                    break;\n                default:\n                    break;\n            }\n        },\n        updateTargetElement: function updateTargetElement() {\n            var me = this,\n                $root = me.root(),\n                $target = me.data('$scaleTarget');\n            $target.css({ width: $root.width(), height: $root.height() });\n            me.attachTo($target);\n        },\n        updateContainerStyle: function updateContainerStyle(dir, offset) {\n            var me = this,\n                $dom = me.root(),\n                tmp,\n                rect = [\n            //[left, top, width, height]\n            [0, 0, -1, -1], [0, 0, 0, -1], [0, 0, 1, -1], [0, 0, -1, 0], [0, 0, 1, 0], [0, 0, -1, 1], [0, 0, 0, 1], [0, 0, 1, 1]];\n\n            if (rect[dir][0] != 0) {\n                tmp = parseInt($dom.offset().left) + offset.x;\n                $dom.css('left', me._validScaledProp('left', tmp));\n            }\n            if (rect[dir][1] != 0) {\n                tmp = parseInt($dom.offset().top) + offset.y;\n                $dom.css('top', me._validScaledProp('top', tmp));\n            }\n            if (rect[dir][2] != 0) {\n                tmp = $dom.width() + rect[dir][2] * offset.x;\n                $dom.css('width', me._validScaledProp('width', tmp));\n            }\n            if (rect[dir][3] != 0) {\n                tmp = $dom.height() + rect[dir][3] * offset.y;\n                $dom.css('height', me._validScaledProp('height', tmp));\n            }\n        },\n        _validScaledProp: function _validScaledProp(prop, value) {\n            var $ele = this.root(),\n                $wrap = this.defaultOpt.$doc,\n                calc = function calc(val, a, b) {\n                return val + a > b ? b - a : value;\n            };\n\n            value = isNaN(value) ? 0 : value;\n            switch (prop) {\n                case 'left':\n                    return value < 0 ? 0 : calc(value, $ele.width(), $wrap.width());\n                case 'top':\n                    return value < 0 ? 0 : calc(value, $ele.height(), $wrap.height());\n                case 'width':\n                    return value <= 0 ? 1 : calc(value, $ele.offset().left, $wrap.width());\n                case 'height':\n                    return value <= 0 ? 1 : calc(value, $ele.offset().top, $wrap.height());\n            }\n        },\n        show: function show($obj) {\n            var me = this;\n            if ($obj) me.attachTo($obj);\n            me.root().bind('mousedown', $.proxy(me._eventHandler, me));\n            me.defaultOpt.$doc.bind('mouseup', $.proxy(me._eventHandler, me));\n            me.root().show();\n            me.trigger(\"aftershow\");\n        },\n        hide: function hide() {\n            var me = this;\n            me.root().unbind('mousedown', $.proxy(me._eventHandler, me));\n            me.defaultOpt.$doc.unbind('mouseup', $.proxy(me._eventHandler, me));\n            me.root().hide();\n            me.trigger('afterhide');\n        },\n        attachTo: function attachTo($obj) {\n            var me = this,\n                imgPos = $obj.offset(),\n                $root = me.root(),\n                $wrap = me.defaultOpt.$wrap,\n                posObj = $wrap.offset();\n\n            me.data('$scaleTarget', $obj);\n            me.root().css({\n                position: 'absolute',\n                width: $obj.width(),\n                height: $obj.height(),\n                left: imgPos.left - posObj.left - parseInt($wrap.css('border-left-width')) - parseInt($root.css('border-left-width')),\n                top: imgPos.top - posObj.top - parseInt($wrap.css('border-top-width')) - parseInt($root.css('border-top-width'))\n            });\n        },\n        getScaleTarget: function getScaleTarget() {\n            return this.data('$scaleTarget')[0];\n        }\n    });\n    //colorpicker 类\n    UM.ui.define('colorpicker', {\n        tpl: function tpl(opt) {\n            var COLORS = ('ffffff,000000,eeece1,1f497d,4f81bd,c0504d,9bbb59,8064a2,4bacc6,f79646,' + 'f2f2f2,7f7f7f,ddd9c3,c6d9f0,dbe5f1,f2dcdb,ebf1dd,e5e0ec,dbeef3,fdeada,' + 'd8d8d8,595959,c4bd97,8db3e2,b8cce4,e5b9b7,d7e3bc,ccc1d9,b7dde8,fbd5b5,' + 'bfbfbf,3f3f3f,938953,548dd4,95b3d7,d99694,c3d69b,b2a2c7,92cddc,fac08f,' + 'a5a5a5,262626,494429,17365d,366092,953734,76923c,5f497a,31859b,e36c09,' + '7f7f7f,0c0c0c,1d1b10,0f243e,244061,632423,4f6128,3f3151,205867,974806,' + 'c00000,ff0000,ffc000,ffff00,92d050,00b050,00b0f0,0070c0,002060,7030a0,').split(',');\n\n            var html = '<div unselectable=\"on\" onmousedown=\"return false\" class=\"edui-colorpicker<%if (name){%> edui-colorpicker-<%=name%><%}%>\" >' + '<table unselectable=\"on\" onmousedown=\"return false\">' + '<tr><td colspan=\"10\">' + opt.lang_themeColor + '</td> </tr>' + '<tr class=\"edui-colorpicker-firstrow\" >';\n\n            for (var i = 0; i < COLORS.length; i++) {\n                if (i && i % 10 === 0) {\n                    html += '</tr>' + (i == 60 ? '<tr><td colspan=\"10\">' + opt.lang_standardColor + '</td></tr>' : '') + '<tr' + (i == 60 ? ' class=\"edui-colorpicker-firstrow\"' : '') + '>';\n                }\n                html += i < 70 ? '<td><a unselectable=\"on\" onmousedown=\"return false\" title=\"' + COLORS[i] + '\" class=\"edui-colorpicker-colorcell\"' + ' data-color=\"#' + COLORS[i] + '\"' + ' style=\"background-color:#' + COLORS[i] + ';border:solid #ccc;' + (i < 10 || i >= 60 ? 'border-width:1px;' : i >= 10 && i < 20 ? 'border-width:1px 1px 0 1px;' : 'border-width:0 1px 0 1px;') + '\"' + '></a></td>' : '';\n            }\n            html += '</tr></table></div>';\n            return html;\n        },\n        init: function init(options) {\n            var me = this;\n            me.root($($.parseTmpl(me.supper.mergeTpl(me.tpl(options)), options)));\n\n            me.root().on(\"click\", function (e) {\n                me.trigger('pickcolor', $(e.target).data('color'));\n            });\n        }\n    }, 'popup');\n    /**\r\n     * Created with JetBrains PhpStorm.\r\n     * User: hn\r\n     * Date: 13-5-29\r\n     * Time: 下午8:01\r\n     * To change this template use File | Settings | File Templates.\r\n     */\n\n    (function () {\n\n        var widgetName = 'combobox',\n            itemClassName = 'edui-combobox-item',\n            HOVER_CLASS = 'edui-combobox-item-hover',\n            ICON_CLASS = 'edui-combobox-checked-icon',\n            labelClassName = 'edui-combobox-item-label';\n\n        UM.ui.define(widgetName, function () {\n\n            return {\n                tpl: \"<ul class=\\\"dropdown-menu edui-combobox-menu<%if (comboboxName!=='') {%> edui-combobox-<%=comboboxName%><%}%>\\\" unselectable=\\\"on\\\" onmousedown=\\\"return false\\\" role=\\\"menu\\\" aria-labelledby=\\\"dropdownMenu\\\">\" + \"<%if(autoRecord) {%>\" + \"<%for( var i=0, len = recordStack.length; i<len; i++ ) {%>\" + \"<%var index = recordStack[i];%>\" + \"<li class=\\\"<%=itemClassName%><%if( selected == index ) {%> edui-combobox-checked<%}%>\\\" data-item-index=\\\"<%=index%>\\\" unselectable=\\\"on\\\" onmousedown=\\\"return false\\\">\" + \"<span class=\\\"edui-combobox-icon\\\" unselectable=\\\"on\\\" onmousedown=\\\"return false\\\"></span>\" + \"<label class=\\\"<%=labelClassName%>\\\" style=\\\"<%=itemStyles[ index ]%>\\\" unselectable=\\\"on\\\" onmousedown=\\\"return false\\\"><%=items[index]%></label>\" + \"</li>\" + \"<%}%>\" + \"<%if( i ) {%>\" + \"<li class=\\\"edui-combobox-item-separator\\\"></li>\" + \"<%}%>\" + \"<%}%>\" + \"<%for( var i=0, label; label = items[i]; i++ ) {%>\" + \"<li class=\\\"<%=itemClassName%><%if( selected == i ) {%> edui-combobox-checked<%}%> edui-combobox-item-<%=i%>\\\" data-item-index=\\\"<%=i%>\\\" unselectable=\\\"on\\\" onmousedown=\\\"return false\\\">\" + \"<span class=\\\"edui-combobox-icon\\\" unselectable=\\\"on\\\" onmousedown=\\\"return false\\\"></span>\" + \"<label class=\\\"<%=labelClassName%>\\\" style=\\\"<%=itemStyles[ i ]%>\\\" unselectable=\\\"on\\\" onmousedown=\\\"return false\\\"><%=label%></label>\" + \"</li>\" + \"<%}%>\" + \"</ul>\",\n                defaultOpt: {\n                    //记录栈初始列表\n                    recordStack: [],\n                    //可用项列表\n                    items: [],\n                    //item对应的值列表\n                    value: [],\n                    comboboxName: '',\n                    selected: '',\n                    //自动记录\n                    autoRecord: true,\n                    //最多记录条数\n                    recordCount: 5\n                },\n                init: function init(options) {\n\n                    var me = this;\n\n                    $.extend(me._optionAdaptation(options), me._createItemMapping(options.recordStack, options.items), {\n                        itemClassName: itemClassName,\n                        iconClass: ICON_CLASS,\n                        labelClassName: labelClassName\n                    });\n\n                    this._transStack(options);\n\n                    me.root($($.parseTmpl(me.tpl, options)));\n\n                    this.data('options', options).initEvent();\n                },\n                initEvent: function initEvent() {\n\n                    var me = this;\n\n                    me.initSelectItem();\n\n                    this.initItemActive();\n                },\n                /**\r\n                 * 初始化选择项\r\n                 */\n                initSelectItem: function initSelectItem() {\n\n                    var me = this,\n                        labelClass = \".\" + labelClassName;\n\n                    me.root().delegate('.' + itemClassName, 'click', function () {\n\n                        var $li = $(this),\n                            index = $li.attr('data-item-index');\n\n                        me.trigger('comboboxselect', {\n                            index: index,\n                            label: $li.find(labelClass).text(),\n                            value: me.data('options').value[index]\n                        }).select(index);\n\n                        me.hide();\n\n                        return false;\n                    });\n                },\n                initItemActive: function initItemActive() {\n                    var fn = {\n                        mouseenter: 'addClass',\n                        mouseleave: 'removeClass'\n                    };\n                    if ($.IE6) {\n                        this.root().delegate('.' + itemClassName, 'mouseenter mouseleave', function (evt) {\n                            $(this)[fn[evt.type]](HOVER_CLASS);\n                        }).one('afterhide', function () {});\n                    }\n                },\n                /**\r\n                 * 选择给定索引的项\r\n                 * @param index 项索引\r\n                 * @returns {*} 如果存在对应索引的项，则返回该项；否则返回null\r\n                 */\n                select: function select(index) {\n\n                    var itemCount = this.data('options').itemCount,\n                        items = this.data('options').autowidthitem;\n\n                    if (items && !items.length) {\n                        items = this.data('options').items;\n                    }\n\n                    if (itemCount == 0) {\n                        return null;\n                    }\n\n                    if (index < 0) {\n\n                        index = itemCount + index % itemCount;\n                    } else if (index >= itemCount) {\n\n                        index = itemCount - 1;\n                    }\n\n                    this.trigger('changebefore', items[index]);\n\n                    this._update(index);\n\n                    this.trigger('changeafter', items[index]);\n\n                    return null;\n                },\n                selectItemByLabel: function selectItemByLabel(label) {\n\n                    var itemMapping = this.data('options').itemMapping,\n                        me = this,\n                        index = null;\n\n                    !$.isArray(label) && (label = [label]);\n\n                    $.each(label, function (i, item) {\n\n                        index = itemMapping[item];\n\n                        if (index !== undefined) {\n\n                            me.select(index);\n                            return false;\n                        }\n                    });\n                },\n                /**\r\n                 * 转换记录栈\r\n                 */\n                _transStack: function _transStack(options) {\n\n                    var temp = [],\n                        itemIndex = -1,\n                        selected = -1;\n\n                    $.each(options.recordStack, function (index, item) {\n\n                        itemIndex = options.itemMapping[item];\n\n                        if ($.isNumeric(itemIndex)) {\n\n                            temp.push(itemIndex);\n\n                            //selected的合法性检测\n                            if (item == options.selected) {\n                                selected = itemIndex;\n                            }\n                        }\n                    });\n\n                    options.recordStack = temp;\n                    options.selected = selected;\n                    temp = null;\n                },\n                _optionAdaptation: function _optionAdaptation(options) {\n\n                    if (!('itemStyles' in options)) {\n\n                        options.itemStyles = [];\n\n                        for (var i = 0, len = options.items.length; i < len; i++) {\n                            options.itemStyles.push('');\n                        }\n                    }\n\n                    options.autowidthitem = options.autowidthitem || options.items;\n                    options.itemCount = options.items.length;\n\n                    return options;\n                },\n                _createItemMapping: function _createItemMapping(stackItem, items) {\n\n                    var temp = {},\n                        result = {\n                        recordStack: [],\n                        mapping: {}\n                    };\n\n                    $.each(items, function (index, item) {\n                        temp[item] = index;\n                    });\n\n                    result.itemMapping = temp;\n\n                    $.each(stackItem, function (index, item) {\n\n                        if (temp[item] !== undefined) {\n                            result.recordStack.push(temp[item]);\n                            result.mapping[item] = temp[item];\n                        }\n                    });\n\n                    return result;\n                },\n                _update: function _update(index) {\n\n                    var options = this.data(\"options\"),\n                        newStack = [],\n                        newChilds = null;\n\n                    $.each(options.recordStack, function (i, item) {\n\n                        if (item != index) {\n                            newStack.push(item);\n                        }\n                    });\n\n                    //压入最新的记录\n                    newStack.unshift(index);\n\n                    if (newStack.length > options.recordCount) {\n                        newStack.length = options.recordCount;\n                    }\n\n                    options.recordStack = newStack;\n                    options.selected = index;\n\n                    newChilds = $($.parseTmpl(this.tpl, options));\n\n                    //重新渲染\n                    this.root().html(newChilds.html());\n\n                    newChilds = null;\n                    newStack = null;\n                }\n            };\n        }(), 'menu');\n    })();\n\n    /**\r\n     * Combox 抽象基类\r\n     * User: hn\r\n     * Date: 13-5-29\r\n     * Time: 下午8:01\r\n     * To change this template use File | Settings | File Templates.\r\n     */\n\n    (function () {\n\n        var widgetName = 'buttoncombobox';\n\n        UM.ui.define(widgetName, function () {\n\n            return {\n                defaultOpt: {\n                    //按钮初始文字\n                    label: '',\n                    title: ''\n                },\n                init: function init(options) {\n\n                    var me = this;\n\n                    var btnWidget = $.eduibutton({\n                        caret: true,\n                        name: options.comboboxName,\n                        title: options.title,\n                        text: options.label,\n                        click: function click() {\n                            me.show(this.root());\n                        }\n                    });\n\n                    me.supper.init.call(me, options);\n\n                    //监听change， 改变button显示内容\n                    me.on('changebefore', function (e, label) {\n                        btnWidget.eduibutton('label', label);\n                    });\n\n                    me.data('button', btnWidget);\n\n                    me.attachTo(btnWidget);\n                },\n                button: function button() {\n                    return this.data('button');\n                }\n            };\n        }(), 'combobox');\n    })();\n\n    /*modal 类*/\n    UM.ui.define('modal', {\n        tpl: '<div class=\"edui-modal\" tabindex=\"-1\" >' + '<div class=\"edui-modal-header\">' + '<div class=\"edui-close\" data-hide=\"modal\"></div>' + '<h3 class=\"edui-title\"><%=title%></h3>' + '</div>' + '<div class=\"edui-modal-body\"  style=\"<%if(width){%>width:<%=width%>px;<%}%>' + '<%if(height){%>height:<%=height%>px;<%}%>\">' + ' </div>' + '<% if(cancellabel || oklabel) {%>' + '<div class=\"edui-modal-footer\">' + '<div class=\"edui-modal-tip\"></div>' + '<%if(oklabel){%><div class=\"edui-btn edui-btn-primary\" data-ok=\"modal\"><%=oklabel%></div><%}%>' + '<%if(cancellabel){%><div class=\"edui-btn\" data-hide=\"modal\"><%=cancellabel%></div><%}%>' + '</div>' + '<%}%></div>',\n        defaultOpt: {\n            title: \"\",\n            cancellabel: \"\",\n            oklabel: \"\",\n            width: '',\n            height: '',\n            backdrop: true,\n            keyboard: true\n        },\n        init: function init(options) {\n            var me = this;\n\n            me.root($($.parseTmpl(me.tpl, options || {})));\n\n            me.data(\"options\", options);\n            if (options.okFn) {\n                me.on('ok', $.proxy(options.okFn, me));\n            }\n            if (options.cancelFn) {\n                me.on('beforehide', $.proxy(options.cancelFn, me));\n            }\n\n            me.root().delegate('[data-hide=\"modal\"]', 'click', $.proxy(me.hide, me)).delegate('[data-ok=\"modal\"]', 'click', $.proxy(me.ok, me));\n\n            $('[data-hide=\"modal\"],[data-ok=\"modal\"]', me.root()).hover(function () {\n                $(this).toggleClass('edui-hover');\n            });\n        },\n        toggle: function toggle() {\n            var me = this;\n            return me[!me.data(\"isShown\") ? 'show' : 'hide']();\n        },\n        show: function show() {\n\n            var me = this;\n\n            me.trigger(\"beforeshow\");\n\n            if (me.data(\"isShown\")) return;\n\n            me.data(\"isShown\", true);\n\n            me.escape();\n\n            me.backdrop(function () {\n                me.autoCenter();\n                me.root().show().focus().trigger('aftershow');\n            });\n        },\n        showTip: function showTip(text) {\n            $('.edui-modal-tip', this.root()).html(text).fadeIn();\n        },\n        hideTip: function hideTip(text) {\n            $('.edui-modal-tip', this.root()).fadeOut(function () {\n                $(this).html('');\n            });\n        },\n        autoCenter: function autoCenter() {\n            //ie6下不用处理了\n            !$.IE6 && this.root().css(\"margin-left\", -(this.root().width() / 2));\n        },\n        hide: function hide() {\n            var me = this;\n\n            me.trigger(\"beforehide\");\n\n            if (!me.data(\"isShown\")) return;\n\n            me.data(\"isShown\", false);\n\n            me.escape();\n\n            me.hideModal();\n        },\n        escape: function escape() {\n            var me = this;\n            if (me.data(\"isShown\") && me.data(\"options\").keyboard) {\n                me.root().on('keyup', function (e) {\n                    e.which == 27 && me.hide();\n                });\n            } else if (!me.data(\"isShown\")) {\n                me.root().off('keyup');\n            }\n        },\n        hideModal: function hideModal() {\n            var me = this;\n            me.root().hide();\n            me.backdrop(function () {\n                me.removeBackdrop();\n                me.trigger('afterhide');\n            });\n        },\n        removeBackdrop: function removeBackdrop() {\n            this.$backdrop && this.$backdrop.remove();\n            this.$backdrop = null;\n        },\n        backdrop: function backdrop(callback) {\n            var me = this;\n            if (me.data(\"isShown\") && me.data(\"options\").backdrop) {\n                me.$backdrop = $('<div class=\"edui-modal-backdrop\" />').click(me.data(\"options\").backdrop == 'static' ? $.proxy(me.root()[0].focus, me.root()[0]) : $.proxy(me.hide, me));\n            }\n            me.trigger('afterbackdrop');\n            callback && callback();\n        },\n        attachTo: function attachTo($obj) {\n            var me = this;\n            if (!$obj.data('$mergeObj')) {\n\n                $obj.data('$mergeObj', me.root());\n                $obj.on('click', function () {\n                    me.toggle($obj);\n                });\n                me.data('$mergeObj', $obj);\n            }\n        },\n        ok: function ok() {\n            var me = this;\n            me.trigger('beforeok');\n            if (me.trigger(\"ok\", me) === false) {\n                return;\n            }\n            me.hide();\n        },\n        getBodyContainer: function getBodyContainer() {\n            return this.root().find('.edui-modal-body');\n        }\n    });\n\n    /*tooltip 类*/\n    UM.ui.define('tooltip', {\n        tpl: '<div class=\"edui-tooltip\" unselectable=\"on\" onmousedown=\"return false\">' + '<div class=\"edui-tooltip-arrow\" unselectable=\"on\" onmousedown=\"return false\"></div>' + '<div class=\"edui-tooltip-inner\" unselectable=\"on\" onmousedown=\"return false\"></div>' + '</div>',\n        init: function init(options) {\n            var me = this;\n            me.root($($.parseTmpl(me.tpl, options || {})));\n        },\n        content: function content(e) {\n            var me = this,\n                title = $(e.currentTarget).attr(\"data-original-title\");\n\n            me.root().find('.edui-tooltip-inner')['text'](title);\n        },\n        position: function position(e) {\n            var me = this,\n                $obj = $(e.currentTarget);\n\n            me.root().css($.extend({ display: 'block' }, $obj ? {\n                top: $obj.outerHeight(),\n                left: ($obj.outerWidth() - me.root().outerWidth()) / 2\n            } : {}));\n        },\n        show: function show(e) {\n            if ($(e.currentTarget).hasClass('edui-disabled')) return;\n\n            var me = this;\n            me.content(e);\n            me.root().appendTo($(e.currentTarget));\n            me.position(e);\n            me.root().css('display', 'block');\n        },\n        hide: function hide() {\n            var me = this;\n            me.root().css('display', 'none');\n        },\n        attachTo: function attachTo($obj) {\n            var me = this;\n\n            function tmp($obj) {\n                var me = this;\n\n                if (!$.contains(document.body, me.root()[0])) {\n                    me.root().appendTo($obj);\n                }\n\n                me.data('tooltip', me.root());\n\n                $obj.each(function () {\n                    if ($(this).attr(\"data-original-title\")) {\n                        $(this).on('mouseenter', $.proxy(me.show, me)).on('mouseleave click', $.proxy(me.hide, me));\n                    }\n                });\n            }\n\n            if ($.type($obj) === \"undefined\") {\n                $(\"[data-original-title]\").each(function (i, el) {\n                    tmp.call(me, $(el));\n                });\n            } else {\n                if (!$obj.data('tooltip')) {\n                    tmp.call(me, $obj);\n                }\n            }\n        }\n    });\n\n    /*tab 类*/\n    UM.ui.define('tab', {\n        init: function init(options) {\n            var me = this,\n                slr = options.selector;\n\n            if ($.type(slr)) {\n                me.root($(slr, options.context));\n                me.data(\"context\", options.context);\n\n                $(slr, me.data(\"context\")).on('click', function (e) {\n                    me.show(e);\n                });\n            }\n        },\n        show: function show(e) {\n\n            var me = this,\n                $cur = $(e.target),\n                $ul = $cur.closest('ul'),\n                selector,\n                previous,\n                $target,\n                e;\n\n            selector = $cur.attr('data-context');\n            selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '');\n\n            var $tmp = $cur.parent('li');\n\n            if (!$tmp.length || $tmp.hasClass('edui-active')) return;\n\n            previous = $ul.find('.edui-active:last a')[0];\n\n            e = $.Event('beforeshow', {\n                target: $cur[0],\n                relatedTarget: previous\n            });\n\n            me.trigger(e);\n\n            if (e.isDefaultPrevented()) return;\n\n            $target = $(selector, me.data(\"context\"));\n\n            me.activate($cur.parent('li'), $ul);\n            me.activate($target, $target.parent(), function () {\n                me.trigger({\n                    type: 'aftershow', relatedTarget: previous\n                });\n            });\n        },\n        activate: function activate(element, container, callback) {\n            if (element === undefined) {\n                return $(\".edui-tab-item.edui-active\", this.root()).index();\n            }\n\n            var $active = container.find('> .edui-active');\n\n            $active.removeClass('edui-active');\n\n            element.addClass('edui-active');\n\n            callback && callback();\n        }\n    });\n\n    //button 类\n    UM.ui.define('separator', {\n        tpl: '<div class=\"edui-separator\" unselectable=\"on\" onmousedown=\"return false\" ></div>',\n        init: function init(options) {\n            var me = this;\n            me.root($($.parseTmpl(me.tpl, options)));\n            return me;\n        }\n    });\n    /**\r\n     * @file adapter.js\r\n     * @desc adapt ui to editor\r\n     * @import core/Editor.js, core/utils.js\r\n     */\n\n    (function () {\n        var _editorUI = {},\n            _editors = {},\n            _readyFn = [],\n            _activeWidget = null,\n            _widgetData = {},\n            _widgetCallBack = {},\n            _cacheUI = {},\n            _maxZIndex = null;\n\n        utils.extend(UM, {\n            defaultWidth: 500,\n            defaultHeight: 500,\n            registerUI: function registerUI(name, fn) {\n                utils.each(name.split(/\\s+/), function (uiname) {\n                    _editorUI[uiname] = fn;\n                });\n            },\n\n            setEditor: function setEditor(editor) {\n                !_editors[editor.id] && (_editors[editor.id] = editor);\n            },\n            registerWidget: function registerWidget(name, pro, cb) {\n                _widgetData[name] = $.extend2(pro, {\n                    $root: '',\n                    _preventDefault: false,\n                    root: function root($el) {\n                        return this.$root || (this.$root = $el);\n                    },\n                    preventDefault: function preventDefault() {\n                        this._preventDefault = true;\n                    },\n                    clear: false\n                });\n                if (cb) {\n                    _widgetCallBack[name] = cb;\n                }\n            },\n            getWidgetData: function getWidgetData(name) {\n                return _widgetData[name];\n            },\n            setWidgetBody: function setWidgetBody(name, $widget, editor) {\n                if (!editor._widgetData) {\n\n                    utils.extend(editor, {\n                        _widgetData: {},\n                        getWidgetData: function getWidgetData(name) {\n                            return this._widgetData[name];\n                        },\n                        getWidgetCallback: function getWidgetCallback(widgetName) {\n                            var me = this;\n                            return function () {\n                                return _widgetCallBack[widgetName].apply(me, [me, $widget].concat(Array.prototype.slice.call(arguments, 0)));\n                            };\n                        }\n                    });\n                }\n                var pro = _widgetData[name];\n                if (!pro) {\n                    return null;\n                }\n                pro = editor._widgetData[name];\n                if (!pro) {\n                    pro = _widgetData[name];\n                    pro = editor._widgetData[name] = $.type(pro) == 'function' ? pro : utils.clone(pro);\n                }\n\n                pro.root($widget.edui().getBodyContainer());\n\n                pro.initContent(editor, $widget);\n                if (!pro._preventDefault) {\n                    pro.initEvent(editor, $widget);\n                }\n\n                pro.width && $widget.width(pro.width);\n            },\n            setActiveWidget: function setActiveWidget($widget) {\n                _activeWidget = $widget;\n            },\n            getEditor: function getEditor(id, options) {\n                var editor = _editors[id] || (_editors[id] = this.createEditor(id, options));\n                _maxZIndex = _maxZIndex ? Math.max(editor.getOpt('zIndex'), _maxZIndex) : editor.getOpt('zIndex');\n                return editor;\n            },\n            setTopEditor: function setTopEditor(editor) {\n                $.each(_editors, function (i, o) {\n                    if (editor == o) {\n                        editor.$container && editor.$container.css('zIndex', _maxZIndex + 1);\n                    } else {\n                        o.$container && o.$container.css('zIndex', o.getOpt('zIndex'));\n                    }\n                });\n            },\n            clearCache: function clearCache(id) {\n                if (_editors[id]) {\n                    delete _editors[id];\n                }\n            },\n            delEditor: function delEditor(id) {\n                var editor;\n                if (editor = _editors[id]) {\n                    editor.destroy();\n                }\n            },\n            ready: function ready(fn) {\n                _readyFn.push(fn);\n            },\n            createEditor: function createEditor(id, opt) {\n                var editor = new UM.Editor(opt);\n                var T = this;\n\n                editor.langIsReady ? $.proxy(renderUI, T)() : editor.addListener(\"langReady\", $.proxy(renderUI, T));\n                function renderUI() {\n\n                    var $container = this.createUI('#' + id, editor);\n                    editor.key = id;\n                    editor.ready(function () {\n                        $.each(_readyFn, function (index, fn) {\n                            $.proxy(fn, editor)();\n                        });\n                    });\n                    var options = editor.options;\n                    if (options.initialFrameWidth) {\n                        options.minFrameWidth = options.initialFrameWidth;\n                    } else {\n                        options.minFrameWidth = options.initialFrameWidth = editor.$body.width() || UM.defaultWidth;\n                    }\n\n                    $container.css({\n                        width: options.initialFrameWidth,\n                        zIndex: editor.getOpt('zIndex')\n                    });\n\n                    //ie6下缓存图片\n                    UM.browser.ie && UM.browser.version === 6 && document.execCommand(\"BackgroundImageCache\", false, true);\n\n                    editor.render(id);\n\n                    //添加tooltip;\n                    $.eduitooltip && $.eduitooltip('attachTo', $(\"[data-original-title]\", $container)).css('z-index', editor.getOpt('zIndex') + 1);\n\n                    $container.find('a').click(function (evt) {\n                        evt.preventDefault();\n                    });\n\n                    editor.fireEvent(\"afteruiready\");\n                }\n\n                return editor;\n            },\n            createUI: function createUI(id, editor) {\n                var $editorCont = $(id),\n                    $container = $('<div class=\"edui-container\"><div class=\"edui-editor-body\"></div></div>').insertBefore($editorCont);\n                editor.$container = $container;\n                editor.container = $container[0];\n\n                editor.$body = $editorCont;\n\n                //修正在ie9+以上的版本中，自动长高收起时的，残影问题\n                if (browser.ie && browser.ie9above) {\n                    var $span = $('<span style=\"padding:0;margin:0;height:0;width:0\"></span>');\n                    $span.insertAfter($container);\n                }\n                //初始化注册的ui组件\n                $.each(_editorUI, function (n, v) {\n                    var widget = v.call(editor, n);\n                    if (widget) {\n                        _cacheUI[n] = widget;\n                    }\n                });\n\n                $container.find('.edui-editor-body').append($editorCont).before(this.createToolbar(editor.options, editor));\n\n                $container.find('.edui-toolbar').append($('<div class=\"edui-dialog-container\"></div>'));\n\n                return $container;\n            },\n            createToolbar: function createToolbar(options, editor) {\n                var $toolbar = $.eduitoolbar(),\n                    toolbar = $toolbar.edui();\n                //创建下来菜单列表\n\n                if (options.toolbar && options.toolbar.length) {\n                    var btns = [];\n                    $.each(options.toolbar, function (i, uiNames) {\n                        $.each(uiNames.split(/\\s+/), function (index, name) {\n                            if (name == '|') {\n                                $.eduiseparator && btns.push($.eduiseparator());\n                            } else {\n                                var ui = _cacheUI[name];\n                                if (name == \"fullscreen\") {\n                                    ui && btns.unshift(ui);\n                                } else {\n                                    ui && btns.push(ui);\n                                }\n                            }\n                        });\n                        btns.length && toolbar.appendToBtnmenu(btns);\n                    });\n                } else {\n                    $toolbar.find('.edui-btn-toolbar').remove();\n                }\n                return $toolbar;\n            }\n\n        });\n    })();\n\n    UM.registerUI('bold italic redo undo underline strikethrough superscript subscript insertorderedlist insertunorderedlist ' + 'cleardoc selectall link unlink print preview justifyleft justifycenter justifyright justifyfull removeformat horizontal drafts', function (name) {\n        var me = this;\n        var $btn = $.eduibutton({\n            icon: name,\n            click: function click() {\n                me.execCommand(name);\n            },\n            title: this.getLang('labelMap')[name] || ''\n        });\n\n        this.addListener('selectionchange', function () {\n            var state = this.queryCommandState(name);\n            $btn.edui().disabled(state == -1).active(state == 1);\n        });\n        return $btn;\n    });\n\n    /**\r\n     * 全屏组件\r\n     */\n\n    (function () {\n\n        //状态缓存\n        var STATUS_CACHE = {},\n\n        //状态值列表\n        STATUS_LIST = ['width', 'height', 'position', 'top', 'left', 'margin', 'padding', 'overflowX', 'overflowY'],\n            CONTENT_AREA_STATUS = {},\n\n        //页面状态\n        DOCUMENT_STATUS = {},\n            DOCUMENT_ELEMENT_STATUS = {},\n            FULLSCREENS = {};\n\n        UM.registerUI('fullscreen', function (name) {\n\n            var me = this,\n                $button = $.eduibutton({\n                'icon': 'fullscreen',\n                'title': me.options.labelMap && me.options.labelMap[name] || me.getLang(\"labelMap.\" + name),\n                'click': function click() {\n                    //切换\n                    me.execCommand(name);\n                    UM.setTopEditor(me);\n                }\n            });\n\n            me.addListener(\"selectionchange\", function () {\n\n                var state = this.queryCommandState(name);\n                $button.edui().disabled(state == -1).active(state == 1);\n            });\n\n            //切换至全屏\n            me.addListener('ready', function () {\n\n                me.options.fullscreen && Fullscreen.getInstance(me).toggle();\n            });\n\n            return $button;\n        });\n\n        UM.commands['fullscreen'] = {\n\n            execCommand: function execCommand(cmdName) {\n\n                Fullscreen.getInstance(this).toggle();\n            },\n            queryCommandState: function queryCommandState(cmdName) {\n\n                return this._edui_fullscreen_status;\n            },\n            notNeedUndo: 1\n\n        };\n\n        function Fullscreen(editor) {\n\n            var me = this;\n\n            if (!editor) {\n                throw new Error('invalid params, notfound editor');\n            }\n\n            me.editor = editor;\n\n            //记录初始化的全屏组件\n            FULLSCREENS[editor.uid] = this;\n\n            editor.addListener('destroy', function () {\n                delete FULLSCREENS[editor.uid];\n                me.editor = null;\n            });\n        }\n\n        Fullscreen.prototype = {\n\n            /**\r\n             * 全屏状态切换\r\n             */\n            toggle: function toggle() {\n\n                var editor = this.editor,\n\n                //当前编辑器的缩放状态\n                _edui_fullscreen_status = this.isFullState();\n                editor.fireEvent('beforefullscreenchange', !_edui_fullscreen_status);\n\n                //更新状态\n                this.update(!_edui_fullscreen_status);\n\n                !_edui_fullscreen_status ? this.enlarge() : this.revert();\n\n                editor.fireEvent('afterfullscreenchange', !_edui_fullscreen_status);\n                if (editor.body.contentEditable === 'true') {\n                    editor.fireEvent('fullscreenchanged', !_edui_fullscreen_status);\n                }\n\n                editor.fireEvent('selectionchange');\n            },\n            /**\r\n             * 执行放大\r\n             */\n            enlarge: function enlarge() {\n\n                this.saveSataus();\n\n                this.setDocumentStatus();\n\n                this.resize();\n            },\n            /**\r\n             * 全屏还原\r\n             */\n            revert: function revert() {\n\n                //还原CSS表达式\n                var options = this.editor.options,\n                    height = /%$/.test(options.initialFrameHeight) ? '100%' : options.initialFrameHeight - this.getStyleValue(\"padding-top\") - this.getStyleValue(\"padding-bottom\") - this.getStyleValue('border-width');\n\n                $.IE6 && this.getEditorHolder().style.setExpression('height', 'this.scrollHeight <= ' + height + ' ? \"' + height + 'px\" : \"auto\"');\n\n                //还原容器状态\n                this.revertContainerStatus();\n\n                this.revertContentAreaStatus();\n\n                this.revertDocumentStatus();\n            },\n            /**\r\n             * 更新状态\r\n             * @param isFull 当前状态是否是全屏状态\r\n             */\n            update: function update(isFull) {\n                this.editor._edui_fullscreen_status = isFull;\n            },\n            /**\r\n             * 调整当前编辑器的大小, 如果当前编辑器不处于全屏状态， 则不做调整\r\n             */\n            resize: function resize() {\n\n                var $win = null,\n                    height = 0,\n                    width = 0,\n                    borderWidth = 0,\n                    paddingWidth = 0,\n                    editor = this.editor,\n                    me = this,\n                    bound = null,\n                    editorBody = null;\n\n                if (!this.isFullState()) {\n                    return;\n                }\n\n                $win = $(window);\n                width = $win.width();\n                height = $win.height();\n                editorBody = this.getEditorHolder();\n                //文本编辑区border宽度\n                borderWidth = parseInt(domUtils.getComputedStyle(editorBody, 'border-width'), 10) || 0;\n                //容器border宽度\n                borderWidth += parseInt(domUtils.getComputedStyle(editor.container, 'border-width'), 10) || 0;\n                //容器padding\n                paddingWidth += parseInt(domUtils.getComputedStyle(editorBody, 'padding-left'), 10) + parseInt(domUtils.getComputedStyle(editorBody, 'padding-right'), 10) || 0;\n\n                //干掉css表达式\n                $.IE6 && editorBody.style.setExpression('height', null);\n\n                bound = this.getBound();\n\n                $(editor.container).css({\n                    width: width + 'px',\n                    height: height + 'px',\n                    position: !$.IE6 ? 'fixed' : 'absolute',\n                    top: bound.top,\n                    left: bound.left,\n                    margin: 0,\n                    padding: 0,\n                    overflowX: 'hidden',\n                    overflowY: 'hidden'\n                });\n\n                $(editorBody).css({\n                    width: width - 2 * borderWidth - paddingWidth + 'px',\n                    height: height - 2 * borderWidth - (editor.options.withoutToolbar ? 0 : $('.edui-toolbar', editor.container).outerHeight()) - $('.edui-bottombar', editor.container).outerHeight() + 'px',\n                    overflowX: 'hidden',\n                    overflowY: 'auto'\n                });\n            },\n            /**\r\n             * 保存状态\r\n             */\n            saveSataus: function saveSataus() {\n\n                var styles = this.editor.container.style,\n                    tmp = null,\n                    cache = {};\n\n                for (var i = 0, len = STATUS_LIST.length; i < len; i++) {\n\n                    tmp = STATUS_LIST[i];\n                    cache[tmp] = styles[tmp];\n                }\n\n                STATUS_CACHE[this.editor.uid] = cache;\n\n                this.saveContentAreaStatus();\n                this.saveDocumentStatus();\n            },\n            saveContentAreaStatus: function saveContentAreaStatus() {\n\n                var $holder = $(this.getEditorHolder());\n\n                CONTENT_AREA_STATUS[this.editor.uid] = {\n                    width: $holder.css(\"width\"),\n                    overflowX: $holder.css(\"overflowX\"),\n                    overflowY: $holder.css(\"overflowY\"),\n                    height: $holder.css(\"height\")\n                };\n            },\n            /**\r\n             * 保存与指定editor相关的页面的状态\r\n             */\n            saveDocumentStatus: function saveDocumentStatus() {\n\n                var $doc = $(this.getEditorDocumentBody());\n\n                DOCUMENT_STATUS[this.editor.uid] = {\n                    overflowX: $doc.css('overflowX'),\n                    overflowY: $doc.css('overflowY')\n                };\n                DOCUMENT_ELEMENT_STATUS[this.editor.uid] = {\n                    overflowX: $(this.getEditorDocumentElement()).css('overflowX'),\n                    overflowY: $(this.getEditorDocumentElement()).css('overflowY')\n                };\n            },\n            /**\r\n             * 恢复容器状态\r\n             */\n            revertContainerStatus: function revertContainerStatus() {\n                $(this.editor.container).css(this.getEditorStatus());\n            },\n            /**\r\n             * 恢复编辑区状态\r\n             */\n            revertContentAreaStatus: function revertContentAreaStatus() {\n                var holder = this.getEditorHolder(),\n                    state = this.getContentAreaStatus();\n\n                if (this.supportMin()) {\n                    delete state.height;\n                    holder.style.height = null;\n                }\n\n                $(holder).css(state);\n            },\n            /**\r\n             * 恢复页面状态\r\n             */\n            revertDocumentStatus: function revertDocumentStatus() {\n\n                var status = this.getDocumentStatus();\n                $(this.getEditorDocumentBody()).css('overflowX', status.body.overflowX);\n                $(this.getEditorDocumentElement()).css('overflowY', status.html.overflowY);\n            },\n            setDocumentStatus: function setDocumentStatus() {\n                $(this.getEditorDocumentBody()).css({\n                    overflowX: 'hidden',\n                    overflowY: 'hidden'\n                });\n                $(this.getEditorDocumentElement()).css({\n                    overflowX: 'hidden',\n                    overflowY: 'hidden'\n                });\n            },\n            /**\r\n             * 检测当前编辑器是否处于全屏状态全屏状态\r\n             * @returns {boolean} 是否处于全屏状态\r\n             */\n            isFullState: function isFullState() {\n                return !!this.editor._edui_fullscreen_status;\n            },\n            /**\r\n             * 获取编辑器状态\r\n             */\n            getEditorStatus: function getEditorStatus() {\n                return STATUS_CACHE[this.editor.uid];\n            },\n            getContentAreaStatus: function getContentAreaStatus() {\n                return CONTENT_AREA_STATUS[this.editor.uid];\n            },\n            getEditorDocumentElement: function getEditorDocumentElement() {\n                return this.editor.container.ownerDocument.documentElement;\n            },\n            getEditorDocumentBody: function getEditorDocumentBody() {\n                return this.editor.container.ownerDocument.body;\n            },\n            /**\r\n             * 获取编辑区包裹对象\r\n             */\n            getEditorHolder: function getEditorHolder() {\n                return this.editor.body;\n            },\n            /**\r\n             * 获取编辑器状态\r\n             * @returns {*}\r\n             */\n            getDocumentStatus: function getDocumentStatus() {\n                return {\n                    'body': DOCUMENT_STATUS[this.editor.uid],\n                    'html': DOCUMENT_ELEMENT_STATUS[this.editor.uid]\n                };\n            },\n            supportMin: function supportMin() {\n\n                var node = null;\n\n                if (!this._support) {\n\n                    node = document.createElement(\"div\");\n\n                    this._support = \"minWidth\" in node.style;\n\n                    node = null;\n                }\n\n                return this._support;\n            },\n            getBound: function getBound() {\n\n                var tags = {\n                    html: true,\n                    body: true\n                },\n                    result = {\n                    top: 0,\n                    left: 0\n                },\n                    offsetParent = null;\n\n                if (!$.IE6) {\n                    return result;\n                }\n\n                offsetParent = this.editor.container.offsetParent;\n\n                if (offsetParent && !tags[offsetParent.nodeName.toLowerCase()]) {\n                    tags = offsetParent.getBoundingClientRect();\n                    result.top = -tags.top;\n                    result.left = -tags.left;\n                }\n\n                return result;\n            },\n            getStyleValue: function getStyleValue(attr) {\n                return parseInt(domUtils.getComputedStyle(this.getEditorHolder(), attr));\n            }\n        };\n\n        $.extend(Fullscreen, {\n            /**\r\n             * 监听resize\r\n             */\n            listen: function listen() {\n\n                var timer = null;\n\n                if (Fullscreen._hasFullscreenListener) {\n                    return;\n                }\n\n                Fullscreen._hasFullscreenListener = true;\n\n                $(window).on('resize', function () {\n\n                    if (timer !== null) {\n                        window.clearTimeout(timer);\n                        timer = null;\n                    }\n\n                    timer = window.setTimeout(function () {\n\n                        for (var key in FULLSCREENS) {\n                            FULLSCREENS[key].resize();\n                        }\n\n                        timer = null;\n                    }, 50);\n                });\n            },\n\n            getInstance: function getInstance(editor) {\n\n                if (!FULLSCREENS[editor.uid]) {\n                    new Fullscreen(editor);\n                }\n\n                return FULLSCREENS[editor.uid];\n            }\n\n        });\n\n        //开始监听\n        Fullscreen.listen();\n    })();\n    UM.registerUI('link image video map formula', function (name) {\n\n        var me = this,\n            currentRange,\n            $dialog,\n            opt = {\n            title: me.options.labelMap && me.options.labelMap[name] || me.getLang(\"labelMap.\" + name),\n            url: me.options.UMEDITOR_HOME_URL + 'dialogs/' + name + '/' + name + '.js'\n        };\n\n        var $btn = $.eduibutton({\n            icon: name,\n            title: this.getLang('labelMap')[name] || ''\n        });\n        //加载模版数据\n        utils.loadFile(document, {\n            src: opt.url,\n            tag: \"script\",\n            type: \"text/javascript\",\n            defer: \"defer\"\n        }, function () {\n            //调整数据\n            var data = UM.getWidgetData(name);\n            if (!data) return;\n            if (data.buttons) {\n                var ok = data.buttons.ok;\n                if (ok) {\n                    opt.oklabel = ok.label || me.getLang('ok');\n                    if (ok.exec) {\n                        opt.okFn = function () {\n                            return $.proxy(ok.exec, null, me, $dialog)();\n                        };\n                    }\n                }\n                var cancel = data.buttons.cancel;\n                if (cancel) {\n                    opt.cancellabel = cancel.label || me.getLang('cancel');\n                    if (cancel.exec) {\n                        opt.cancelFn = function () {\n                            return $.proxy(cancel.exec, null, me, $dialog)();\n                        };\n                    }\n                }\n            }\n            data.width && (opt.width = data.width);\n            data.height && (opt.height = data.height);\n\n            $dialog = $.eduimodal(opt);\n\n            $dialog.attr('id', 'edui-dialog-' + name).addClass('edui-dialog-' + name).find('.edui-modal-body').addClass('edui-dialog-' + name + '-body');\n\n            $dialog.edui().on('beforehide', function () {\n                var rng = me.selection.getRange();\n                if (rng.equals(currentRange)) {\n                    rng.select();\n                }\n            }).on('beforeshow', function () {\n                var $root = this.root(),\n                    win = null,\n                    offset = null;\n                currentRange = me.selection.getRange();\n                if (!$root.parent()[0]) {\n                    me.$container.find('.edui-dialog-container').append($root);\n                }\n\n                //IE6下 特殊处理, 通过计算进行定位\n                if ($.IE6) {\n\n                    win = {\n                        width: $(window).width(),\n                        height: $(window).height()\n                    };\n                    offset = $root.parents(\".edui-toolbar\")[0].getBoundingClientRect();\n                    $root.css({\n                        position: 'absolute',\n                        margin: 0,\n                        left: (win.width - $root.width()) / 2 - offset.left,\n                        top: 100 - offset.top\n                    });\n                }\n                UM.setWidgetBody(name, $dialog, me);\n                UM.setTopEditor(me);\n            }).on('afterbackdrop', function () {\n                this.$backdrop.css('zIndex', me.getOpt('zIndex') + 1).appendTo(me.$container.find('.edui-dialog-container'));\n                $dialog.css('zIndex', me.getOpt('zIndex') + 2);\n            }).on('beforeok', function () {\n                try {\n                    currentRange.select();\n                } catch (e) {}\n            }).attachTo($btn);\n        });\n\n        me.addListener('selectionchange', function () {\n            var state = this.queryCommandState(name);\n            $btn.edui().disabled(state == -1).active(state == 1);\n        });\n        return $btn;\n    });\n    UM.registerUI('emotion formula', function (name) {\n        var me = this,\n            url = me.options.UMEDITOR_HOME_URL + 'dialogs/' + name + '/' + name + '.js';\n\n        var $btn = $.eduibutton({\n            icon: name,\n            title: this.getLang('labelMap')[name] || ''\n        });\n\n        //加载模版数据\n        utils.loadFile(document, {\n            src: url,\n            tag: \"script\",\n            type: \"text/javascript\",\n            defer: \"defer\"\n        }, function () {\n            var opt = {\n                url: url\n            };\n            //调整数据\n            var data = UM.getWidgetData(name);\n\n            data.width && (opt.width = data.width);\n            data.height && (opt.height = data.height);\n\n            $.eduipopup(opt).css('zIndex', me.options.zIndex + 1).addClass('edui-popup-' + name).edui().on('beforeshow', function () {\n                var $root = this.root();\n                if (!$root.parent().length) {\n                    me.$container.find('.edui-dialog-container').append($root);\n                }\n                UM.setWidgetBody(name, $root, me);\n                UM.setTopEditor(me);\n            }).attachTo($btn, {\n                offsetTop: -5,\n                offsetLeft: 10,\n                caretLeft: 11,\n                caretTop: -8\n            });\n            me.addListener('selectionchange', function () {\n                var state = this.queryCommandState(name);\n                $btn.edui().disabled(state == -1).active(state == 1);\n            });\n        });\n        return $btn;\n    });\n    UM.registerUI('imagescale', function () {\n        var me = this,\n            $imagescale;\n\n        me.setOpt('imageScaleEnabled', true);\n\n        if (browser.webkit && me.getOpt('imageScaleEnabled')) {\n\n            me.addListener('click', function (type, e) {\n                var range = me.selection.getRange(),\n                    img = range.getClosedNode(),\n                    target = e.target;\n\n                /* 点击第一个图片的后面,八个角不消失 fix:3652 */\n                if (img && img.tagName == 'IMG' && target == img) {\n\n                    if (!$imagescale) {\n                        $imagescale = $.eduiscale({ '$wrap': me.$container }).css('zIndex', me.options.zIndex);\n                        me.$container.append($imagescale);\n\n                        var _keyDownHandler = function _keyDownHandler() {\n                            $imagescale.edui().hide();\n                        },\n                            _mouseDownHandler = function _mouseDownHandler(e) {\n                            var ele = e.target || e.srcElement;\n                            if (ele && ele.className.indexOf('edui-scale') == -1) {\n                                _keyDownHandler(e);\n                            }\n                        },\n                            timer;\n\n                        $imagescale.edui().on('aftershow', function () {\n                            $(document).bind('keydown', _keyDownHandler);\n                            $(document).bind('mousedown', _mouseDownHandler);\n                            me.selection.getNative().removeAllRanges();\n                        }).on('afterhide', function () {\n                            $(document).unbind('keydown', _keyDownHandler);\n                            $(document).unbind('mousedown', _mouseDownHandler);\n                            var target = $imagescale.edui().getScaleTarget();\n                            if (target.parentNode) {\n                                me.selection.getRange().selectNode(target).select();\n                            }\n                        }).on('mousedown', function (e) {\n                            me.selection.getNative().removeAllRanges();\n                            var ele = e.target || e.srcElement;\n                            if (ele && ele.className.indexOf('edui-scale-hand') == -1) {\n                                timer = setTimeout(function () {\n                                    $imagescale.edui().hide();\n                                }, 200);\n                            }\n                        }).on('mouseup', function (e) {\n                            var ele = e.target || e.srcElement;\n                            if (ele && ele.className.indexOf('edui-scale-hand') == -1) {\n                                clearTimeout(timer);\n                            }\n                        });\n                    }\n                    $imagescale.edui().show($(img));\n                } else {\n                    if ($imagescale && $imagescale.css('display') != 'none') $imagescale.edui().hide();\n                }\n            });\n\n            me.addListener('click', function (type, e) {\n                if (e.target.tagName == 'IMG') {\n                    var range = new dom.Range(me.document, me.body);\n                    range.selectNode(e.target).select();\n                }\n            });\n        }\n    });\n    UM.registerUI('autofloat', function () {\n        var me = this,\n            lang = me.getLang();\n        me.setOpt({\n            autoFloatEnabled: true,\n            topOffset: 0\n        });\n        var optsAutoFloatEnabled = me.options.autoFloatEnabled !== false,\n            topOffset = me.options.topOffset;\n\n        //如果不固定toolbar的位置，则直接退出\n        if (!optsAutoFloatEnabled) {\n            return;\n        }\n        me.ready(function () {\n            var LteIE6 = browser.ie && browser.version <= 6,\n                quirks = browser.quirks;\n\n            function checkHasUI() {\n                if (!UM.ui) {\n                    alert(lang.autofloatMsg);\n                    return 0;\n                }\n                return 1;\n            }\n            function fixIE6FixedPos() {\n                var docStyle = document.body.style;\n                docStyle.backgroundImage = 'url(\"about:blank\")';\n                docStyle.backgroundAttachment = 'fixed';\n            }\n            var bakCssText,\n                placeHolder = document.createElement('div'),\n                toolbarBox,\n                orgTop,\n                getPosition = function getPosition(element) {\n                var bcr;\n                //trace  IE6下在控制编辑器显隐时可能会报错，catch一下\n                try {\n                    bcr = element.getBoundingClientRect();\n                } catch (e) {\n                    bcr = { left: 0, top: 0, height: 0, width: 0 };\n                }\n                var rect = {\n                    left: Math.round(bcr.left),\n                    top: Math.round(bcr.top),\n                    height: Math.round(bcr.bottom - bcr.top),\n                    width: Math.round(bcr.right - bcr.left)\n                };\n                var doc;\n                while ((doc = element.ownerDocument) !== document && (element = domUtils.getWindow(doc).frameElement)) {\n                    bcr = element.getBoundingClientRect();\n                    rect.left += bcr.left;\n                    rect.top += bcr.top;\n                }\n                rect.bottom = rect.top + rect.height;\n                rect.right = rect.left + rect.width;\n                return rect;\n            };\n            var isFullScreening = false;\n            function setFloating() {\n                if (isFullScreening) {\n                    return;\n                }\n                var toobarBoxPos = domUtils.getXY(toolbarBox),\n                    origalFloat = domUtils.getComputedStyle(toolbarBox, 'position'),\n                    origalLeft = domUtils.getComputedStyle(toolbarBox, 'left');\n                toolbarBox.style.width = toolbarBox.offsetWidth + 'px';\n                toolbarBox.style.zIndex = me.options.zIndex * 1 + 1;\n                toolbarBox.parentNode.insertBefore(placeHolder, toolbarBox);\n                if (LteIE6 || quirks && browser.ie) {\n                    if (toolbarBox.style.position != 'absolute') {\n                        toolbarBox.style.position = 'absolute';\n                    }\n                    toolbarBox.style.top = (document.body.scrollTop || document.documentElement.scrollTop) - orgTop + topOffset + 'px';\n                } else {\n                    if (toolbarBox.style.position != 'fixed') {\n                        toolbarBox.style.position = 'fixed';\n                        toolbarBox.style.top = topOffset + \"px\";\n                        (origalFloat == 'absolute' || origalFloat == 'relative') && parseFloat(origalLeft) && (toolbarBox.style.left = toobarBoxPos.x + 'px');\n                    }\n                }\n            }\n            function unsetFloating() {\n\n                if (placeHolder.parentNode) {\n                    placeHolder.parentNode.removeChild(placeHolder);\n                }\n                toolbarBox.style.cssText = bakCssText;\n            }\n\n            function updateFloating() {\n                var rect3 = getPosition(me.container);\n                var offset = me.options.toolbarTopOffset || 0;\n                if (rect3.top < 0 && rect3.bottom - toolbarBox.offsetHeight > offset) {\n                    setFloating();\n                } else {\n                    unsetFloating();\n                }\n            }\n            var defer_updateFloating = utils.defer(function () {\n                updateFloating();\n            }, browser.ie ? 200 : 100, true);\n\n            me.addListener('destroy', function () {\n                $(window).off('scroll resize', updateFloating);\n                me.removeListener('keydown', defer_updateFloating);\n            });\n\n            if (checkHasUI(me)) {\n                toolbarBox = $('.edui-toolbar', me.container)[0];\n                me.addListener(\"afteruiready\", function () {\n                    setTimeout(function () {\n                        orgTop = $(toolbarBox).offset().top;\n                    }, 100);\n                });\n                bakCssText = toolbarBox.style.cssText;\n                placeHolder.style.height = toolbarBox.offsetHeight + 'px';\n                if (LteIE6) {\n                    fixIE6FixedPos();\n                }\n\n                $(window).on('scroll resize', updateFloating);\n                me.addListener('keydown', defer_updateFloating);\n                me.addListener('resize', function () {\n                    unsetFloating();\n                    placeHolder.style.height = toolbarBox.offsetHeight + 'px';\n                    updateFloating();\n                });\n\n                me.addListener('beforefullscreenchange', function (t, enabled) {\n                    if (enabled) {\n                        unsetFloating();\n                        isFullScreening = enabled;\n                    }\n                });\n                me.addListener('fullscreenchanged', function (t, enabled) {\n                    if (!enabled) {\n                        updateFloating();\n                    }\n                    isFullScreening = enabled;\n                });\n                me.addListener('sourcemodechanged', function (t, enabled) {\n                    setTimeout(function () {\n                        updateFloating();\n                    }, 0);\n                });\n                me.addListener(\"clearDoc\", function () {\n                    setTimeout(function () {\n                        updateFloating();\n                    }, 0);\n                });\n            }\n        });\n    });\n    UM.registerUI('source', function (name) {\n        var me = this;\n        me.addListener('fullscreenchanged', function () {\n            me.$container.find('textarea').width(me.$body.width() - 10).height(me.$body.height());\n        });\n        var $btn = $.eduibutton({\n            icon: name,\n            click: function click() {\n                me.execCommand(name);\n                UM.setTopEditor(me);\n            },\n            title: this.getLang('labelMap')[name] || ''\n        });\n\n        this.addListener('selectionchange', function () {\n            var state = this.queryCommandState(name);\n            $btn.edui().disabled(state == -1).active(state == 1);\n        });\n        return $btn;\n    });\n\n    UM.registerUI('paragraph fontfamily fontsize', function (name) {\n\n        var me = this,\n            label = me.options.labelMap && me.options.labelMap[name] || me.getLang(\"labelMap.\" + name),\n            options = {\n            label: label,\n            title: label,\n            comboboxName: name,\n            items: me.options[name] || [],\n            itemStyles: [],\n            value: [],\n            autowidthitem: []\n        },\n            $combox = null,\n            comboboxWidget = null;\n        if (options.items.length == 0) {\n            return null;\n        }\n        switch (name) {\n\n            case 'paragraph':\n                options = transForParagraph(options);\n                break;\n\n            case 'fontfamily':\n                options = transForFontfamily(options);\n                break;\n\n            case 'fontsize':\n                options = transForFontsize(options);\n                break;\n\n        }\n\n        //实例化\n        $combox = $.eduibuttoncombobox(options).css('zIndex', me.getOpt('zIndex') + 1);\n        comboboxWidget = $combox.edui();\n\n        comboboxWidget.on('comboboxselect', function (evt, res) {\n            me.execCommand(name, res.value);\n        }).on(\"beforeshow\", function () {\n            if ($combox.parent().length === 0) {\n                $combox.appendTo(me.$container.find('.edui-dialog-container'));\n            }\n            UM.setTopEditor(me);\n        });\n\n        //状态反射\n        this.addListener('selectionchange', function (evt) {\n\n            var state = this.queryCommandState(name),\n                value = this.queryCommandValue(name);\n\n            //设置按钮状态\n            comboboxWidget.button().edui().disabled(state == -1).active(state == 1);\n            if (value) {\n                //设置label\n                value = value.replace(/['\"]/g, '').toLowerCase().split(/['|\"]?\\s*,\\s*[\\1]?/);\n\n                comboboxWidget.selectItemByLabel(value);\n            }\n        });\n\n        return comboboxWidget.button().addClass('edui-combobox');\n\n        /**\r\n         * 宽度自适应工具函数\r\n         * @param word 单词内容\r\n         * @param hasSuffix 是否含有后缀\r\n         */\n        function wordCountAdaptive(word, hasSuffix) {\n\n            var $tmpNode = $('<span>').html(word).css({\n                display: 'inline',\n                position: 'absolute',\n                top: -10000000,\n                left: -100000\n            }).appendTo(document.body),\n                width = $tmpNode.width();\n\n            $tmpNode.remove();\n            $tmpNode = null;\n\n            if (width < 50) {\n\n                return word;\n            } else {\n\n                word = word.slice(0, hasSuffix ? -4 : -1);\n\n                if (!word.length) {\n                    return '...';\n                }\n\n                return wordCountAdaptive(word + '...', true);\n            }\n        }\n\n        //段落参数转换\n        function transForParagraph(options) {\n\n            var tempItems = [];\n\n            for (var key in options.items) {\n\n                options.value.push(key);\n                tempItems.push(key);\n                options.autowidthitem.push(wordCountAdaptive(key));\n            }\n\n            options.items = tempItems;\n            options.autoRecord = false;\n\n            return options;\n        }\n\n        //字体参数转换\n        function transForFontfamily(options) {\n\n            var temp = null,\n                tempItems = [];\n\n            for (var i = 0, len = options.items.length; i < len; i++) {\n\n                temp = options.items[i].val;\n                tempItems.push(temp.split(/\\s*,\\s*/)[0]);\n                options.itemStyles.push('font-family: ' + temp);\n                options.value.push(temp);\n                options.autowidthitem.push(wordCountAdaptive(tempItems[i]));\n            }\n\n            options.items = tempItems;\n\n            return options;\n        }\n\n        //字体大小参数转换\n        function transForFontsize(options) {\n\n            var temp = null,\n                tempItems = [];\n\n            options.itemStyles = [];\n            options.value = [];\n\n            for (var i = 0, len = options.items.length; i < len; i++) {\n\n                temp = options.items[i];\n                tempItems.push(temp);\n                options.itemStyles.push('font-size: ' + temp + 'px');\n            }\n\n            options.value = options.items;\n            options.items = tempItems;\n            options.autoRecord = false;\n\n            return options;\n        }\n    });\n\n    UM.registerUI('forecolor backcolor', function (name) {\n        function getCurrentColor() {\n            return domUtils.getComputedStyle($colorLabel[0], 'background-color');\n        }\n\n        var me = this,\n            $colorPickerWidget = null,\n            $colorLabel = null,\n            $btn = null;\n\n        //querycommand\n        this.addListener('selectionchange', function () {\n\n            var state = this.queryCommandState(name);\n            $btn.edui().disabled(state == -1).active(state == 1);\n        });\n\n        $btn = $.eduicolorsplitbutton({\n            icon: name,\n            caret: true,\n            name: name,\n            title: me.getLang(\"labelMap\")[name],\n            click: function click() {\n                me.execCommand(name, getCurrentColor());\n            }\n        });\n\n        $colorLabel = $btn.edui().colorLabel();\n\n        $colorPickerWidget = $.eduicolorpicker({\n            name: name,\n            lang_clearColor: me.getLang('clearColor') || '',\n            lang_themeColor: me.getLang('themeColor') || '',\n            lang_standardColor: me.getLang('standardColor') || ''\n        }).on('pickcolor', function (evt, color) {\n            window.setTimeout(function () {\n                $colorLabel.css(\"backgroundColor\", color);\n                me.execCommand(name, color);\n            }, 0);\n        }).on('show', function () {\n            UM.setActiveWidget(colorPickerWidget.root());\n        }).css('zIndex', me.getOpt('zIndex') + 1);\n\n        $btn.edui().on('arrowclick', function () {\n            if (!$colorPickerWidget.parent().length) {\n                me.$container.find('.edui-dialog-container').append($colorPickerWidget);\n            }\n            $colorPickerWidget.edui().show($btn, {\n                caretDir: \"down\",\n                offsetTop: -5,\n                offsetLeft: 8,\n                caretLeft: 11,\n                caretTop: -8\n            });\n            UM.setTopEditor(me);\n        }).register('click', $btn, function () {\n            $colorPickerWidget.edui().hide();\n        });\n\n        return $btn;\n    });\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

},[21]);